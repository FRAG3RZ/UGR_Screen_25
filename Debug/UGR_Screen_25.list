
UGR_Screen_25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000076a4  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3d0  0800c3d0  0000e0e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3d0  0800c3d0  0000d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d8  0800c3d8  0000e0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d8  0800c3d8  0000d3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3dc  0800c3dc  0000d3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  0800c3e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0e0  2**0
                  CONTENTS
 10 .bss          00000668  200000e0  200000e0  0000e0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000748  20000748  0000e0e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016213  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d79  00000000  00000000  00024323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009b0a  00000000  00000000  0002709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f10  00000000  00000000  00030ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c97  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013293  00000000  00000000  0003274f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005428  00000000  00000000  000459e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0004ae0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003294  00000000  00000000  0004ae50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0004e0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d14 	.word	0x08004d14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	08004d14 	.word	0x08004d14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	4605      	mov	r5, r0
 8000564:	460e      	mov	r6, r1
 8000566:	4617      	mov	r7, r2
    Paint.WidthMemory = Width;
 8000568:	4c0d      	ldr	r4, [pc, #52]	@ (80005a0 <Paint_NewImage+0x40>)
 800056a:	8120      	strh	r0, [r4, #8]
    Paint.HeightMemory = Height;
 800056c:	8161      	strh	r1, [r4, #10]
    Paint.Color = Color;    
 800056e:	81a3      	strh	r3, [r4, #12]
    Paint.WidthByte = Width;
 8000570:	8260      	strh	r0, [r4, #18]
    Paint.HeightByte = Height;    
 8000572:	82a1      	strh	r1, [r4, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000574:	8a61      	ldrh	r1, [r4, #18]
 8000576:	8aa2      	ldrh	r2, [r4, #20]
 8000578:	b292      	uxth	r2, r2
 800057a:	b289      	uxth	r1, r1
 800057c:	4809      	ldr	r0, [pc, #36]	@ (80005a4 <Paint_NewImage+0x44>)
 800057e:	f003 fc43 	bl	8003e08 <iprintf>
   
    Paint.Rotate = Rotate;
 8000582:	81e7      	strh	r7, [r4, #14]
    Paint.Mirror = MIRROR_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	8223      	strh	r3, [r4, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000588:	b12f      	cbz	r7, 8000596 <Paint_NewImage+0x36>
 800058a:	2fb4      	cmp	r7, #180	@ 0xb4
 800058c:	d003      	beq.n	8000596 <Paint_NewImage+0x36>
        Paint.Width = Width;
        Paint.Height = Height;
    } else {
        Paint.Width = Height;
 800058e:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <Paint_NewImage+0x40>)
 8000590:	809e      	strh	r6, [r3, #4]
        Paint.Height = Width;
 8000592:	80dd      	strh	r5, [r3, #6]
    }
}
 8000594:	e002      	b.n	800059c <Paint_NewImage+0x3c>
        Paint.Width = Width;
 8000596:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <Paint_NewImage+0x40>)
 8000598:	809d      	strh	r5, [r3, #4]
        Paint.Height = Height;
 800059a:	80de      	strh	r6, [r3, #6]
}
 800059c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000104 	.word	0x20000104
 80005a4:	08004d2c 	.word	0x08004d2c

080005a8 <Paint_SetClearFuntion>:
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
  CLEAR=Clear;
 80005a8:	4b01      	ldr	r3, [pc, #4]	@ (80005b0 <Paint_SetClearFuntion+0x8>)
 80005aa:	6018      	str	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	200000fc 	.word	0x200000fc

080005b4 <Paint_SetDisplayFuntion>:
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
  DISPLAY=Display;
 80005b4:	4b01      	ldr	r3, [pc, #4]	@ (80005bc <Paint_SetDisplayFuntion+0x8>)
 80005b6:	6018      	str	r0, [r3, #0]
}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000100 	.word	0x20000100

080005c0 <Paint_SetRotate>:
function:	Select Image Rotate
parameter:
    Rotate   :   0,90,180,270
******************************************************************************/
void Paint_SetRotate(UWORD Rotate)
{
 80005c0:	b510      	push	{r4, lr}
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 80005c2:	4604      	mov	r4, r0
 80005c4:	b130      	cbz	r0, 80005d4 <Paint_SetRotate+0x14>
 80005c6:	285a      	cmp	r0, #90	@ 0x5a
 80005c8:	d004      	beq.n	80005d4 <Paint_SetRotate+0x14>
 80005ca:	28b4      	cmp	r0, #180	@ 0xb4
 80005cc:	d002      	beq.n	80005d4 <Paint_SetRotate+0x14>
 80005ce:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 80005d2:	d106      	bne.n	80005e2 <Paint_SetRotate+0x22>
        Debug("Set image Rotate %d\r\n", Rotate);
 80005d4:	4621      	mov	r1, r4
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <Paint_SetRotate+0x2c>)
 80005d8:	f003 fc16 	bl	8003e08 <iprintf>
        Paint.Rotate = Rotate;
 80005dc:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <Paint_SetRotate+0x30>)
 80005de:	81dc      	strh	r4, [r3, #14]
    } else {
        Debug("rotate = 0, 90, 180, 270\r\n");
      //  exit(0);
    }
}
 80005e0:	bd10      	pop	{r4, pc}
        Debug("rotate = 0, 90, 180, 270\r\n");
 80005e2:	4804      	ldr	r0, [pc, #16]	@ (80005f4 <Paint_SetRotate+0x34>)
 80005e4:	f003 fc78 	bl	8003ed8 <puts>
}
 80005e8:	e7fa      	b.n	80005e0 <Paint_SetRotate+0x20>
 80005ea:	bf00      	nop
 80005ec:	08004d50 	.word	0x08004d50
 80005f0:	20000104 	.word	0x20000104
 80005f4:	08004d70 	.word	0x08004d70

080005f8 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80005f8:	b510      	push	{r4, lr}
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80005fa:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <Paint_SetPixel+0xd4>)
 80005fc:	889b      	ldrh	r3, [r3, #4]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	4283      	cmp	r3, r0
 8000602:	d31d      	bcc.n	8000640 <Paint_SetPixel+0x48>
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000606:	88db      	ldrh	r3, [r3, #6]
 8000608:	b29b      	uxth	r3, r3
 800060a:	428b      	cmp	r3, r1
 800060c:	d318      	bcc.n	8000640 <Paint_SetPixel+0x48>
        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800060e:	4b2f      	ldr	r3, [pc, #188]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000610:	89db      	ldrh	r3, [r3, #14]
 8000612:	b29b      	uxth	r3, r3
 8000614:	2bb4      	cmp	r3, #180	@ 0xb4
 8000616:	d022      	beq.n	800065e <Paint_SetPixel+0x66>
 8000618:	d816      	bhi.n	8000648 <Paint_SetPixel+0x50>
 800061a:	b143      	cbz	r3, 800062e <Paint_SetPixel+0x36>
 800061c:	2b5a      	cmp	r3, #90	@ 0x5a
 800061e:	d112      	bne.n	8000646 <Paint_SetPixel+0x4e>
    case 0:
        X = Xpoint;
        Y = Ypoint;  
        break;
    case 90:
        X = Paint.WidthMemory - Ypoint - 1;
 8000620:	4b2a      	ldr	r3, [pc, #168]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000622:	891b      	ldrh	r3, [r3, #8]
 8000624:	b29b      	uxth	r3, r3
 8000626:	3b01      	subs	r3, #1
 8000628:	1a5b      	subs	r3, r3, r1
        Y = Xpoint;
 800062a:	4601      	mov	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
 800062c:	b298      	uxth	r0, r3

    default:
        return;
    }
    
    switch(Paint.Mirror) {
 800062e:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000630:	8a1b      	ldrh	r3, [r3, #16]
 8000632:	b29b      	uxth	r3, r3
 8000634:	2b03      	cmp	r3, #3
 8000636:	d806      	bhi.n	8000646 <Paint_SetPixel+0x4e>
 8000638:	e8df f003 	tbb	[pc, r3]
 800063c:	38311d23 	.word	0x38311d23
        Debug("Exceeding display boundaries\r\n");
 8000640:	4823      	ldr	r0, [pc, #140]	@ (80006d0 <Paint_SetPixel+0xd8>)
 8000642:	f003 fc49 	bl	8003ed8 <puts>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
}
 8000646:	bd10      	pop	{r4, pc}
    switch(Paint.Rotate) {
 8000648:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800064c:	d1fb      	bne.n	8000646 <Paint_SetPixel+0x4e>
        Y = Paint.HeightMemory - Xpoint - 1;
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000650:	895b      	ldrh	r3, [r3, #10]
 8000652:	b29b      	uxth	r3, r3
 8000654:	3b01      	subs	r3, #1
 8000656:	1a1b      	subs	r3, r3, r0
        X = Ypoint;
 8000658:	4608      	mov	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 800065a:	b299      	uxth	r1, r3
        break;
 800065c:	e7e7      	b.n	800062e <Paint_SetPixel+0x36>
        X = Paint.WidthMemory - Xpoint - 1;
 800065e:	4c1b      	ldr	r4, [pc, #108]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000660:	8923      	ldrh	r3, [r4, #8]
 8000662:	b29b      	uxth	r3, r3
 8000664:	3b01      	subs	r3, #1
 8000666:	1a1b      	subs	r3, r3, r0
 8000668:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 800066a:	8963      	ldrh	r3, [r4, #10]
 800066c:	b29b      	uxth	r3, r3
 800066e:	3b01      	subs	r3, #1
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b299      	uxth	r1, r3
        break;
 8000674:	e7db      	b.n	800062e <Paint_SetPixel+0x36>
        X = Paint.WidthMemory - X - 1;
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000678:	891b      	ldrh	r3, [r3, #8]
 800067a:	b29b      	uxth	r3, r3
 800067c:	3b01      	subs	r3, #1
 800067e:	1a1b      	subs	r3, r3, r0
 8000680:	b298      	uxth	r0, r3
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <Paint_SetPixel+0xd4>)
 8000684:	891b      	ldrh	r3, [r3, #8]
 8000686:	b29b      	uxth	r3, r3
 8000688:	4283      	cmp	r3, r0
 800068a:	d31b      	bcc.n	80006c4 <Paint_SetPixel+0xcc>
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <Paint_SetPixel+0xd4>)
 800068e:	895b      	ldrh	r3, [r3, #10]
 8000690:	b29b      	uxth	r3, r3
 8000692:	428b      	cmp	r3, r1
 8000694:	d316      	bcc.n	80006c4 <Paint_SetPixel+0xcc>
		DISPLAY(X,Y, Color);
 8000696:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <Paint_SetPixel+0xdc>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4798      	blx	r3
 800069c:	e7d3      	b.n	8000646 <Paint_SetPixel+0x4e>
        Y = Paint.HeightMemory - Y - 1;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <Paint_SetPixel+0xd4>)
 80006a0:	895b      	ldrh	r3, [r3, #10]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3b01      	subs	r3, #1
 80006a6:	1a5b      	subs	r3, r3, r1
 80006a8:	b299      	uxth	r1, r3
        break;
 80006aa:	e7ea      	b.n	8000682 <Paint_SetPixel+0x8a>
        X = Paint.WidthMemory - X - 1;
 80006ac:	4c07      	ldr	r4, [pc, #28]	@ (80006cc <Paint_SetPixel+0xd4>)
 80006ae:	8923      	ldrh	r3, [r4, #8]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3b01      	subs	r3, #1
 80006b4:	1a1b      	subs	r3, r3, r0
 80006b6:	b298      	uxth	r0, r3
        Y = Paint.HeightMemory - Y - 1;
 80006b8:	8963      	ldrh	r3, [r4, #10]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	3b01      	subs	r3, #1
 80006be:	1a5b      	subs	r3, r3, r1
 80006c0:	b299      	uxth	r1, r3
        break;
 80006c2:	e7de      	b.n	8000682 <Paint_SetPixel+0x8a>
        Debug("Exceeding display boundaries\r\n");
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <Paint_SetPixel+0xd8>)
 80006c6:	f003 fc07 	bl	8003ed8 <puts>
        return;
 80006ca:	e7bc      	b.n	8000646 <Paint_SetPixel+0x4e>
 80006cc:	20000104 	.word	0x20000104
 80006d0:	08004d94 	.word	0x08004d94
 80006d4:	20000100 	.word	0x20000100

080006d8 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/

void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground, bool gay)
{
 80006d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006dc:	b085      	sub	sp, #20
 80006de:	4684      	mov	ip, r0
 80006e0:	4699      	mov	r9, r3
 80006e2:	f8bd b038 	ldrh.w	fp, [sp, #56]	@ 0x38
 80006e6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80006ea:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
    UWORD Page, Column;
    uint32_t Char_Offset = 0;


    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80006ee:	4b59      	ldr	r3, [pc, #356]	@ (8000854 <Paint_DrawChar+0x17c>)
 80006f0:	889b      	ldrh	r3, [r3, #4]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	4563      	cmp	r3, ip
 80006f6:	d322      	bcc.n	800073e <Paint_DrawChar+0x66>
 80006f8:	468a      	mov	sl, r1
 80006fa:	4b56      	ldr	r3, [pc, #344]	@ (8000854 <Paint_DrawChar+0x17c>)
 80006fc:	88db      	ldrh	r3, [r3, #6]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	428b      	cmp	r3, r1
 8000702:	d31c      	bcc.n	800073e <Paint_DrawChar+0x66>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }
    if(!gay) {
 8000704:	bb0c      	cbnz	r4, 800074a <Paint_DrawChar+0x72>
    	Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000706:	f8b9 4004 	ldrh.w	r4, [r9, #4]
 800070a:	f014 0307 	ands.w	r3, r4, #7
 800070e:	bf18      	it	ne
 8000710:	2301      	movne	r3, #1
 8000712:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8000716:	3a20      	subs	r2, #32
 8000718:	f8b9 4006 	ldrh.w	r4, [r9, #6]
 800071c:	fb04 f202 	mul.w	r2, r4, r2
 8000720:	fb02 f303 	mul.w	r3, r2, r3
			case 55: Font = &FontBIG_7; break; // ASCII '7'
			case 56: Font = &FontBIG_8; break; // ASCII '8'
			case 57: Font = &FontBIG_9; break; // ASCII '9'
		}
    }
    const unsigned char *ptr = &Font->table[Char_Offset];
 8000724:	f8d9 6000 	ldr.w	r6, [r9]
 8000728:	441e      	add	r6, r3

    for (Page = 0; Page < Font->Height; Page++) {
 800072a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800072e:	b14b      	cbz	r3, 8000744 <Paint_DrawChar+0x6c>
 8000730:	2200      	movs	r2, #0
            if (FONT_BACKGROUND == Color_Background) {
                if (*ptr & (0x80 >> (Column % 8))) {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
                }
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8000732:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8000736:	f8cd c00c 	str.w	ip, [sp, #12]
 800073a:	9001      	str	r0, [sp, #4]
 800073c:	e07f      	b.n	800083e <Paint_DrawChar+0x166>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800073e:	4846      	ldr	r0, [pc, #280]	@ (8000858 <Paint_DrawChar+0x180>)
 8000740:	f003 fbca 	bl	8003ed8 <puts>
        // Compute bytes per row explicitly
        UWORD bytes_per_row = (Font->Width + 7) / 8;  // Ensure ceiling division for odd widths
        ptr += bytes_per_row - (Column / 8);          // Align `ptr` to the start of the next row
    }
// Write all
}
 8000744:	b005      	add	sp, #20
 8000746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (Acsii_Char) {
 800074a:	3a20      	subs	r2, #32
 800074c:	2a19      	cmp	r2, #25
 800074e:	d80e      	bhi.n	800076e <Paint_DrawChar+0x96>
 8000750:	e8df f002 	tbb	[pc, r2]
 8000754:	0d0d0d37 	.word	0x0d0d0d37
 8000758:	0d0d0d0d 	.word	0x0d0d0d0d
 800075c:	0d0d0d0d 	.word	0x0d0d0d0d
 8000760:	0d0d0d0d 	.word	0x0d0d0d0d
 8000764:	1b17130f 	.word	0x1b17130f
 8000768:	2b27231f 	.word	0x2b27231f
 800076c:	332f      	.short	0x332f
    uint32_t Char_Offset = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	e7d8      	b.n	8000724 <Paint_DrawChar+0x4c>
 8000772:	2300      	movs	r3, #0
			case 48: Font = &FontBIG_0; break; // ASCII '0'
 8000774:	f8df 90e4 	ldr.w	r9, [pc, #228]	@ 800085c <Paint_DrawChar+0x184>
 8000778:	e7d4      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 800077a:	2300      	movs	r3, #0
			case 49: Font = &FontBIG_1; break; // ASCII '1'
 800077c:	f8df 90e0 	ldr.w	r9, [pc, #224]	@ 8000860 <Paint_DrawChar+0x188>
 8000780:	e7d0      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 8000782:	2300      	movs	r3, #0
			case 50: Font = &FontBIG_2; break; // ASCII '2'
 8000784:	f8df 90dc 	ldr.w	r9, [pc, #220]	@ 8000864 <Paint_DrawChar+0x18c>
 8000788:	e7cc      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 800078a:	2300      	movs	r3, #0
			case 51: Font = &FontBIG_3; break; // ASCII '3'
 800078c:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8000868 <Paint_DrawChar+0x190>
 8000790:	e7c8      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 8000792:	2300      	movs	r3, #0
			case 52: Font = &FontBIG_4; break; // ASCII '4'
 8000794:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 800086c <Paint_DrawChar+0x194>
 8000798:	e7c4      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 800079a:	2300      	movs	r3, #0
			case 53: Font = &FontBIG_5; break; // ASCII '5'
 800079c:	f8df 90d0 	ldr.w	r9, [pc, #208]	@ 8000870 <Paint_DrawChar+0x198>
 80007a0:	e7c0      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 80007a2:	2300      	movs	r3, #0
			case 54: Font = &FontBIG_6; break; // ASCII '6'
 80007a4:	f8df 90cc 	ldr.w	r9, [pc, #204]	@ 8000874 <Paint_DrawChar+0x19c>
 80007a8:	e7bc      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 80007aa:	2300      	movs	r3, #0
			case 55: Font = &FontBIG_7; break; // ASCII '7'
 80007ac:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8000878 <Paint_DrawChar+0x1a0>
 80007b0:	e7b8      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 80007b2:	2300      	movs	r3, #0
			case 56: Font = &FontBIG_8; break; // ASCII '8'
 80007b4:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 800087c <Paint_DrawChar+0x1a4>
 80007b8:	e7b4      	b.n	8000724 <Paint_DrawChar+0x4c>
    uint32_t Char_Offset = 0;
 80007ba:	2300      	movs	r3, #0
			case 57: Font = &FontBIG_9; break; // ASCII '9'
 80007bc:	f8df 90c0 	ldr.w	r9, [pc, #192]	@ 8000880 <Paint_DrawChar+0x1a8>
 80007c0:	e7b0      	b.n	8000724 <Paint_DrawChar+0x4c>
		switch (Acsii_Char) {
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 8000884 <Paint_DrawChar+0x1ac>
 80007c8:	e7ac      	b.n	8000724 <Paint_DrawChar+0x4c>
                if (*ptr & (0x80 >> (Column % 8))) {
 80007ca:	f004 0307 	and.w	r3, r4, #7
 80007ce:	fa48 f303 	asr.w	r3, r8, r3
 80007d2:	7832      	ldrb	r2, [r6, #0]
 80007d4:	4213      	tst	r3, r2
 80007d6:	d11c      	bne.n	8000812 <Paint_DrawChar+0x13a>
            if (Column % 8 == 7) {
 80007d8:	f004 0307 	and.w	r3, r4, #7
 80007dc:	2b07      	cmp	r3, #7
                ptr++;
 80007de:	bf08      	it	eq
 80007e0:	3601      	addeq	r6, #1
        for (Column = 0; Column < Font->Width; Column++) {
 80007e2:	3401      	adds	r4, #1
 80007e4:	b2a4      	uxth	r4, r4
 80007e6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80007ea:	3501      	adds	r5, #1
 80007ec:	b2ad      	uxth	r5, r5
 80007ee:	42a3      	cmp	r3, r4
 80007f0:	d915      	bls.n	800081e <Paint_DrawChar+0x146>
            if (FONT_BACKGROUND == Color_Background) {
 80007f2:	45bb      	cmp	fp, r7
 80007f4:	d0e9      	beq.n	80007ca <Paint_DrawChar+0xf2>
                if (*ptr & (0x80 >> (Column % 8))) {
 80007f6:	f004 0307 	and.w	r3, r4, #7
 80007fa:	fa48 f303 	asr.w	r3, r8, r3
 80007fe:	7832      	ldrb	r2, [r6, #0]
 8000800:	4213      	tst	r3, r2
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000802:	bf14      	ite	ne
 8000804:	9a01      	ldrne	r2, [sp, #4]
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8000806:	465a      	moveq	r2, fp
 8000808:	4651      	mov	r1, sl
 800080a:	4628      	mov	r0, r5
 800080c:	f7ff fef4 	bl	80005f8 <Paint_SetPixel>
 8000810:	e7e2      	b.n	80007d8 <Paint_DrawChar+0x100>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8000812:	9a01      	ldr	r2, [sp, #4]
 8000814:	4651      	mov	r1, sl
 8000816:	4628      	mov	r0, r5
 8000818:	f7ff feee 	bl	80005f8 <Paint_SetPixel>
 800081c:	e7dc      	b.n	80007d8 <Paint_DrawChar+0x100>
 800081e:	9a02      	ldr	r2, [sp, #8]
        UWORD bytes_per_row = (Font->Width + 7) / 8;  // Ensure ceiling division for odd widths
 8000820:	3307      	adds	r3, #7
        ptr += bytes_per_row - (Column / 8);          // Align `ptr` to the start of the next row
 8000822:	08e4      	lsrs	r4, r4, #3
 8000824:	ebc4 04e3 	rsb	r4, r4, r3, asr #3
 8000828:	4426      	add	r6, r4
    for (Page = 0; Page < Font->Height; Page++) {
 800082a:	3201      	adds	r2, #1
 800082c:	f10a 0101 	add.w	r1, sl, #1
 8000830:	fa1f fa81 	uxth.w	sl, r1
 8000834:	f8b9 4006 	ldrh.w	r4, [r9, #6]
 8000838:	b293      	uxth	r3, r2
 800083a:	429c      	cmp	r4, r3
 800083c:	d982      	bls.n	8000744 <Paint_DrawChar+0x6c>
        for (Column = 0; Column < Font->Width; Column++) {
 800083e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8000842:	461c      	mov	r4, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d0eb      	beq.n	8000820 <Paint_DrawChar+0x148>
 8000848:	9d03      	ldr	r5, [sp, #12]
 800084a:	2400      	movs	r4, #0
            if (FONT_BACKGROUND == Color_Background) {
 800084c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8000850:	9202      	str	r2, [sp, #8]
 8000852:	e7ce      	b.n	80007f2 <Paint_DrawChar+0x11a>
 8000854:	20000104 	.word	0x20000104
 8000858:	08004dbc 	.word	0x08004dbc
 800085c:	20000058 	.word	0x20000058
 8000860:	20000050 	.word	0x20000050
 8000864:	20000048 	.word	0x20000048
 8000868:	20000040 	.word	0x20000040
 800086c:	20000038 	.word	0x20000038
 8000870:	20000030 	.word	0x20000030
 8000874:	20000028 	.word	0x20000028
 8000878:	20000020 	.word	0x20000020
 800087c:	20000018 	.word	0x20000018
 8000880:	20000010 	.word	0x20000010
 8000884:	20000008 	.word	0x20000008

08000888 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/

void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground, bool gay)
{
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800088c:	b087      	sub	sp, #28
 800088e:	4682      	mov	sl, r0
 8000890:	468b      	mov	fp, r1
 8000892:	461e      	mov	r6, r3
 8000894:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8000898:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 800089c:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80008a0:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <Paint_DrawString_EN+0xa8>)
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	4553      	cmp	r3, sl
 80008a8:	d30e      	bcc.n	80008c8 <Paint_DrawString_EN+0x40>
 80008aa:	4617      	mov	r7, r2
 80008ac:	4b20      	ldr	r3, [pc, #128]	@ (8000930 <Paint_DrawString_EN+0xa8>)
 80008ae:	88db      	ldrh	r3, [r3, #6]
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	455b      	cmp	r3, fp
 80008b4:	d308      	bcc.n	80008c8 <Paint_DrawString_EN+0x40>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 80008b6:	7812      	ldrb	r2, [r2, #0]
 80008b8:	b14a      	cbz	r2, 80008ce <Paint_DrawString_EN+0x46>
    UWORD Ypoint = Ystart;
 80008ba:	465d      	mov	r5, fp
    UWORD Xpoint = Xstart;
 80008bc:	4654      	mov	r4, sl
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80008be:	f8df 9070 	ldr.w	r9, [pc, #112]	@ 8000930 <Paint_DrawString_EN+0xa8>
 80008c2:	9104      	str	r1, [sp, #16]
 80008c4:	9005      	str	r0, [sp, #20]
 80008c6:	e009      	b.n	80008dc <Paint_DrawString_EN+0x54>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80008c8:	481a      	ldr	r0, [pc, #104]	@ (8000934 <Paint_DrawString_EN+0xac>)
 80008ca:	f003 fb05 	bl	8003ed8 <puts>
        Xpoint += Font->Width;
        if(gay) {
        	Xpoint += 4;
        }
    }
}
 80008ce:	b007      	add	sp, #28
 80008d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (* pString != '\0') {
 80008d4:	f817 2f01 	ldrb.w	r2, [r7, #1]!
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d0f8      	beq.n	80008ce <Paint_DrawString_EN+0x46>
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80008dc:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	88b1      	ldrh	r1, [r6, #4]
 80008e4:	4421      	add	r1, r4
 80008e6:	4299      	cmp	r1, r3
 80008e8:	dd03      	ble.n	80008f2 <Paint_DrawString_EN+0x6a>
            Ypoint += Font->Height;
 80008ea:	88f3      	ldrh	r3, [r6, #6]
 80008ec:	442b      	add	r3, r5
 80008ee:	b29d      	uxth	r5, r3
            Xpoint = Xstart;
 80008f0:	4654      	mov	r4, sl
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80008f2:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	88f1      	ldrh	r1, [r6, #6]
 80008fa:	4429      	add	r1, r5
            Xpoint = Xstart;
 80008fc:	4299      	cmp	r1, r3
 80008fe:	bfc8      	it	gt
 8000900:	465d      	movgt	r5, fp
 8000902:	4299      	cmp	r1, r3
 8000904:	bfc8      	it	gt
 8000906:	4654      	movgt	r4, sl
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground, gay);
 8000908:	f8cd 8008 	str.w	r8, [sp, #8]
 800090c:	9b05      	ldr	r3, [sp, #20]
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b04      	ldr	r3, [sp, #16]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	4633      	mov	r3, r6
 8000916:	4629      	mov	r1, r5
 8000918:	4620      	mov	r0, r4
 800091a:	f7ff fedd 	bl	80006d8 <Paint_DrawChar>
        Xpoint += Font->Width;
 800091e:	88b3      	ldrh	r3, [r6, #4]
 8000920:	4423      	add	r3, r4
 8000922:	b29c      	uxth	r4, r3
        if(gay) {
 8000924:	f1b8 0f00 	cmp.w	r8, #0
 8000928:	d0d4      	beq.n	80008d4 <Paint_DrawString_EN+0x4c>
        	Xpoint += 4;
 800092a:	3404      	adds	r4, #4
 800092c:	b2a4      	uxth	r4, r4
 800092e:	e7d1      	b.n	80008d4 <Paint_DrawString_EN+0x4c>
 8000930:	20000104 	.word	0x20000104
 8000934:	08004dfc 	.word	0x08004dfc

08000938 <Paint_DrawNum>:

bool WasTripleDigit;

void Paint_DrawNum(UWORD Xpoint, UWORD Ypoint, int32_t Nummber,
                   sFONT* Font, UWORD Color_Background, UWORD Color_Foreground, bool gay, bool drawingSpeed)
{
 8000938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800093c:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8000940:	4606      	mov	r6, r0
 8000942:	460f      	mov	r7, r1
 8000944:	4615      	mov	r5, r2
 8000946:	4698      	mov	r8, r3
 8000948:	f89d 9240 	ldrb.w	r9, [sp, #576]	@ 0x240
 800094c:	f89d a244 	ldrb.w	sl, [sp, #580]	@ 0x244
    int16_t Num_Bit = 0, Str_Bit = 0;
    uint8_t Str_Array[ARRAY_LEN] = {0}, Num_Array[ARRAY_LEN] = {0};
 8000950:	2400      	movs	r4, #0
 8000952:	9444      	str	r4, [sp, #272]	@ 0x110
 8000954:	f04f 0bfb 	mov.w	fp, #251	@ 0xfb
 8000958:	465a      	mov	r2, fp
 800095a:	4621      	mov	r1, r4
 800095c:	a845      	add	r0, sp, #276	@ 0x114
 800095e:	f003 fb9b 	bl	8004098 <memset>
 8000962:	9404      	str	r4, [sp, #16]
 8000964:	465a      	mov	r2, fp
 8000966:	4621      	mov	r1, r4
 8000968:	a805      	add	r0, sp, #20
 800096a:	f003 fb95 	bl	8004098 <memset>
    uint8_t *pStr = Str_Array;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <Paint_DrawNum+0x100>)
 8000970:	889b      	ldrh	r3, [r3, #4]
 8000972:	b29b      	uxth	r3, r3
 8000974:	42b3      	cmp	r3, r6
 8000976:	d310      	bcc.n	800099a <Paint_DrawNum+0x62>
 8000978:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <Paint_DrawNum+0x100>)
 800097a:	88db      	ldrh	r3, [r3, #6]
 800097c:	b29b      	uxth	r3, r3
 800097e:	42bb      	cmp	r3, r7
 8000980:	d30b      	bcc.n	800099a <Paint_DrawNum+0x62>
        return;
    }

    int32_t OriginalNumber = Nummber;

    if(gay == true && ((Nummber / 10) == 0)) {
 8000982:	f1b9 0f00 	cmp.w	r9, #0
 8000986:	d00c      	beq.n	80009a2 <Paint_DrawNum+0x6a>
 8000988:	f105 0309 	add.w	r3, r5, #9
 800098c:	2b12      	cmp	r3, #18
 800098e:	d84e      	bhi.n	8000a2e <Paint_DrawNum+0xf6>
    	Str_Array[0] = ' ';
 8000990:	2320      	movs	r3, #32
 8000992:	f88d 3110 	strb.w	r3, [sp, #272]	@ 0x110
        Str_Bit ++;
 8000996:	2201      	movs	r2, #1
 8000998:	e004      	b.n	80009a4 <Paint_DrawNum+0x6c>
        Debug("Paint_DisNum Input exceeds the normal display range\r\n");
 800099a:	4828      	ldr	r0, [pc, #160]	@ (8000a3c <Paint_DrawNum+0x104>)
 800099c:	f003 fa9c 	bl	8003ed8 <puts>
        return;
 80009a0:	e041      	b.n	8000a26 <Paint_DrawNum+0xee>
    int16_t Num_Bit = 0, Str_Bit = 0;
 80009a2:	2200      	movs	r2, #0
        Str_Bit ++;
 80009a4:	46ae      	mov	lr, r5
 80009a6:	f04f 0c00 	mov.w	ip, #0
    }
    //Converts a number to a string
     do{
        Num_Array[Num_Bit] = Nummber % 10 + '0';
 80009aa:	a804      	add	r0, sp, #16
 80009ac:	4924      	ldr	r1, [pc, #144]	@ (8000a40 <Paint_DrawNum+0x108>)
 80009ae:	fb81 430e 	smull	r4, r3, r1, lr
 80009b2:	ea4f 74ee 	mov.w	r4, lr, asr #31
 80009b6:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 80009ba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80009be:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
 80009c2:	3330      	adds	r3, #48	@ 0x30
 80009c4:	f800 300c 	strb.w	r3, [r0, ip]
        Num_Bit++;
 80009c8:	f10c 0c01 	add.w	ip, ip, #1
 80009cc:	fa1f f38c 	uxth.w	r3, ip
 80009d0:	fa0f fc8c 	sxth.w	ip, ip
        Nummber /= 10;
 80009d4:	46a6      	mov	lr, r4
    }while (Nummber);
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d1e9      	bne.n	80009ae <Paint_DrawNum+0x76>

    //The string is inverted
    while (Num_Bit > 0) {
 80009da:	f1bc 0f00 	cmp.w	ip, #0
 80009de:	dd28      	ble.n	8000a32 <Paint_DrawNum+0xfa>
 80009e0:	a904      	add	r1, sp, #16
 80009e2:	4461      	add	r1, ip
 80009e4:	4413      	add	r3, r2
 80009e6:	b21b      	sxth	r3, r3
        Str_Array[Str_Bit] = Num_Array[Num_Bit - 1];
 80009e8:	ac44      	add	r4, sp, #272	@ 0x110
 80009ea:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
 80009ee:	54a0      	strb	r0, [r4, r2]
        Str_Bit ++;
 80009f0:	3201      	adds	r2, #1
 80009f2:	b212      	sxth	r2, r2
    while (Num_Bit > 0) {
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d1f8      	bne.n	80009ea <Paint_DrawNum+0xb2>
        Num_Bit --;
    }
    
    if(drawingSpeed & (OriginalNumber / 100 == 0)) {
 80009f8:	3563      	adds	r5, #99	@ 0x63
 80009fa:	2dc6      	cmp	r5, #198	@ 0xc6
 80009fc:	d805      	bhi.n	8000a0a <Paint_DrawNum+0xd2>
 80009fe:	f1ba 0f00 	cmp.w	sl, #0
 8000a02:	d002      	beq.n	8000a0a <Paint_DrawNum+0xd2>
        	Str_Array[Str_Bit] = ' ';
 8000a04:	aa44      	add	r2, sp, #272	@ 0x110
 8000a06:	2120      	movs	r1, #32
 8000a08:	54d1      	strb	r1, [r2, r3]
    }


    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Background, Color_Foreground, gay);
 8000a0a:	f8cd 9008 	str.w	r9, [sp, #8]
 8000a0e:	f8bd 323c 	ldrh.w	r3, [sp, #572]	@ 0x23c
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	f8bd 3238 	ldrh.w	r3, [sp, #568]	@ 0x238
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	aa44      	add	r2, sp, #272	@ 0x110
 8000a1e:	4639      	mov	r1, r7
 8000a20:	4630      	mov	r0, r6
 8000a22:	f7ff ff31 	bl	8000888 <Paint_DrawString_EN>
}
 8000a26:	f50d 7d05 	add.w	sp, sp, #532	@ 0x214
 8000a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int16_t Num_Bit = 0, Str_Bit = 0;
 8000a2e:	2200      	movs	r2, #0
 8000a30:	e7b8      	b.n	80009a4 <Paint_DrawNum+0x6c>
    while (Num_Bit > 0) {
 8000a32:	4613      	mov	r3, r2
 8000a34:	e7e0      	b.n	80009f8 <Paint_DrawNum+0xc0>
 8000a36:	bf00      	nop
 8000a38:	20000104 	.word	0x20000104
 8000a3c:	08004e40 	.word	0x08004e40
 8000a40:	66666667 	.word	0x66666667

08000a44 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a48:	b085      	sub	sp, #20
 8000a4a:	f8bd 4038 	ldrh.w	r4, [sp, #56]	@ 0x38
    int i,j; 
		for(j = 0; j < H_Image; j++){
 8000a4e:	b37c      	cbz	r4, 8000ab0 <Paint_DrawImage+0x6c>
 8000a50:	4690      	mov	r8, r2
 8000a52:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8000a56:	4682      	mov	sl, r0
 8000a58:	18a2      	adds	r2, r4, r2
 8000a5a:	9201      	str	r2, [sp, #4]
 8000a5c:	18cf      	adds	r7, r1, r3
			for(i = 0; i < W_Image; i++){
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8000a5e:	4e16      	ldr	r6, [pc, #88]	@ (8000ab8 <Paint_DrawImage+0x74>)
 8000a60:	9103      	str	r1, [sp, #12]
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	e01b      	b.n	8000a9e <Paint_DrawImage+0x5a>
			for(i = 0; i < W_Image; i++){
 8000a66:	3401      	adds	r4, #1
 8000a68:	3502      	adds	r5, #2
 8000a6a:	42bc      	cmp	r4, r7
 8000a6c:	d011      	beq.n	8000a92 <Paint_DrawImage+0x4e>
				if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 8000a6e:	8933      	ldrh	r3, [r6, #8]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	ddf7      	ble.n	8000a66 <Paint_DrawImage+0x22>
 8000a76:	8973      	ldrh	r3, [r6, #10]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4543      	cmp	r3, r8
 8000a7c:	ddf3      	ble.n	8000a66 <Paint_DrawImage+0x22>
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8000a7e:	782a      	ldrb	r2, [r5, #0]
 8000a80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8000a84:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8000a88:	4649      	mov	r1, r9
 8000a8a:	b2a0      	uxth	r0, r4
 8000a8c:	f7ff fdb4 	bl	80005f8 <Paint_SetPixel>
 8000a90:	e7e9      	b.n	8000a66 <Paint_DrawImage+0x22>
		for(j = 0; j < H_Image; j++){
 8000a92:	f108 0801 	add.w	r8, r8, #1
 8000a96:	44da      	add	sl, fp
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	4598      	cmp	r8, r3
 8000a9c:	d008      	beq.n	8000ab0 <Paint_DrawImage+0x6c>
			for(i = 0; i < W_Image; i++){
 8000a9e:	9b02      	ldr	r3, [sp, #8]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f6      	beq.n	8000a92 <Paint_DrawImage+0x4e>
 8000aa4:	9c03      	ldr	r4, [sp, #12]
 8000aa6:	f10a 0501 	add.w	r5, sl, #1
					Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8000aaa:	fa1f f988 	uxth.w	r9, r8
 8000aae:	e7de      	b.n	8000a6e <Paint_DrawImage+0x2a>
				//j*W_Image*2 			   Y offset
				//i*2              	   X offset
			}
		}
      
}
 8000ab0:	b005      	add	sp, #20
 8000ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000104 	.word	0x20000104

08000abc <Display_Corner_Words>:
//==================================================================================


void Display_Corner_Words(void) {
 8000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac0:	b084      	sub	sp, #16

    UWORD xTopRight = 180; // Right side adjusted to prevent overflow
    UWORD yTopRight = 0;

    UWORD xBottomLeft = 0;
    UWORD yBottomLeft = 240 - Font->Height; // Bottom side
 8000ac2:	4f1c      	ldr	r7, [pc, #112]	@ (8000b34 <Display_Corner_Words+0x78>)
 8000ac4:	88fe      	ldrh	r6, [r7, #6]
 8000ac6:	f1c6 06f0 	rsb	r6, r6, #240	@ 0xf0
 8000aca:	b2b6      	uxth	r6, r6

    UWORD xBottomRight = 320- (Font->Width * strlen(bottom_right));
 8000acc:	88b8      	ldrh	r0, [r7, #4]
 8000ace:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8000ad2:	f5c0 75a0 	rsb	r5, r0, #320	@ 0x140
 8000ad6:	b2ad      	uxth	r5, r5
    UWORD yBottomRight = 240 - Font->Height; ;

    // Draw the words at the four corners
    //Paint_DrawString_EN(xTopLeft, yTopLeft, top_left, Font, Color_Background, Color_Foreground);
    Paint_DrawString_EN(xTopLeft, yTopLeft, top_left, Font, Color_Background, Color_Foreground, false);
 8000ad8:	2400      	movs	r4, #0
 8000ada:	9402      	str	r4, [sp, #8]
 8000adc:	f64f 78ff 	movw	r8, #65535	@ 0xffff
 8000ae0:	f8cd 8004 	str.w	r8, [sp, #4]
 8000ae4:	9400      	str	r4, [sp, #0]
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4a13      	ldr	r2, [pc, #76]	@ (8000b38 <Display_Corner_Words+0x7c>)
 8000aea:	4621      	mov	r1, r4
 8000aec:	4620      	mov	r0, r4
 8000aee:	f7ff fecb 	bl	8000888 <Paint_DrawString_EN>
    Paint_DrawString_EN(xTopRight, yTopRight, top_right, Font, Color_Background, Color_Foreground, false);
 8000af2:	9402      	str	r4, [sp, #8]
 8000af4:	f8cd 8004 	str.w	r8, [sp, #4]
 8000af8:	9400      	str	r4, [sp, #0]
 8000afa:	463b      	mov	r3, r7
 8000afc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <Display_Corner_Words+0x80>)
 8000afe:	4621      	mov	r1, r4
 8000b00:	20b4      	movs	r0, #180	@ 0xb4
 8000b02:	f7ff fec1 	bl	8000888 <Paint_DrawString_EN>
    Paint_DrawString_EN(xBottomLeft, yBottomLeft, bottom_left, Font, Color_Background, Color_Foreground, false);
 8000b06:	9402      	str	r4, [sp, #8]
 8000b08:	f8cd 8004 	str.w	r8, [sp, #4]
 8000b0c:	9400      	str	r4, [sp, #0]
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4a0b      	ldr	r2, [pc, #44]	@ (8000b40 <Display_Corner_Words+0x84>)
 8000b12:	4631      	mov	r1, r6
 8000b14:	4620      	mov	r0, r4
 8000b16:	f7ff feb7 	bl	8000888 <Paint_DrawString_EN>
    Paint_DrawString_EN(xBottomRight, yBottomRight, bottom_right, Font, Color_Background, Color_Foreground, false);
 8000b1a:	9402      	str	r4, [sp, #8]
 8000b1c:	f8cd 8004 	str.w	r8, [sp, #4]
 8000b20:	9400      	str	r4, [sp, #0]
 8000b22:	463b      	mov	r3, r7
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <Display_Corner_Words+0x88>)
 8000b26:	4631      	mov	r1, r6
 8000b28:	4628      	mov	r0, r5
 8000b2a:	f7ff fead 	bl	8000888 <Paint_DrawString_EN>
}
 8000b2e:	b004      	add	sp, #16
 8000b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	08004e80 	.word	0x08004e80
 8000b3c:	08004e88 	.word	0x08004e88
 8000b40:	08004e94 	.word	0x08004e94
 8000b44:	08004ea0 	.word	0x08004ea0

08000b48 <get_color_charge>:

UWORD get_color_charge(int value) {
    if (value > 75) {
 8000b48:	284b      	cmp	r0, #75	@ 0x4b
 8000b4a:	dc06      	bgt.n	8000b5a <get_color_charge+0x12>
        return GREEN;
    } else if (value > 35) {
        return ORANGE;
 8000b4c:	2824      	cmp	r0, #36	@ 0x24
 8000b4e:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8000b52:	bfb8      	it	lt
 8000b54:	f44f 4078 	movlt.w	r0, #63488	@ 0xf800
 8000b58:	4770      	bx	lr
        return GREEN;
 8000b5a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
    } else {
        return RED;
    }
}
 8000b5e:	4770      	bx	lr

08000b60 <get_color_temp>:

UWORD get_color_temp(int value) {
    if (value > 75) {
 8000b60:	284b      	cmp	r0, #75	@ 0x4b
 8000b62:	dc06      	bgt.n	8000b72 <get_color_temp+0x12>
        return RED;
    } else if (value > 35) {
        return ORANGE;
 8000b64:	2824      	cmp	r0, #36	@ 0x24
 8000b66:	f64f 5020 	movw	r0, #64800	@ 0xfd20
 8000b6a:	bfb8      	it	lt
 8000b6c:	f44f 60fc 	movlt.w	r0, #2016	@ 0x7e0
 8000b70:	4770      	bx	lr
        return RED;
 8000b72:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
    } else {
        return GREEN;
    }
}
 8000b76:	4770      	bx	lr

08000b78 <Display_Corner_Numbers>:

void Display_Corner_Numbers(int charge, int cell_tmp, int water_tmp) {
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	4680      	mov	r8, r0
 8000b80:	460f      	mov	r7, r1
 8000b82:	4615      	mov	r5, r2
    // Define the numbers to display below/above the words
    int top_right_num = charge;
    int bottom_left_num = cell_tmp;
    int bottom_right_num = water_tmp;

    UWORD xNumTopRight = 320 - (Font_BIG->Width*2 + 12); // Adjust right side for a 3-digit number
 8000b84:	4e1d      	ldr	r6, [pc, #116]	@ (8000bfc <Display_Corner_Numbers+0x84>)
 8000b86:	88b4      	ldrh	r4, [r6, #4]
 8000b88:	f1c4 049a 	rsb	r4, r4, #154	@ 0x9a
 8000b8c:	0064      	lsls	r4, r4, #1
 8000b8e:	b2a4      	uxth	r4, r4

    UWORD xNumBottomRight = 320 - (Font_BIG->Width*2 + 12); // Adjust right side for a 3-digit number
    UWORD yNumBottomRight = 130; // Place above the bottom right word

    // Display the 3-digit numbers below the top words and above the bottom words
    Color_Foreground = get_color_charge(charge);
 8000b90:	f7ff ffda 	bl	8000b48 <get_color_charge>
    Paint_DrawNum(xNumTopRight, yNumTopRight, top_right_num, Font_BIG, Color_Background, Color_Foreground, true, false);
 8000b94:	f04f 0900 	mov.w	r9, #0
 8000b98:	f8cd 900c 	str.w	r9, [sp, #12]
 8000b9c:	f04f 0a01 	mov.w	sl, #1
 8000ba0:	f8cd a008 	str.w	sl, [sp, #8]
 8000ba4:	9001      	str	r0, [sp, #4]
 8000ba6:	f8cd 9000 	str.w	r9, [sp]
 8000baa:	4633      	mov	r3, r6
 8000bac:	4642      	mov	r2, r8
 8000bae:	2128      	movs	r1, #40	@ 0x28
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff fec1 	bl	8000938 <Paint_DrawNum>
    Color_Foreground = get_color_temp(cell_tmp);
 8000bb6:	4638      	mov	r0, r7
 8000bb8:	f7ff ffd2 	bl	8000b60 <get_color_temp>
    Paint_DrawNum(xNumBottomLeft, yNumBottomLeft, bottom_left_num, Font_BIG, Color_Background, Color_Foreground, true, false);
 8000bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8000bc0:	f8cd a008 	str.w	sl, [sp, #8]
 8000bc4:	9001      	str	r0, [sp, #4]
 8000bc6:	f8cd 9000 	str.w	r9, [sp]
 8000bca:	4633      	mov	r3, r6
 8000bcc:	463a      	mov	r2, r7
 8000bce:	2182      	movs	r1, #130	@ 0x82
 8000bd0:	4648      	mov	r0, r9
 8000bd2:	f7ff feb1 	bl	8000938 <Paint_DrawNum>
    Color_Foreground = get_color_temp(water_tmp);
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f7ff ffc2 	bl	8000b60 <get_color_temp>
    Paint_DrawNum(xNumBottomRight, yNumBottomRight, bottom_right_num, Font_BIG, Color_Background, Color_Foreground, true, false);
 8000bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8000be0:	f8cd a008 	str.w	sl, [sp, #8]
 8000be4:	9001      	str	r0, [sp, #4]
 8000be6:	f8cd 9000 	str.w	r9, [sp]
 8000bea:	4633      	mov	r3, r6
 8000bec:	462a      	mov	r2, r5
 8000bee:	2182      	movs	r1, #130	@ 0x82
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff fea1 	bl	8000938 <Paint_DrawNum>
}
 8000bf6:	b004      	add	sp, #16
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	20000058 	.word	0x20000058

08000c00 <Display_Corner_Speed>:

void Display_Corner_Speed(int speed) {
 8000c00:	b500      	push	{lr}
 8000c02:	b085      	sub	sp, #20
 8000c04:	4602      	mov	r2, r0

    UWORD xNumTopLeft = 0;
    UWORD yNumTopLeft = (40);  // Place below the top left word

    // Display the 3-digit numbers below the top words and above the bottom words
    Paint_DrawNum(xNumTopLeft, yNumTopLeft, top_left_num, Font_BIG, Color_Background, Color_Foreground, true, true);
 8000c06:	2301      	movs	r3, #1
 8000c08:	9303      	str	r3, [sp, #12]
 8000c0a:	9302      	str	r3, [sp, #8]
 8000c0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	2000      	movs	r0, #0
 8000c14:	9000      	str	r0, [sp, #0]
 8000c16:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <Display_Corner_Speed+0x24>)
 8000c18:	2128      	movs	r1, #40	@ 0x28
 8000c1a:	f7ff fe8d 	bl	8000938 <Paint_DrawNum>
}
 8000c1e:	b005      	add	sp, #20
 8000c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c24:	20000058 	.word	0x20000058

08000c28 <UGR_LOGO>:
	Display_Corner_Words();
	DEV_Delay_ms(30000);

}

void UGR_LOGO(void){
 8000c28:	b500      	push	{lr}
 8000c2a:	b083      	sub	sp, #12
	Paint_DrawImage(ugracing_logo, 110, 70, 100, 100);
 8000c2c:	2364      	movs	r3, #100	@ 0x64
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2246      	movs	r2, #70	@ 0x46
 8000c32:	216e      	movs	r1, #110	@ 0x6e
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <UGR_LOGO+0x18>)
 8000c36:	f7ff ff05 	bl	8000a44 <Paint_DrawImage>
}
 8000c3a:	b003      	add	sp, #12
 8000c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c40:	08007464 	.word	0x08007464

08000c44 <LCD_2IN4_Reset>:
#define LCD_2IN4_BL_1   (GPIOC->BSRR = GPIO_PIN_2)


void LCD_2IN4_Reset(void)
{
	LCD_2IN4_RST_0;
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <LCD_2IN4_Reset+0x14>)
 8000c46:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8000c4a:	6199      	str	r1, [r3, #24]
	//HAL_Delay(200);
	LCD_2IN4_RST_1;
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	619a      	str	r2, [r3, #24]
	//HAL_Delay(200);
	LCD_2IN4_RST_0;
 8000c50:	6199      	str	r1, [r3, #24]
	//HAL_Delay(200);
	LCD_2IN4_RST_1;
 8000c52:	619a      	str	r2, [r3, #24]

}
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40020800 	.word	0x40020800

08000c5c <LCD_2IN4_WriteData_Byte>:
	LCD_2IN4_CS_1;
}

void LCD_2IN4_WriteData_Byte(uint8_t data)
{	
	LCD_2IN4_RST_1;
 8000c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d4c <LCD_2IN4_WriteData_Byte+0xf0>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	619a      	str	r2, [r3, #24]
	LCD_2IN4_CS_0;
 8000c62:	4a3b      	ldr	r2, [pc, #236]	@ (8000d50 <LCD_2IN4_WriteData_Byte+0xf4>)
 8000c64:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000c68:	6191      	str	r1, [r2, #24]
	LCD_2IN4_DC_1;
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000c6e:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8000c72:	bf0c      	ite	eq
 8000c74:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000c78:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000c7c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000c80:	619a      	str	r2, [r3, #24]
 8000c82:	2208      	movs	r2, #8
 8000c84:	619a      	str	r2, [r3, #24]
 8000c86:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c8a:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000c8c:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8000c90:	bf0c      	ite	eq
 8000c92:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000c96:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000c9a:	619a      	str	r2, [r3, #24]
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	619a      	str	r2, [r3, #24]
 8000ca0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ca4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ca6:	f010 0f20 	tst.w	r0, #32
 8000caa:	bf0c      	ite	eq
 8000cac:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000cb0:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000cb4:	619a      	str	r2, [r3, #24]
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	619a      	str	r2, [r3, #24]
 8000cba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cbe:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000cc0:	f010 0f10 	tst.w	r0, #16
 8000cc4:	bf0c      	ite	eq
 8000cc6:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000cca:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	619a      	str	r2, [r3, #24]
 8000cd4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cd8:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000cda:	f010 0f08 	tst.w	r0, #8
 8000cde:	bf0c      	ite	eq
 8000ce0:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000ce4:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000ce8:	619a      	str	r2, [r3, #24]
 8000cea:	2208      	movs	r2, #8
 8000cec:	619a      	str	r2, [r3, #24]
 8000cee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000cf2:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000cf4:	f010 0f04 	tst.w	r0, #4
 8000cf8:	bf0c      	ite	eq
 8000cfa:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000cfe:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000d02:	619a      	str	r2, [r3, #24]
 8000d04:	2208      	movs	r2, #8
 8000d06:	619a      	str	r2, [r3, #24]
 8000d08:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d0c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000d0e:	f010 0f02 	tst.w	r0, #2
 8000d12:	bf0c      	ite	eq
 8000d14:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000d18:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000d1c:	619a      	str	r2, [r3, #24]
 8000d1e:	2208      	movs	r2, #8
 8000d20:	619a      	str	r2, [r3, #24]
 8000d22:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d26:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000d28:	f010 0f01 	tst.w	r0, #1
 8000d2c:	bf0c      	ite	eq
 8000d2e:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8000d32:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8000d36:	619a      	str	r2, [r3, #24]
 8000d38:	2208      	movs	r2, #8
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d40:	619a      	str	r2, [r3, #24]
	SPI2_SoftwareTransmit(data);
	LCD_2IN4_CS_1;
 8000d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d46:	619a      	str	r2, [r3, #24]
}  
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020400 	.word	0x40020400

08000d54 <LCD_2IN4_Init>:
    LCD_2IN4_CS_1;
}


void LCD_2IN4_Init(void)
{
 8000d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LCD_2IN4_Reset();
 8000d58:	f7ff ff74 	bl	8000c44 <LCD_2IN4_Reset>

	LCD_2IN4_BL_1;
 8000d5c:	f8df 92d4 	ldr.w	r9, [pc, #724]	@ 8001034 <LCD_2IN4_Init+0x2e0>
 8000d60:	2304      	movs	r3, #4
 8000d62:	f8c9 3018 	str.w	r3, [r9, #24]
	LCD_2IN4_RST_1;
 8000d66:	f04f 0a01 	mov.w	sl, #1
 8000d6a:	f8c9 a018 	str.w	sl, [r9, #24]
	HAL_Delay(100);
 8000d6e:	2064      	movs	r0, #100	@ 0x64
 8000d70:	f001 fb80 	bl	8002474 <HAL_Delay>
	LCD_2IN4_RST_1;
 8000d74:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000d78:	4cad      	ldr	r4, [pc, #692]	@ (8001030 <LCD_2IN4_Init+0x2dc>)
 8000d7a:	f04f 7b00 	mov.w	fp, #33554432	@ 0x2000000
 8000d7e:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000d82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d86:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000d8a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8000d8e:	f8c4 8018 	str.w	r8, [r4, #24]
 8000d92:	2608      	movs	r6, #8
 8000d94:	61a6      	str	r6, [r4, #24]
 8000d96:	f44f 2500 	mov.w	r5, #524288	@ 0x80000
 8000d9a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000d9c:	f8c4 8018 	str.w	r8, [r4, #24]
 8000da0:	61a6      	str	r6, [r4, #24]
 8000da2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000da4:	f8c4 8018 	str.w	r8, [r4, #24]
 8000da8:	61a6      	str	r6, [r4, #24]
 8000daa:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000dac:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
 8000db0:	61a7      	str	r7, [r4, #24]
 8000db2:	61a6      	str	r6, [r4, #24]
 8000db4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000db6:	f8c4 8018 	str.w	r8, [r4, #24]
 8000dba:	61a6      	str	r6, [r4, #24]
 8000dbc:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000dbe:	f8c4 8018 	str.w	r8, [r4, #24]
 8000dc2:	61a6      	str	r6, [r4, #24]
 8000dc4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000dc6:	f8c4 8018 	str.w	r8, [r4, #24]
 8000dca:	61a6      	str	r6, [r4, #24]
 8000dcc:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000dce:	61a7      	str	r7, [r4, #24]
 8000dd0:	61a6      	str	r6, [r4, #24]
 8000dd2:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000dd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd8:	61a3      	str	r3, [r4, #24]

	//************* Start Initial Sequence **********//
	LCD_2IN4_Write_Command(0x11); //Sleep out
	HAL_Delay(120);              //Delay 120ms
 8000dda:	2078      	movs	r0, #120	@ 0x78
 8000ddc:	f001 fb4a 	bl	8002474 <HAL_Delay>
	LCD_2IN4_RST_1;
 8000de0:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000de4:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000de8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dec:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000df0:	61a7      	str	r7, [r4, #24]
 8000df2:	61a6      	str	r6, [r4, #24]
 8000df4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000df6:	61a7      	str	r7, [r4, #24]
 8000df8:	61a6      	str	r6, [r4, #24]
 8000dfa:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000dfc:	f8c4 8018 	str.w	r8, [r4, #24]
 8000e00:	61a6      	str	r6, [r4, #24]
 8000e02:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e04:	f8c4 8018 	str.w	r8, [r4, #24]
 8000e08:	61a6      	str	r6, [r4, #24]
 8000e0a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e0c:	61a7      	str	r7, [r4, #24]
 8000e0e:	61a6      	str	r6, [r4, #24]
 8000e10:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e12:	61a7      	str	r7, [r4, #24]
 8000e14:	61a6      	str	r6, [r4, #24]
 8000e16:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e18:	61a7      	str	r7, [r4, #24]
 8000e1a:	61a6      	str	r6, [r4, #24]
 8000e1c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e1e:	61a7      	str	r7, [r4, #24]
 8000e20:	61a6      	str	r6, [r4, #24]
 8000e22:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e28:	61a3      	str	r3, [r4, #24]
	//************* Start Initial Sequence **********//
	LCD_2IN4_Write_Command(0xCF);
	LCD_2IN4_WriteData_Byte(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff ff16 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0xC1);
 8000e30:	20c1      	movs	r0, #193	@ 0xc1
 8000e32:	f7ff ff13 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0X30);
 8000e36:	2030      	movs	r0, #48	@ 0x30
 8000e38:	f7ff ff10 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8000e3c:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000e40:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e48:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e4c:	61a7      	str	r7, [r4, #24]
 8000e4e:	61a6      	str	r6, [r4, #24]
 8000e50:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e52:	61a7      	str	r7, [r4, #24]
 8000e54:	61a6      	str	r6, [r4, #24]
 8000e56:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e58:	61a7      	str	r7, [r4, #24]
 8000e5a:	61a6      	str	r6, [r4, #24]
 8000e5c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e5e:	f8c4 8018 	str.w	r8, [r4, #24]
 8000e62:	61a6      	str	r6, [r4, #24]
 8000e64:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e66:	61a7      	str	r7, [r4, #24]
 8000e68:	61a6      	str	r6, [r4, #24]
 8000e6a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e6c:	61a7      	str	r7, [r4, #24]
 8000e6e:	61a6      	str	r6, [r4, #24]
 8000e70:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e72:	f8c4 8018 	str.w	r8, [r4, #24]
 8000e76:	61a6      	str	r6, [r4, #24]
 8000e78:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000e7a:	61a7      	str	r7, [r4, #24]
 8000e7c:	61a6      	str	r6, [r4, #24]
 8000e7e:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000e80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e84:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xED);
	LCD_2IN4_WriteData_Byte(0x64);
 8000e86:	2064      	movs	r0, #100	@ 0x64
 8000e88:	f7ff fee8 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x03);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f7ff fee5 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0X12);
 8000e92:	2012      	movs	r0, #18
 8000e94:	f7ff fee2 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0X81);
 8000e98:	2081      	movs	r0, #129	@ 0x81
 8000e9a:	f7ff fedf 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8000e9e:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000ea2:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000ea6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eaa:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000eae:	61a7      	str	r7, [r4, #24]
 8000eb0:	61a6      	str	r6, [r4, #24]
 8000eb2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000eb4:	61a7      	str	r7, [r4, #24]
 8000eb6:	61a6      	str	r6, [r4, #24]
 8000eb8:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000eba:	61a7      	str	r7, [r4, #24]
 8000ebc:	61a6      	str	r6, [r4, #24]
 8000ebe:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ec0:	f8c4 8018 	str.w	r8, [r4, #24]
 8000ec4:	61a6      	str	r6, [r4, #24]
 8000ec6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ec8:	61a7      	str	r7, [r4, #24]
 8000eca:	61a6      	str	r6, [r4, #24]
 8000ecc:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ece:	f8c4 8018 	str.w	r8, [r4, #24]
 8000ed2:	61a6      	str	r6, [r4, #24]
 8000ed4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ed6:	f8c4 8018 	str.w	r8, [r4, #24]
 8000eda:	61a6      	str	r6, [r4, #24]
 8000edc:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ede:	f8c4 8018 	str.w	r8, [r4, #24]
 8000ee2:	61a6      	str	r6, [r4, #24]
 8000ee4:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eea:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xE8);
	LCD_2IN4_WriteData_Byte(0x85);
 8000eec:	2085      	movs	r0, #133	@ 0x85
 8000eee:	f7ff feb5 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x00);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff feb2 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x79);
 8000ef8:	2079      	movs	r0, #121	@ 0x79
 8000efa:	f7ff feaf 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8000efe:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000f02:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000f06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f0a:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f0e:	61a7      	str	r7, [r4, #24]
 8000f10:	61a6      	str	r6, [r4, #24]
 8000f12:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f14:	61a7      	str	r7, [r4, #24]
 8000f16:	61a6      	str	r6, [r4, #24]
 8000f18:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f1a:	f8c4 8018 	str.w	r8, [r4, #24]
 8000f1e:	61a6      	str	r6, [r4, #24]
 8000f20:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f22:	f8c4 8018 	str.w	r8, [r4, #24]
 8000f26:	61a6      	str	r6, [r4, #24]
 8000f28:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f2a:	61a7      	str	r7, [r4, #24]
 8000f2c:	61a6      	str	r6, [r4, #24]
 8000f2e:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f30:	f8c4 8018 	str.w	r8, [r4, #24]
 8000f34:	61a6      	str	r6, [r4, #24]
 8000f36:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f38:	61a7      	str	r7, [r4, #24]
 8000f3a:	61a6      	str	r6, [r4, #24]
 8000f3c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f3e:	61a7      	str	r7, [r4, #24]
 8000f40:	61a6      	str	r6, [r4, #24]
 8000f42:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f48:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xCB);
	LCD_2IN4_WriteData_Byte(0x39);
 8000f4a:	2039      	movs	r0, #57	@ 0x39
 8000f4c:	f7ff fe86 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x2C);
 8000f50:	202c      	movs	r0, #44	@ 0x2c
 8000f52:	f7ff fe83 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x00);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fe80 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x34);
 8000f5c:	2034      	movs	r0, #52	@ 0x34
 8000f5e:	f7ff fe7d 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x02);
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff fe7a 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8000f68:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000f6c:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f74:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f78:	61a7      	str	r7, [r4, #24]
 8000f7a:	61a6      	str	r6, [r4, #24]
 8000f7c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f7e:	61a7      	str	r7, [r4, #24]
 8000f80:	61a6      	str	r6, [r4, #24]
 8000f82:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f84:	61a7      	str	r7, [r4, #24]
 8000f86:	61a6      	str	r6, [r4, #24]
 8000f88:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f8a:	61a7      	str	r7, [r4, #24]
 8000f8c:	61a6      	str	r6, [r4, #24]
 8000f8e:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f90:	f8c4 8018 	str.w	r8, [r4, #24]
 8000f94:	61a6      	str	r6, [r4, #24]
 8000f96:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f98:	61a7      	str	r7, [r4, #24]
 8000f9a:	61a6      	str	r6, [r4, #24]
 8000f9c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000f9e:	61a7      	str	r7, [r4, #24]
 8000fa0:	61a6      	str	r6, [r4, #24]
 8000fa2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fa4:	61a7      	str	r7, [r4, #24]
 8000fa6:	61a6      	str	r6, [r4, #24]
 8000fa8:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000faa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fae:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xF7);
	LCD_2IN4_WriteData_Byte(0x20);
 8000fb0:	2020      	movs	r0, #32
 8000fb2:	f7ff fe53 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8000fb6:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8000fba:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8000fbe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fc2:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fc6:	61a7      	str	r7, [r4, #24]
 8000fc8:	61a6      	str	r6, [r4, #24]
 8000fca:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fcc:	61a7      	str	r7, [r4, #24]
 8000fce:	61a6      	str	r6, [r4, #24]
 8000fd0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fd2:	61a7      	str	r7, [r4, #24]
 8000fd4:	61a6      	str	r6, [r4, #24]
 8000fd6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fd8:	f8c4 8018 	str.w	r8, [r4, #24]
 8000fdc:	61a6      	str	r6, [r4, #24]
 8000fde:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fe0:	61a7      	str	r7, [r4, #24]
 8000fe2:	61a6      	str	r6, [r4, #24]
 8000fe4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fe6:	f8c4 8018 	str.w	r8, [r4, #24]
 8000fea:	61a6      	str	r6, [r4, #24]
 8000fec:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000fee:	61a7      	str	r7, [r4, #24]
 8000ff0:	61a6      	str	r6, [r4, #24]
 8000ff2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8000ff4:	f8c4 8018 	str.w	r8, [r4, #24]
 8000ff8:	61a6      	str	r6, [r4, #24]
 8000ffa:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8000ffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001000:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xEA);
	LCD_2IN4_WriteData_Byte(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fe2a 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f7ff fe27 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 800100e:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001012:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8001016:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101a:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800101e:	61a7      	str	r7, [r4, #24]
 8001020:	61a6      	str	r6, [r4, #24]
 8001022:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001024:	61a7      	str	r7, [r4, #24]
 8001026:	61a6      	str	r6, [r4, #24]
 8001028:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800102a:	f8c4 8018 	str.w	r8, [r4, #24]
 800102e:	e003      	b.n	8001038 <LCD_2IN4_Init+0x2e4>
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	61a6      	str	r6, [r4, #24]
 800103a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800103c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001040:	61a6      	str	r6, [r4, #24]
 8001042:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001044:	f8c4 8018 	str.w	r8, [r4, #24]
 8001048:	61a6      	str	r6, [r4, #24]
 800104a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800104c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001050:	61a6      	str	r6, [r4, #24]
 8001052:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001054:	f8c4 8018 	str.w	r8, [r4, #24]
 8001058:	61a6      	str	r6, [r4, #24]
 800105a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800105c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001060:	61a6      	str	r6, [r4, #24]
 8001062:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8001064:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001068:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xC0); //Power control
	LCD_2IN4_WriteData_Byte(0x1D); //VRH[5:0]
 800106a:	201d      	movs	r0, #29
 800106c:	f7ff fdf6 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001070:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001074:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8001078:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800107c:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001080:	61a7      	str	r7, [r4, #24]
 8001082:	61a6      	str	r6, [r4, #24]
 8001084:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001086:	61a7      	str	r7, [r4, #24]
 8001088:	61a6      	str	r6, [r4, #24]
 800108a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800108c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001090:	61a6      	str	r6, [r4, #24]
 8001092:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001094:	f8c4 8018 	str.w	r8, [r4, #24]
 8001098:	61a6      	str	r6, [r4, #24]
 800109a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800109c:	f8c4 8018 	str.w	r8, [r4, #24]
 80010a0:	61a6      	str	r6, [r4, #24]
 80010a2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010a4:	f8c4 8018 	str.w	r8, [r4, #24]
 80010a8:	61a6      	str	r6, [r4, #24]
 80010aa:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010ac:	f8c4 8018 	str.w	r8, [r4, #24]
 80010b0:	61a6      	str	r6, [r4, #24]
 80010b2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010b4:	61a7      	str	r7, [r4, #24]
 80010b6:	61a6      	str	r6, [r4, #24]
 80010b8:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 80010ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010be:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xC1); //Power control
	LCD_2IN4_WriteData_Byte(0x12); //SAP[2:0];BT[3:0]
 80010c0:	2012      	movs	r0, #18
 80010c2:	f7ff fdcb 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 80010c6:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 80010ca:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 80010ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010d2:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010d6:	61a7      	str	r7, [r4, #24]
 80010d8:	61a6      	str	r6, [r4, #24]
 80010da:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010dc:	61a7      	str	r7, [r4, #24]
 80010de:	61a6      	str	r6, [r4, #24]
 80010e0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010e2:	f8c4 8018 	str.w	r8, [r4, #24]
 80010e6:	61a6      	str	r6, [r4, #24]
 80010e8:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010ea:	f8c4 8018 	str.w	r8, [r4, #24]
 80010ee:	61a6      	str	r6, [r4, #24]
 80010f0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010f2:	f8c4 8018 	str.w	r8, [r4, #24]
 80010f6:	61a6      	str	r6, [r4, #24]
 80010f8:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80010fa:	61a7      	str	r7, [r4, #24]
 80010fc:	61a6      	str	r6, [r4, #24]
 80010fe:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001100:	f8c4 8018 	str.w	r8, [r4, #24]
 8001104:	61a6      	str	r6, [r4, #24]
 8001106:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001108:	61a7      	str	r7, [r4, #24]
 800110a:	61a6      	str	r6, [r4, #24]
 800110c:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 800110e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001112:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xC5); //VCM control
	LCD_2IN4_WriteData_Byte(0x33);
 8001114:	2033      	movs	r0, #51	@ 0x33
 8001116:	f7ff fda1 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x3F);
 800111a:	203f      	movs	r0, #63	@ 0x3f
 800111c:	f7ff fd9e 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001120:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001124:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 8001128:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800112c:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001130:	61a7      	str	r7, [r4, #24]
 8001132:	61a6      	str	r6, [r4, #24]
 8001134:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001136:	61a7      	str	r7, [r4, #24]
 8001138:	61a6      	str	r6, [r4, #24]
 800113a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800113c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001140:	61a6      	str	r6, [r4, #24]
 8001142:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001144:	f8c4 8018 	str.w	r8, [r4, #24]
 8001148:	61a6      	str	r6, [r4, #24]
 800114a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800114c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001150:	61a6      	str	r6, [r4, #24]
 8001152:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001154:	61a7      	str	r7, [r4, #24]
 8001156:	61a6      	str	r6, [r4, #24]
 8001158:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800115a:	61a7      	str	r7, [r4, #24]
 800115c:	61a6      	str	r6, [r4, #24]
 800115e:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001160:	61a7      	str	r7, [r4, #24]
 8001162:	61a6      	str	r6, [r4, #24]
 8001164:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8001166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800116a:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_Write_Command(0xC7); //VCM control
	LCD_2IN4_WriteData_Byte(0x92);
 800116c:	2092      	movs	r0, #146	@ 0x92
 800116e:	f7ff fd75 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001172:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001176:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_DC_0;
 800117a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800117e:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001182:	f8c4 8018 	str.w	r8, [r4, #24]
 8001186:	61a6      	str	r6, [r4, #24]
 8001188:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800118a:	f8c4 8018 	str.w	r8, [r4, #24]
 800118e:	4635      	mov	r5, r6
 8001190:	61a6      	str	r6, [r4, #24]
 8001192:	f44f 2600 	mov.w	r6, #524288	@ 0x80000
 8001196:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001198:	46b8      	mov	r8, r7
 800119a:	61a7      	str	r7, [r4, #24]
 800119c:	61a5      	str	r5, [r4, #24]
 800119e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011a0:	61a7      	str	r7, [r4, #24]
 80011a2:	61a5      	str	r5, [r4, #24]
 80011a4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011a6:	61a7      	str	r7, [r4, #24]
 80011a8:	61a5      	str	r5, [r4, #24]
 80011aa:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011ac:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80011b0:	61a7      	str	r7, [r4, #24]
 80011b2:	61a5      	str	r5, [r4, #24]
 80011b4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011b6:	f8c4 8018 	str.w	r8, [r4, #24]
 80011ba:	61a5      	str	r5, [r4, #24]
 80011bc:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011be:	61a7      	str	r7, [r4, #24]
 80011c0:	61a5      	str	r5, [r4, #24]
 80011c2:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 80011c4:	f44f 7b00 	mov.w	fp, #512	@ 0x200
 80011c8:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0x3A); // Memory Access Control
	LCD_2IN4_WriteData_Byte(0x55);
 80011cc:	2055      	movs	r0, #85	@ 0x55
 80011ce:	f7ff fd45 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 80011d2:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 80011d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011da:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 80011dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011e0:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011e4:	61a7      	str	r7, [r4, #24]
 80011e6:	61a5      	str	r5, [r4, #24]
 80011e8:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011ea:	61a7      	str	r7, [r4, #24]
 80011ec:	61a5      	str	r5, [r4, #24]
 80011ee:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011f0:	f8c4 8018 	str.w	r8, [r4, #24]
 80011f4:	61a5      	str	r5, [r4, #24]
 80011f6:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80011f8:	f8c4 8018 	str.w	r8, [r4, #24]
 80011fc:	61a5      	str	r5, [r4, #24]
 80011fe:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001200:	61a7      	str	r7, [r4, #24]
 8001202:	61a5      	str	r5, [r4, #24]
 8001204:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001206:	f8c4 8018 	str.w	r8, [r4, #24]
 800120a:	61a5      	str	r5, [r4, #24]
 800120c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800120e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001212:	61a5      	str	r5, [r4, #24]
 8001214:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001216:	61a7      	str	r7, [r4, #24]
 8001218:	61a5      	str	r5, [r4, #24]
 800121a:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 800121c:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0x36); // Memory Access Control
  LCD_2IN4_WriteData_Byte(0x08);
 8001220:	4628      	mov	r0, r5
 8001222:	f7ff fd1b 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001226:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 800122a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800122e:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 8001230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001234:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001238:	f8c4 8018 	str.w	r8, [r4, #24]
 800123c:	61a5      	str	r5, [r4, #24]
 800123e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001240:	61a7      	str	r7, [r4, #24]
 8001242:	61a5      	str	r5, [r4, #24]
 8001244:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001246:	f8c4 8018 	str.w	r8, [r4, #24]
 800124a:	61a5      	str	r5, [r4, #24]
 800124c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800124e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001252:	61a5      	str	r5, [r4, #24]
 8001254:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001256:	61a7      	str	r7, [r4, #24]
 8001258:	61a5      	str	r5, [r4, #24]
 800125a:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800125c:	61a7      	str	r7, [r4, #24]
 800125e:	61a5      	str	r5, [r4, #24]
 8001260:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001262:	61a7      	str	r7, [r4, #24]
 8001264:	61a5      	str	r5, [r4, #24]
 8001266:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001268:	f8c4 8018 	str.w	r8, [r4, #24]
 800126c:	61a5      	str	r5, [r4, #24]
 800126e:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 8001270:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0xB1);
	LCD_2IN4_WriteData_Byte(0x00);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fcf1 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x12);
 800127a:	2012      	movs	r0, #18
 800127c:	f7ff fcee 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001280:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001288:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 800128a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128e:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001292:	f8c4 8018 	str.w	r8, [r4, #24]
 8001296:	61a5      	str	r5, [r4, #24]
 8001298:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800129a:	61a7      	str	r7, [r4, #24]
 800129c:	61a5      	str	r5, [r4, #24]
 800129e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012a0:	f8c4 8018 	str.w	r8, [r4, #24]
 80012a4:	61a5      	str	r5, [r4, #24]
 80012a6:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012a8:	f8c4 8018 	str.w	r8, [r4, #24]
 80012ac:	61a5      	str	r5, [r4, #24]
 80012ae:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012b0:	61a7      	str	r7, [r4, #24]
 80012b2:	61a5      	str	r5, [r4, #24]
 80012b4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012b6:	f8c4 8018 	str.w	r8, [r4, #24]
 80012ba:	61a5      	str	r5, [r4, #24]
 80012bc:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012be:	f8c4 8018 	str.w	r8, [r4, #24]
 80012c2:	61a5      	str	r5, [r4, #24]
 80012c4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012c6:	61a7      	str	r7, [r4, #24]
 80012c8:	61a5      	str	r5, [r4, #24]
 80012ca:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 80012cc:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0xB6); // Display Function Control
	LCD_2IN4_WriteData_Byte(0x0A);
 80012d0:	200a      	movs	r0, #10
 80012d2:	f7ff fcc3 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0xA2);
 80012d6:	20a2      	movs	r0, #162	@ 0xa2
 80012d8:	f7ff fcc0 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 80012dc:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 80012e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012e4:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 80012e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ea:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012ee:	61a7      	str	r7, [r4, #24]
 80012f0:	61a5      	str	r5, [r4, #24]
 80012f2:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012f4:	f8c4 8018 	str.w	r8, [r4, #24]
 80012f8:	61a5      	str	r5, [r4, #24]
 80012fa:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80012fc:	61a7      	str	r7, [r4, #24]
 80012fe:	61a5      	str	r5, [r4, #24]
 8001300:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001302:	61a7      	str	r7, [r4, #24]
 8001304:	61a5      	str	r5, [r4, #24]
 8001306:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001308:	61a7      	str	r7, [r4, #24]
 800130a:	61a5      	str	r5, [r4, #24]
 800130c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800130e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001312:	61a5      	str	r5, [r4, #24]
 8001314:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001316:	61a7      	str	r7, [r4, #24]
 8001318:	61a5      	str	r5, [r4, #24]
 800131a:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800131c:	61a7      	str	r7, [r4, #24]
 800131e:	61a5      	str	r5, [r4, #24]
 8001320:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 8001322:	f8c4 b018 	str.w	fp, [r4, #24]

	LCD_2IN4_Write_Command(0x44);
	LCD_2IN4_WriteData_Byte(0x02);
 8001326:	2002      	movs	r0, #2
 8001328:	f7ff fc98 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 800132c:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001330:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001334:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 8001336:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800133a:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800133e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001342:	61a5      	str	r5, [r4, #24]
 8001344:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001346:	f8c4 8018 	str.w	r8, [r4, #24]
 800134a:	61a5      	str	r5, [r4, #24]
 800134c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800134e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001352:	61a5      	str	r5, [r4, #24]
 8001354:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001356:	f8c4 8018 	str.w	r8, [r4, #24]
 800135a:	61a5      	str	r5, [r4, #24]
 800135c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800135e:	61a7      	str	r7, [r4, #24]
 8001360:	61a5      	str	r5, [r4, #24]
 8001362:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001364:	61a7      	str	r7, [r4, #24]
 8001366:	61a5      	str	r5, [r4, #24]
 8001368:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800136a:	f8c4 8018 	str.w	r8, [r4, #24]
 800136e:	61a5      	str	r5, [r4, #24]
 8001370:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001372:	61a7      	str	r7, [r4, #24]
 8001374:	61a5      	str	r5, [r4, #24]
 8001376:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 8001378:	f8c4 b018 	str.w	fp, [r4, #24]

	LCD_2IN4_Write_Command(0xF2); // 3Gamma Function Disable
	LCD_2IN4_WriteData_Byte(0x00);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fc6d 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001382:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001386:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800138a:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 800138c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001390:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001394:	61a7      	str	r7, [r4, #24]
 8001396:	61a5      	str	r5, [r4, #24]
 8001398:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800139a:	61a7      	str	r7, [r4, #24]
 800139c:	61a5      	str	r5, [r4, #24]
 800139e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013a0:	f8c4 8018 	str.w	r8, [r4, #24]
 80013a4:	61a5      	str	r5, [r4, #24]
 80013a6:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013a8:	61a7      	str	r7, [r4, #24]
 80013aa:	61a5      	str	r5, [r4, #24]
 80013ac:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013ae:	61a7      	str	r7, [r4, #24]
 80013b0:	61a5      	str	r5, [r4, #24]
 80013b2:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013b4:	f8c4 8018 	str.w	r8, [r4, #24]
 80013b8:	61a5      	str	r5, [r4, #24]
 80013ba:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80013c0:	61a5      	str	r5, [r4, #24]
 80013c2:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013c4:	61a7      	str	r7, [r4, #24]
 80013c6:	61a5      	str	r5, [r4, #24]
 80013c8:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 80013ca:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0x26); //Gamma curve selected
	LCD_2IN4_WriteData_Byte(0x01);
 80013ce:	4650      	mov	r0, sl
 80013d0:	f7ff fc44 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 80013d4:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 80013d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013dc:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 80013de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013e2:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013e6:	f8c4 8018 	str.w	r8, [r4, #24]
 80013ea:	61a5      	str	r5, [r4, #24]
 80013ec:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013ee:	f8c4 8018 	str.w	r8, [r4, #24]
 80013f2:	61a5      	str	r5, [r4, #24]
 80013f4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013f6:	f8c4 8018 	str.w	r8, [r4, #24]
 80013fa:	61a5      	str	r5, [r4, #24]
 80013fc:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80013fe:	61a7      	str	r7, [r4, #24]
 8001400:	61a5      	str	r5, [r4, #24]
 8001402:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001404:	61a7      	str	r7, [r4, #24]
 8001406:	61a5      	str	r5, [r4, #24]
 8001408:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800140a:	61a7      	str	r7, [r4, #24]
 800140c:	61a5      	str	r5, [r4, #24]
 800140e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001410:	61a7      	str	r7, [r4, #24]
 8001412:	61a5      	str	r5, [r4, #24]
 8001414:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001416:	61a7      	str	r7, [r4, #24]
 8001418:	61a5      	str	r5, [r4, #24]
 800141a:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 800141c:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0xE0); //Set Gamma
	LCD_2IN4_WriteData_Byte(0x0F);
 8001420:	200f      	movs	r0, #15
 8001422:	f7ff fc1b 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x22);
 8001426:	2022      	movs	r0, #34	@ 0x22
 8001428:	f7ff fc18 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x1C);
 800142c:	201c      	movs	r0, #28
 800142e:	f7ff fc15 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x1B);
 8001432:	201b      	movs	r0, #27
 8001434:	f7ff fc12 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x08);
 8001438:	4628      	mov	r0, r5
 800143a:	f7ff fc0f 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x0F);
 800143e:	200f      	movs	r0, #15
 8001440:	f7ff fc0c 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x48);
 8001444:	2048      	movs	r0, #72	@ 0x48
 8001446:	f7ff fc09 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0xB8);
 800144a:	20b8      	movs	r0, #184	@ 0xb8
 800144c:	f7ff fc06 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x34);
 8001450:	2034      	movs	r0, #52	@ 0x34
 8001452:	f7ff fc03 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x05);
 8001456:	2005      	movs	r0, #5
 8001458:	f7ff fc00 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x0C);
 800145c:	200c      	movs	r0, #12
 800145e:	f7ff fbfd 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x09);
 8001462:	2009      	movs	r0, #9
 8001464:	f7ff fbfa 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x0F);
 8001468:	200f      	movs	r0, #15
 800146a:	f7ff fbf7 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x07);
 800146e:	2007      	movs	r0, #7
 8001470:	f7ff fbf4 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x00);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff fbf1 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 800147a:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 800147e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001482:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 8001484:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001488:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800148c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001490:	61a5      	str	r5, [r4, #24]
 8001492:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001494:	f8c4 8018 	str.w	r8, [r4, #24]
 8001498:	61a5      	str	r5, [r4, #24]
 800149a:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800149c:	f8c4 8018 	str.w	r8, [r4, #24]
 80014a0:	61a5      	str	r5, [r4, #24]
 80014a2:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80014a4:	61a7      	str	r7, [r4, #24]
 80014a6:	61a5      	str	r5, [r4, #24]
 80014a8:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80014aa:	61a7      	str	r7, [r4, #24]
 80014ac:	61a5      	str	r5, [r4, #24]
 80014ae:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80014b0:	61a7      	str	r7, [r4, #24]
 80014b2:	61a5      	str	r5, [r4, #24]
 80014b4:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80014b6:	61a7      	str	r7, [r4, #24]
 80014b8:	61a5      	str	r5, [r4, #24]
 80014ba:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80014bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80014c0:	61a5      	str	r5, [r4, #24]
 80014c2:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 80014c4:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0XE1); //Set Gamma
	LCD_2IN4_WriteData_Byte(0x00);
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fbc7 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x23);
 80014ce:	2023      	movs	r0, #35	@ 0x23
 80014d0:	f7ff fbc4 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x24);
 80014d4:	2024      	movs	r0, #36	@ 0x24
 80014d6:	f7ff fbc1 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x07);
 80014da:	2007      	movs	r0, #7
 80014dc:	f7ff fbbe 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x10);
 80014e0:	2010      	movs	r0, #16
 80014e2:	f7ff fbbb 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x07);
 80014e6:	2007      	movs	r0, #7
 80014e8:	f7ff fbb8 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x38);
 80014ec:	2038      	movs	r0, #56	@ 0x38
 80014ee:	f7ff fbb5 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x47);
 80014f2:	2047      	movs	r0, #71	@ 0x47
 80014f4:	f7ff fbb2 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x4B);
 80014f8:	204b      	movs	r0, #75	@ 0x4b
 80014fa:	f7ff fbaf 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x0A);
 80014fe:	200a      	movs	r0, #10
 8001500:	f7ff fbac 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x13);
 8001504:	2013      	movs	r0, #19
 8001506:	f7ff fba9 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x06);
 800150a:	2006      	movs	r0, #6
 800150c:	f7ff fba6 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x30);
 8001510:	2030      	movs	r0, #48	@ 0x30
 8001512:	f7ff fba3 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x38);
 8001516:	2038      	movs	r0, #56	@ 0x38
 8001518:	f7ff fba0 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(0x0F);
 800151c:	200f      	movs	r0, #15
 800151e:	f7ff fb9d 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001522:	f8c9 a018 	str.w	sl, [r9, #24]
	LCD_2IN4_CS_0;
 8001526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800152a:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 800152c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001530:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001534:	61a7      	str	r7, [r4, #24]
 8001536:	61a5      	str	r5, [r4, #24]
 8001538:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800153a:	61a7      	str	r7, [r4, #24]
 800153c:	61a5      	str	r5, [r4, #24]
 800153e:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001540:	f8c4 8018 	str.w	r8, [r4, #24]
 8001544:	61a5      	str	r5, [r4, #24]
 8001546:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001548:	61a7      	str	r7, [r4, #24]
 800154a:	61a5      	str	r5, [r4, #24]
 800154c:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800154e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001552:	61a5      	str	r5, [r4, #24]
 8001554:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001556:	61a7      	str	r7, [r4, #24]
 8001558:	61a5      	str	r5, [r4, #24]
 800155a:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800155c:	61a7      	str	r7, [r4, #24]
 800155e:	61a5      	str	r5, [r4, #24]
 8001560:	61a6      	str	r6, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001562:	f8c4 8018 	str.w	r8, [r4, #24]
 8001566:	61a5      	str	r5, [r4, #24]
 8001568:	61a6      	str	r6, [r4, #24]
	LCD_2IN4_CS_1;
 800156a:	f8c4 b018 	str.w	fp, [r4, #24]
	LCD_2IN4_Write_Command(0x29); //Display on
	LCD_2IN4_RST_1;
 800156e:	f8c9 a018 	str.w	sl, [r9, #24]
}
 8001572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001576:	bf00      	nop

08001578 <LCD_2IN4_SetWindow>:
	  Ystart:	Start UWORD y coordinate
	  Xend  :	End UWORD coordinates
	  Yend  :	End UWORD coordinatesen
******************************************************************************/
void LCD_2IN4_SetWindow(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD  Yend)
{
 8001578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	b085      	sub	sp, #20
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9302      	str	r3, [sp, #8]
	LCD_2IN4_RST_1;
 8001584:	f8df 9158 	ldr.w	r9, [pc, #344]	@ 80016e0 <LCD_2IN4_SetWindow+0x168>
 8001588:	f04f 0b01 	mov.w	fp, #1
 800158c:	f8c9 b018 	str.w	fp, [r9, #24]
	LCD_2IN4_CS_0;
 8001590:	4c52      	ldr	r4, [pc, #328]	@ (80016dc <LCD_2IN4_SetWindow+0x164>)
 8001592:	f04f 7a00 	mov.w	sl, #33554432	@ 0x2000000
 8001596:	f8c4 a018 	str.w	sl, [r4, #24]
	LCD_2IN4_DC_0;
 800159a:	f44f 3500 	mov.w	r5, #131072	@ 0x20000
 800159e:	f8c9 5018 	str.w	r5, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015a2:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80015a6:	61a7      	str	r7, [r4, #24]
 80015a8:	2608      	movs	r6, #8
 80015aa:	61a6      	str	r6, [r4, #24]
 80015ac:	f44f 2500 	mov.w	r5, #524288	@ 0x80000
 80015b0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015b2:	61a7      	str	r7, [r4, #24]
 80015b4:	61a6      	str	r6, [r4, #24]
 80015b6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015b8:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
 80015bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80015c0:	61a6      	str	r6, [r4, #24]
 80015c2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015c4:	61a7      	str	r7, [r4, #24]
 80015c6:	61a6      	str	r6, [r4, #24]
 80015c8:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015ca:	f8c4 8018 	str.w	r8, [r4, #24]
 80015ce:	61a6      	str	r6, [r4, #24]
 80015d0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015d2:	61a7      	str	r7, [r4, #24]
 80015d4:	61a6      	str	r6, [r4, #24]
 80015d6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015d8:	f8c4 8018 	str.w	r8, [r4, #24]
 80015dc:	61a6      	str	r6, [r4, #24]
 80015de:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80015e0:	61a7      	str	r7, [r4, #24]
 80015e2:	61a6      	str	r6, [r4, #24]
 80015e4:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 80015e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015ea:	61a1      	str	r1, [r4, #24]
	LCD_2IN4_Write_Command(0x2a);
	LCD_2IN4_WriteData_Byte(Xstart >>8);
 80015ec:	9003      	str	r0, [sp, #12]
 80015ee:	40f0      	lsrs	r0, r6
 80015f0:	f7ff fb34 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(Xstart & 0xff);
 80015f4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80015f8:	f7ff fb30 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte((Xend - 1) >> 8);
 80015fc:	9a01      	ldr	r2, [sp, #4]
 80015fe:	1e50      	subs	r0, r2, #1
 8001600:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8001604:	f7ff fb2a 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte((Xend - 1) & 0xff);
 8001608:	9a01      	ldr	r2, [sp, #4]
 800160a:	1e50      	subs	r0, r2, #1
 800160c:	b2c0      	uxtb	r0, r0
 800160e:	f7ff fb25 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001612:	f8c9 b018 	str.w	fp, [r9, #24]
	LCD_2IN4_CS_0;
 8001616:	f8c4 a018 	str.w	sl, [r4, #24]
	LCD_2IN4_DC_0;
 800161a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800161e:	f8c9 0018 	str.w	r0, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001622:	61a7      	str	r7, [r4, #24]
 8001624:	61a6      	str	r6, [r4, #24]
 8001626:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001628:	61a7      	str	r7, [r4, #24]
 800162a:	61a6      	str	r6, [r4, #24]
 800162c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800162e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001632:	61a6      	str	r6, [r4, #24]
 8001634:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001636:	61a7      	str	r7, [r4, #24]
 8001638:	61a6      	str	r6, [r4, #24]
 800163a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800163c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001640:	61a6      	str	r6, [r4, #24]
 8001642:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001644:	61a7      	str	r7, [r4, #24]
 8001646:	61a6      	str	r6, [r4, #24]
 8001648:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800164a:	f8c4 8018 	str.w	r8, [r4, #24]
 800164e:	61a6      	str	r6, [r4, #24]
 8001650:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001652:	f8c4 8018 	str.w	r8, [r4, #24]
 8001656:	61a6      	str	r6, [r4, #24]
 8001658:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 800165a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800165e:	61a0      	str	r0, [r4, #24]

	LCD_2IN4_Write_Command(0x2b);
	LCD_2IN4_WriteData_Byte(Ystart >>8);
 8001660:	9a00      	ldr	r2, [sp, #0]
 8001662:	fa22 f006 	lsr.w	r0, r2, r6
 8001666:	f7ff faf9 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(Ystart & 0xff);
 800166a:	f89d 0000 	ldrb.w	r0, [sp]
 800166e:	f7ff faf5 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte((Yend - 1) >> 8);
 8001672:	9b02      	ldr	r3, [sp, #8]
 8001674:	1e58      	subs	r0, r3, #1
 8001676:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800167a:	f7ff faef 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte((Yend - 1) & 0xff);
 800167e:	9b02      	ldr	r3, [sp, #8]
 8001680:	1e58      	subs	r0, r3, #1
 8001682:	b2c0      	uxtb	r0, r0
 8001684:	f7ff faea 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001688:	f8c9 b018 	str.w	fp, [r9, #24]
	LCD_2IN4_CS_0;
 800168c:	f8c4 a018 	str.w	sl, [r4, #24]
	LCD_2IN4_DC_0;
 8001690:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001694:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001698:	61a7      	str	r7, [r4, #24]
 800169a:	61a6      	str	r6, [r4, #24]
 800169c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800169e:	61a7      	str	r7, [r4, #24]
 80016a0:	61a6      	str	r6, [r4, #24]
 80016a2:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016a4:	f8c4 8018 	str.w	r8, [r4, #24]
 80016a8:	61a6      	str	r6, [r4, #24]
 80016aa:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016ac:	61a7      	str	r7, [r4, #24]
 80016ae:	61a6      	str	r6, [r4, #24]
 80016b0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016b2:	f8c4 8018 	str.w	r8, [r4, #24]
 80016b6:	61a6      	str	r6, [r4, #24]
 80016b8:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016ba:	f8c4 8018 	str.w	r8, [r4, #24]
 80016be:	61a6      	str	r6, [r4, #24]
 80016c0:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016c2:	61a7      	str	r7, [r4, #24]
 80016c4:	61a6      	str	r6, [r4, #24]
 80016c6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80016c8:	61a7      	str	r7, [r4, #24]
 80016ca:	61a6      	str	r6, [r4, #24]
 80016cc:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 80016ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d2:	61a3      	str	r3, [r4, #24]

	LCD_2IN4_Write_Command(0x2C);
}
 80016d4:	b005      	add	sp, #20
 80016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40020800 	.word	0x40020800

080016e4 <LCD_2IN4_SetCursor>:
	  Xstart: 	Start UWORD x coordinate
	  Ystart:	Start UWORD y coordinate

******************************************************************************/
void LCD_2IN4_SetCursor(UWORD X, UWORD Y)
{
 80016e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e8:	b083      	sub	sp, #12
 80016ea:	4682      	mov	sl, r0
 80016ec:	9101      	str	r1, [sp, #4]
	LCD_2IN4_RST_1;
 80016ee:	f8df 9150 	ldr.w	r9, [pc, #336]	@ 8001840 <LCD_2IN4_SetCursor+0x15c>
 80016f2:	2201      	movs	r2, #1
 80016f4:	f8c9 2018 	str.w	r2, [r9, #24]
	LCD_2IN4_CS_0;
 80016f8:	4c50      	ldr	r4, [pc, #320]	@ (800183c <LCD_2IN4_SetCursor+0x158>)
 80016fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016fe:	61a2      	str	r2, [r4, #24]
	LCD_2IN4_DC_0;
 8001700:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001704:	f8c9 2018 	str.w	r2, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001708:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 800170c:	61a7      	str	r7, [r4, #24]
 800170e:	2608      	movs	r6, #8
 8001710:	61a6      	str	r6, [r4, #24]
 8001712:	f44f 2500 	mov.w	r5, #524288	@ 0x80000
 8001716:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001718:	61a7      	str	r7, [r4, #24]
 800171a:	61a6      	str	r6, [r4, #24]
 800171c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800171e:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
 8001722:	f8c4 8018 	str.w	r8, [r4, #24]
 8001726:	61a6      	str	r6, [r4, #24]
 8001728:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800172a:	61a7      	str	r7, [r4, #24]
 800172c:	61a6      	str	r6, [r4, #24]
 800172e:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001730:	f8c4 8018 	str.w	r8, [r4, #24]
 8001734:	61a6      	str	r6, [r4, #24]
 8001736:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001738:	61a7      	str	r7, [r4, #24]
 800173a:	61a6      	str	r6, [r4, #24]
 800173c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800173e:	f8c4 8018 	str.w	r8, [r4, #24]
 8001742:	61a6      	str	r6, [r4, #24]
 8001744:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001746:	61a7      	str	r7, [r4, #24]
 8001748:	61a6      	str	r6, [r4, #24]
 800174a:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 800174c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001750:	61a2      	str	r2, [r4, #24]
	LCD_2IN4_Write_Command(0x2a);
	LCD_2IN4_WriteData_Byte(X >> 8);
 8001752:	fa20 fb06 	lsr.w	fp, r0, r6
 8001756:	4658      	mov	r0, fp
 8001758:	f7ff fa80 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(X);
 800175c:	fa5f fa8a 	uxtb.w	sl, sl
 8001760:	4650      	mov	r0, sl
 8001762:	f7ff fa7b 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(X >> 8);
 8001766:	4658      	mov	r0, fp
 8001768:	f7ff fa78 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(X);
 800176c:	4650      	mov	r0, sl
 800176e:	f7ff fa75 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 8001772:	2201      	movs	r2, #1
 8001774:	f8c9 2018 	str.w	r2, [r9, #24]
	LCD_2IN4_CS_0;
 8001778:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800177c:	61a2      	str	r2, [r4, #24]
	LCD_2IN4_DC_0;
 800177e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001782:	f8c9 2018 	str.w	r2, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001786:	61a7      	str	r7, [r4, #24]
 8001788:	61a6      	str	r6, [r4, #24]
 800178a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800178c:	61a7      	str	r7, [r4, #24]
 800178e:	61a6      	str	r6, [r4, #24]
 8001790:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001792:	f8c4 8018 	str.w	r8, [r4, #24]
 8001796:	61a6      	str	r6, [r4, #24]
 8001798:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800179a:	61a7      	str	r7, [r4, #24]
 800179c:	61a6      	str	r6, [r4, #24]
 800179e:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80017a0:	f8c4 8018 	str.w	r8, [r4, #24]
 80017a4:	61a6      	str	r6, [r4, #24]
 80017a6:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80017a8:	61a7      	str	r7, [r4, #24]
 80017aa:	61a6      	str	r6, [r4, #24]
 80017ac:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80017ae:	f8c4 8018 	str.w	r8, [r4, #24]
 80017b2:	61a6      	str	r6, [r4, #24]
 80017b4:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80017b6:	f8c4 8018 	str.w	r8, [r4, #24]
 80017ba:	61a6      	str	r6, [r4, #24]
 80017bc:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 80017be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c2:	61a2      	str	r2, [r4, #24]

	LCD_2IN4_Write_Command(0x2b);
	LCD_2IN4_WriteData_Byte(Y >> 8);
 80017c4:	9b01      	ldr	r3, [sp, #4]
 80017c6:	fa23 fb06 	lsr.w	fp, r3, r6
 80017ca:	4658      	mov	r0, fp
 80017cc:	f7ff fa46 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(Y);
 80017d0:	f89d a004 	ldrb.w	sl, [sp, #4]
 80017d4:	4650      	mov	r0, sl
 80017d6:	f7ff fa41 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(Y >> 8);
 80017da:	4658      	mov	r0, fp
 80017dc:	f7ff fa3e 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_WriteData_Byte(Y);
 80017e0:	4650      	mov	r0, sl
 80017e2:	f7ff fa3b 	bl	8000c5c <LCD_2IN4_WriteData_Byte>
	LCD_2IN4_RST_1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f8c9 3018 	str.w	r3, [r9, #24]
	LCD_2IN4_CS_0;
 80017ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017f0:	61a3      	str	r3, [r4, #24]
	LCD_2IN4_DC_0;
 80017f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017f6:	f8c9 3018 	str.w	r3, [r9, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80017fa:	61a7      	str	r7, [r4, #24]
 80017fc:	61a6      	str	r6, [r4, #24]
 80017fe:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001800:	61a7      	str	r7, [r4, #24]
 8001802:	61a6      	str	r6, [r4, #24]
 8001804:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001806:	f8c4 8018 	str.w	r8, [r4, #24]
 800180a:	61a6      	str	r6, [r4, #24]
 800180c:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800180e:	61a7      	str	r7, [r4, #24]
 8001810:	61a6      	str	r6, [r4, #24]
 8001812:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001814:	f8c4 8018 	str.w	r8, [r4, #24]
 8001818:	61a6      	str	r6, [r4, #24]
 800181a:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800181c:	f8c4 8018 	str.w	r8, [r4, #24]
 8001820:	61a6      	str	r6, [r4, #24]
 8001822:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001824:	61a7      	str	r7, [r4, #24]
 8001826:	61a6      	str	r6, [r4, #24]
 8001828:	61a5      	str	r5, [r4, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800182a:	61a7      	str	r7, [r4, #24]
 800182c:	61a6      	str	r6, [r4, #24]
 800182e:	61a5      	str	r5, [r4, #24]
	LCD_2IN4_CS_1;
 8001830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001834:	61a3      	str	r3, [r4, #24]

	LCD_2IN4_Write_Command(0x2C);
}
 8001836:	b003      	add	sp, #12
 8001838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800183c:	40020400 	.word	0x40020400
 8001840:	40020800 	.word	0x40020800

08001844 <LCD_2IN4_Clear>:
function:	Clear screen function, refresh the screen to a certain color
parameter	:
	  Color :		The color you want to clear all the screen
******************************************************************************/
void LCD_2IN4_Clear(UWORD Color)
{
 8001844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001848:	b08b      	sub	sp, #44	@ 0x2c
 800184a:	4604      	mov	r4, r0
    UWORD i,j;
    LCD_2IN4_SetWindow(0, 0, LCD_2IN4_WIDTH, LCD_2IN4_HEIGHT);
 800184c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001850:	22f0      	movs	r2, #240	@ 0xf0
 8001852:	2100      	movs	r1, #0
 8001854:	4608      	mov	r0, r1
 8001856:	f7ff fe8f 	bl	8001578 <LCD_2IN4_SetWindow>

    LCD_2IN4_DC_1;
 800185a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a10 <LCD_2IN4_Clear+0x1cc>)
 800185c:	2202      	movs	r2, #2
 800185e:	619a      	str	r2, [r3, #24]
	for(i = 0; i < LCD_2IN4_WIDTH; i++){
 8001860:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001864:	bf14      	ite	ne
 8001866:	f44f 4b00 	movne.w	fp, #32768	@ 0x8000
 800186a:	f04f 4b00 	moveq.w	fp, #2147483648	@ 0x80000000
 800186e:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8001872:	bf14      	ite	ne
 8001874:	f44f 4a00 	movne.w	sl, #32768	@ 0x8000
 8001878:	f04f 4a00 	moveq.w	sl, #2147483648	@ 0x80000000
 800187c:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 8001880:	bf14      	ite	ne
 8001882:	f44f 4900 	movne.w	r9, #32768	@ 0x8000
 8001886:	f04f 4900 	moveq.w	r9, #2147483648	@ 0x80000000
 800188a:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 800188e:	bf14      	ite	ne
 8001890:	f44f 4800 	movne.w	r8, #32768	@ 0x8000
 8001894:	f04f 4800 	moveq.w	r8, #2147483648	@ 0x80000000
 8001898:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800189c:	bf14      	ite	ne
 800189e:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018a2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018a6:	9305      	str	r3, [sp, #20]
 80018a8:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 80018ac:	bf14      	ite	ne
 80018ae:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018b2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018b6:	9306      	str	r3, [sp, #24]
 80018b8:	f414 7f00 	tst.w	r4, #512	@ 0x200
 80018bc:	bf14      	ite	ne
 80018be:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018c2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018c6:	9307      	str	r3, [sp, #28]
 80018c8:	f414 7f80 	tst.w	r4, #256	@ 0x100
 80018cc:	bf14      	ite	ne
 80018ce:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018d2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018d6:	9308      	str	r3, [sp, #32]
 80018d8:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80018dc:	bf14      	ite	ne
 80018de:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018e2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	f014 0f40 	tst.w	r4, #64	@ 0x40
 80018ec:	bf14      	ite	ne
 80018ee:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 80018f2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	f014 0f20 	tst.w	r4, #32
 80018fc:	bf14      	ite	ne
 80018fe:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 8001902:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8001906:	9303      	str	r3, [sp, #12]
 8001908:	f014 0f10 	tst.w	r4, #16
 800190c:	bf14      	ite	ne
 800190e:	f44f 4300 	movne.w	r3, #32768	@ 0x8000
 8001912:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8001916:	9304      	str	r3, [sp, #16]
 8001918:	f014 0f08 	tst.w	r4, #8
 800191c:	bf14      	ite	ne
 800191e:	f44f 4600 	movne.w	r6, #32768	@ 0x8000
 8001922:	f04f 4600 	moveq.w	r6, #2147483648	@ 0x80000000
 8001926:	f014 0f04 	tst.w	r4, #4
 800192a:	bf14      	ite	ne
 800192c:	f44f 4500 	movne.w	r5, #32768	@ 0x8000
 8001930:	f04f 4500 	moveq.w	r5, #2147483648	@ 0x80000000
 8001934:	f014 0f02 	tst.w	r4, #2
 8001938:	bf14      	ite	ne
 800193a:	f44f 4e00 	movne.w	lr, #32768	@ 0x8000
 800193e:	f04f 4e00 	moveq.w	lr, #2147483648	@ 0x80000000
 8001942:	f014 0f01 	tst.w	r4, #1
 8001946:	bf14      	ite	ne
 8001948:	f44f 4700 	movne.w	r7, #32768	@ 0x8000
 800194c:	f04f 4700 	moveq.w	r7, #2147483648	@ 0x80000000
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001950:	23f0      	movs	r3, #240	@ 0xf0
 8001952:	9309      	str	r3, [sp, #36]	@ 0x24
    LCD_2IN4_CS_0;
 8001954:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <LCD_2IN4_Clear+0x1d0>)
    LCD_2IN4_DC_1;
 8001956:	f8df c0b8 	ldr.w	ip, [pc, #184]	@ 8001a10 <LCD_2IN4_Clear+0x1cc>
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800195a:	2108      	movs	r1, #8
 800195c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001960:	4638      	mov	r0, r7
 8001962:	4677      	mov	r7, lr
 8001964:	4686      	mov	lr, r0
{
 8001966:	f44f 70a0 	mov.w	r0, #320	@ 0x140
    LCD_2IN4_CS_0;
 800196a:	f04f 7400 	mov.w	r4, #33554432	@ 0x2000000
 800196e:	619c      	str	r4, [r3, #24]
    LCD_2IN4_DC_1;
 8001970:	2402      	movs	r4, #2
 8001972:	f8cc 4018 	str.w	r4, [ip, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001976:	f8c3 b018 	str.w	fp, [r3, #24]
 800197a:	6199      	str	r1, [r3, #24]
 800197c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800197e:	f8c3 a018 	str.w	sl, [r3, #24]
 8001982:	6199      	str	r1, [r3, #24]
 8001984:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001986:	f8c3 9018 	str.w	r9, [r3, #24]
 800198a:	6199      	str	r1, [r3, #24]
 800198c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800198e:	f8c3 8018 	str.w	r8, [r3, #24]
 8001992:	6199      	str	r1, [r3, #24]
 8001994:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001996:	9c05      	ldr	r4, [sp, #20]
 8001998:	619c      	str	r4, [r3, #24]
 800199a:	6199      	str	r1, [r3, #24]
 800199c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 800199e:	9c06      	ldr	r4, [sp, #24]
 80019a0:	619c      	str	r4, [r3, #24]
 80019a2:	6199      	str	r1, [r3, #24]
 80019a4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019a6:	9c07      	ldr	r4, [sp, #28]
 80019a8:	619c      	str	r4, [r3, #24]
 80019aa:	6199      	str	r1, [r3, #24]
 80019ac:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019ae:	9c08      	ldr	r4, [sp, #32]
 80019b0:	619c      	str	r4, [r3, #24]
 80019b2:	6199      	str	r1, [r3, #24]
 80019b4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019b6:	9c01      	ldr	r4, [sp, #4]
 80019b8:	619c      	str	r4, [r3, #24]
 80019ba:	6199      	str	r1, [r3, #24]
 80019bc:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019be:	9c02      	ldr	r4, [sp, #8]
 80019c0:	619c      	str	r4, [r3, #24]
 80019c2:	6199      	str	r1, [r3, #24]
 80019c4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019c6:	9c03      	ldr	r4, [sp, #12]
 80019c8:	619c      	str	r4, [r3, #24]
 80019ca:	6199      	str	r1, [r3, #24]
 80019cc:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019ce:	9c04      	ldr	r4, [sp, #16]
 80019d0:	619c      	str	r4, [r3, #24]
 80019d2:	6199      	str	r1, [r3, #24]
 80019d4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019d6:	619e      	str	r6, [r3, #24]
 80019d8:	6199      	str	r1, [r3, #24]
 80019da:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019dc:	619d      	str	r5, [r3, #24]
 80019de:	6199      	str	r1, [r3, #24]
 80019e0:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019e2:	619f      	str	r7, [r3, #24]
 80019e4:	6199      	str	r1, [r3, #24]
 80019e6:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 80019e8:	f8c3 e018 	str.w	lr, [r3, #24]
 80019ec:	6199      	str	r1, [r3, #24]
 80019ee:	619a      	str	r2, [r3, #24]
    LCD_2IN4_CS_1;
 80019f0:	f44f 7400 	mov.w	r4, #512	@ 0x200
 80019f4:	619c      	str	r4, [r3, #24]
		for(j = 0; j < LCD_2IN4_HEIGHT; j++){
 80019f6:	3801      	subs	r0, #1
 80019f8:	b280      	uxth	r0, r0
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d1b5      	bne.n	800196a <LCD_2IN4_Clear+0x126>
	for(i = 0; i < LCD_2IN4_WIDTH; i++){
 80019fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a00:	3801      	subs	r0, #1
 8001a02:	b280      	uxth	r0, r0
 8001a04:	9009      	str	r0, [sp, #36]	@ 0x24
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d1ad      	bne.n	8001966 <LCD_2IN4_Clear+0x122>
			LCD_2IN4_WriteData_Word(Color);
		}
	 }
}
 8001a0a:	b00b      	add	sp, #44	@ 0x2c
 8001a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40020400 	.word	0x40020400

08001a18 <LCD_2IN4_DrawPaint>:
	    X	: 	Set the X coordinate
	    Y	:	Set the Y coordinate
	  Color :	Set the color
******************************************************************************/
void LCD_2IN4_DrawPaint(UWORD x, UWORD y, UWORD Color)
{
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	4614      	mov	r4, r2
	LCD_2IN4_SetCursor(x, y);
 8001a1c:	f7ff fe62 	bl	80016e4 <LCD_2IN4_SetCursor>
    LCD_2IN4_CS_0;
 8001a20:	4b6e      	ldr	r3, [pc, #440]	@ (8001bdc <LCD_2IN4_DrawPaint+0x1c4>)
 8001a22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a26:	619a      	str	r2, [r3, #24]
    LCD_2IN4_DC_1;
 8001a28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001a30:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8001a34:	bf0c      	ite	eq
 8001a36:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001a3a:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001a3e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	2208      	movs	r2, #8
 8001a46:	619a      	str	r2, [r3, #24]
 8001a48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a4c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001a4e:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8001a52:	bf0c      	ite	eq
 8001a54:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001a58:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001a5c:	619a      	str	r2, [r3, #24]
 8001a5e:	2208      	movs	r2, #8
 8001a60:	619a      	str	r2, [r3, #24]
 8001a62:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a66:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001a68:	f414 5f00 	tst.w	r4, #8192	@ 0x2000
 8001a6c:	bf0c      	ite	eq
 8001a6e:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001a72:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001a76:	619a      	str	r2, [r3, #24]
 8001a78:	2208      	movs	r2, #8
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a80:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001a82:	f414 5f80 	tst.w	r4, #4096	@ 0x1000
 8001a86:	bf0c      	ite	eq
 8001a88:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001a8c:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001a90:	619a      	str	r2, [r3, #24]
 8001a92:	2208      	movs	r2, #8
 8001a94:	619a      	str	r2, [r3, #24]
 8001a96:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a9a:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001a9c:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8001aa0:	bf0c      	ite	eq
 8001aa2:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001aa6:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001aaa:	619a      	str	r2, [r3, #24]
 8001aac:	2208      	movs	r2, #8
 8001aae:	619a      	str	r2, [r3, #24]
 8001ab0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ab4:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001ab6:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8001aba:	bf0c      	ite	eq
 8001abc:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001ac0:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001ac4:	619a      	str	r2, [r3, #24]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	619a      	str	r2, [r3, #24]
 8001aca:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ace:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001ad0:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8001ad4:	bf0c      	ite	eq
 8001ad6:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001ada:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001ade:	619a      	str	r2, [r3, #24]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	619a      	str	r2, [r3, #24]
 8001ae4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ae8:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001aea:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8001aee:	bf0c      	ite	eq
 8001af0:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001af4:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001af8:	619a      	str	r2, [r3, #24]
 8001afa:	2208      	movs	r2, #8
 8001afc:	619a      	str	r2, [r3, #24]
 8001afe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b02:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x80) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b04:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8001b08:	bf0c      	ite	eq
 8001b0a:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b0e:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b12:	619a      	str	r2, [r3, #24]
 8001b14:	2208      	movs	r2, #8
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b1c:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x40) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b1e:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8001b22:	bf0c      	ite	eq
 8001b24:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b28:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b2c:	619a      	str	r2, [r3, #24]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	619a      	str	r2, [r3, #24]
 8001b32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b36:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x20) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b38:	f014 0f20 	tst.w	r4, #32
 8001b3c:	bf0c      	ite	eq
 8001b3e:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b42:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b46:	619a      	str	r2, [r3, #24]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	619a      	str	r2, [r3, #24]
 8001b4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b50:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x10) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b52:	f014 0f10 	tst.w	r4, #16
 8001b56:	bf0c      	ite	eq
 8001b58:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b5c:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	2208      	movs	r2, #8
 8001b64:	619a      	str	r2, [r3, #24]
 8001b66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b6a:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x08) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b6c:	f014 0f08 	tst.w	r4, #8
 8001b70:	bf0c      	ite	eq
 8001b72:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b76:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b7a:	619a      	str	r2, [r3, #24]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	619a      	str	r2, [r3, #24]
 8001b80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b84:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x04) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001b86:	f014 0f04 	tst.w	r4, #4
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001b90:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	2208      	movs	r2, #8
 8001b98:	619a      	str	r2, [r3, #24]
 8001b9a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001b9e:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x02) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001ba0:	f014 0f02 	tst.w	r4, #2
 8001ba4:	bf0c      	ite	eq
 8001ba6:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001baa:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001bae:	619a      	str	r2, [r3, #24]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bb8:	619a      	str	r2, [r3, #24]
    GPIOB->BSRR = (data & 0x01) ? bsrr_mosi_high : bsrr_mosi_low; GPIOB->BSRR = bsrr_sck_high; GPIOB->BSRR = bsrr_sck_low;
 8001bba:	f014 0f01 	tst.w	r4, #1
 8001bbe:	bf0c      	ite	eq
 8001bc0:	f04f 4200 	moveq.w	r2, #2147483648	@ 0x80000000
 8001bc4:	f44f 4200 	movne.w	r2, #32768	@ 0x8000
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	2208      	movs	r2, #8
 8001bcc:	619a      	str	r2, [r3, #24]
 8001bce:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bd2:	619a      	str	r2, [r3, #24]
    LCD_2IN4_CS_1;
 8001bd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd8:	619a      	str	r2, [r3, #24]
	LCD_2IN4_WriteData_Word(Color);
}
 8001bda:	bd10      	pop	{r4, pc}
 8001bdc:	40020400 	.word	0x40020400

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b570      	push	{r4, r5, r6, lr}
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  speed      = 0;
 8001be4:	2000      	movs	r0, #0
 8001be6:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <Error_Handler+0x28>)
 8001be8:	6018      	str	r0, [r3, #0]
  charge     = 0;
 8001bea:	4c08      	ldr	r4, [pc, #32]	@ (8001c0c <Error_Handler+0x2c>)
 8001bec:	6020      	str	r0, [r4, #0]
  water_tmp  = 0;
 8001bee:	4e08      	ldr	r6, [pc, #32]	@ (8001c10 <Error_Handler+0x30>)
 8001bf0:	6030      	str	r0, [r6, #0]
  cell_tmp   = 0;
 8001bf2:	4d08      	ldr	r5, [pc, #32]	@ (8001c14 <Error_Handler+0x34>)
 8001bf4:	6028      	str	r0, [r5, #0]
  Display_Corner_Speed(speed);
 8001bf6:	f7ff f803 	bl	8000c00 <Display_Corner_Speed>
  Display_Corner_Numbers(charge, cell_tmp, water_tmp);
 8001bfa:	6832      	ldr	r2, [r6, #0]
 8001bfc:	6829      	ldr	r1, [r5, #0]
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	f7fe ffba 	bl	8000b78 <Display_Corner_Numbers>
  /* USER CODE END Error_Handler_Debug */
}
 8001c04:	bd70      	pop	{r4, r5, r6, pc}
 8001c06:	bf00      	nop
 8001c08:	20000068 	.word	0x20000068
 8001c0c:	20000074 	.word	0x20000074
 8001c10:	2000006c 	.word	0x2000006c
 8001c14:	20000070 	.word	0x20000070

08001c18 <Send_CAN_Message>:
{
 8001c18:	b508      	push	{r3, lr}
    TxHeader.StdId = 0x001;          // Standard ID
 8001c1a:	4909      	ldr	r1, [pc, #36]	@ (8001c40 <Send_CAN_Message+0x28>)
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	600b      	str	r3, [r1, #0]
    TxHeader.IDE   = CAN_ID_STD;     // Standard Identifier
 8001c20:	2300      	movs	r3, #0
 8001c22:	608b      	str	r3, [r1, #8]
    TxHeader.RTR   = CAN_RTR_DATA;   // Data frame
 8001c24:	60cb      	str	r3, [r1, #12]
    TxHeader.DLC   = 8;              // Data length (8 bytes)
 8001c26:	2208      	movs	r2, #8
 8001c28:	610a      	str	r2, [r1, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8001c2a:	750b      	strb	r3, [r1, #20]
    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <Send_CAN_Message+0x2c>)
 8001c2e:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <Send_CAN_Message+0x30>)
 8001c30:	f000 fd8e 	bl	8002750 <HAL_CAN_AddTxMessage>
 8001c34:	b900      	cbnz	r0, 8001c38 <Send_CAN_Message+0x20>
}
 8001c36:	bd08      	pop	{r3, pc}
        Error_Handler();
 8001c38:	f7ff ffd2 	bl	8001be0 <Error_Handler>
}
 8001c3c:	e7fb      	b.n	8001c36 <Send_CAN_Message+0x1e>
 8001c3e:	bf00      	nop
 8001c40:	20000120 	.word	0x20000120
 8001c44:	2000011c 	.word	0x2000011c
 8001c48:	20000060 	.word	0x20000060

08001c4c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001c52:	2100      	movs	r1, #0
 8001c54:	f000 fdf3 	bl	800283e <HAL_CAN_GetRxMessage>
 8001c58:	b9a0      	cbnz	r0, 8001c84 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    speed     = RxData[0];
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001c5c:	7818      	ldrb	r0, [r3, #0]
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001c60:	6010      	str	r0, [r2, #0]
    charge    = RxData[1];
 8001c62:	4c0d      	ldr	r4, [pc, #52]	@ (8001c98 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001c64:	785a      	ldrb	r2, [r3, #1]
 8001c66:	6022      	str	r2, [r4, #0]
    water_tmp = RxData[2];
 8001c68:	4e0c      	ldr	r6, [pc, #48]	@ (8001c9c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001c6a:	789a      	ldrb	r2, [r3, #2]
 8001c6c:	6032      	str	r2, [r6, #0]
    cell_tmp  = RxData[3];
 8001c6e:	4d0c      	ldr	r5, [pc, #48]	@ (8001ca0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001c70:	78db      	ldrb	r3, [r3, #3]
 8001c72:	602b      	str	r3, [r5, #0]
    Display_Corner_Speed(speed);
 8001c74:	f7fe ffc4 	bl	8000c00 <Display_Corner_Speed>
    Display_Corner_Numbers(charge, cell_tmp, water_tmp);
 8001c78:	6832      	ldr	r2, [r6, #0]
 8001c7a:	6829      	ldr	r1, [r5, #0]
 8001c7c:	6820      	ldr	r0, [r4, #0]
 8001c7e:	f7fe ff7b 	bl	8000b78 <Display_Corner_Numbers>
}
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
        Error_Handler();
 8001c84:	f7ff ffac 	bl	8001be0 <Error_Handler>
 8001c88:	e7e7      	b.n	8001c5a <HAL_CAN_RxFifo0MsgPendingCallback+0xe>
 8001c8a:	bf00      	nop
 8001c8c:	20000138 	.word	0x20000138
 8001c90:	20000140 	.word	0x20000140
 8001c94:	20000068 	.word	0x20000068
 8001c98:	20000074 	.word	0x20000074
 8001c9c:	2000006c 	.word	0x2000006c
 8001ca0:	20000070 	.word	0x20000070

08001ca4 <SystemClock_Config>:
{
 8001ca4:	b500      	push	{lr}
 8001ca6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca8:	2230      	movs	r2, #48	@ 0x30
 8001caa:	2100      	movs	r1, #0
 8001cac:	a808      	add	r0, sp, #32
 8001cae:	f002 f9f3 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9303      	str	r3, [sp, #12]
 8001cb6:	9304      	str	r3, [sp, #16]
 8001cb8:	9305      	str	r3, [sp, #20]
 8001cba:	9306      	str	r3, [sp, #24]
 8001cbc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	@ (8001d44 <SystemClock_Config+0xa0>)
 8001cc2:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001cc4:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001cc8:	6411      	str	r1, [r2, #64]	@ 0x40
 8001cca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ccc:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8001cd0:	9201      	str	r2, [sp, #4]
 8001cd2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <SystemClock_Config+0xa4>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001cea:	2303      	movs	r3, #3
 8001cec:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf2:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf8:	2310      	movs	r3, #16
 8001cfa:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d00:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d04:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001d06:	220f      	movs	r2, #15
 8001d08:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001d0a:	2290      	movs	r2, #144	@ 0x90
 8001d0c:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0e:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d10:	2305      	movs	r3, #5
 8001d12:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	a808      	add	r0, sp, #32
 8001d16:	f001 f95d 	bl	8002fd4 <HAL_RCC_OscConfig>
 8001d1a:	b968      	cbnz	r0, 8001d38 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d20:	2100      	movs	r1, #0
 8001d22:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d24:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d26:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d28:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d2a:	a803      	add	r0, sp, #12
 8001d2c:	f001 fba2 	bl	8003474 <HAL_RCC_ClockConfig>
 8001d30:	b928      	cbnz	r0, 8001d3e <SystemClock_Config+0x9a>
}
 8001d32:	b015      	add	sp, #84	@ 0x54
 8001d34:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d38:	f7ff ff52 	bl	8001be0 <Error_Handler>
 8001d3c:	e7ee      	b.n	8001d1c <SystemClock_Config+0x78>
    Error_Handler();
 8001d3e:	f7ff ff4f 	bl	8001be0 <Error_Handler>
}
 8001d42:	e7f6      	b.n	8001d32 <SystemClock_Config+0x8e>
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000

08001d4c <main>:
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b092      	sub	sp, #72	@ 0x48
  HAL_Init();
 8001d50:	f000 fb64 	bl	800241c <HAL_Init>
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4aa4      	ldr	r2, [pc, #656]	@ (8001fe8 <main+0x29c>)
 8001d56:	6813      	ldr	r3, [r2, #0]
 8001d58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d5c:	6013      	str	r3, [r2, #0]
  SystemClock_Config();
 8001d5e:	f7ff ffa1 	bl	8001ca4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	2400      	movs	r4, #0
 8001d64:	9408      	str	r4, [sp, #32]
 8001d66:	9409      	str	r4, [sp, #36]	@ 0x24
 8001d68:	940a      	str	r4, [sp, #40]	@ 0x28
 8001d6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001d6c:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	9402      	str	r4, [sp, #8]
 8001d70:	4b9e      	ldr	r3, [pc, #632]	@ (8001fec <main+0x2a0>)
 8001d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d78:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d7c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	9403      	str	r4, [sp, #12]
 8001d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d88:	f042 0204 	orr.w	r2, r2, #4
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d90:	f002 0204 	and.w	r2, r2, #4
 8001d94:	9203      	str	r2, [sp, #12]
 8001d96:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d98:	9404      	str	r4, [sp, #16]
 8001d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d9c:	f042 0202 	orr.w	r2, r2, #2
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001da2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001da4:	f002 0202 	and.w	r2, r2, #2
 8001da8:	9204      	str	r2, [sp, #16]
 8001daa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	9405      	str	r4, [sp, #20]
 8001dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	9305      	str	r3, [sp, #20]
 8001dbe:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001dc0:	4f8b      	ldr	r7, [pc, #556]	@ (8001ff0 <main+0x2a4>)
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	2107      	movs	r1, #7
 8001dc6:	4638      	mov	r0, r7
 8001dc8:	f001 f8b8 	bl	8002f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_RESET);
 8001dcc:	4e89      	ldr	r6, [pc, #548]	@ (8001ff4 <main+0x2a8>)
 8001dce:	4622      	mov	r2, r4
 8001dd0:	f248 2108 	movw	r1, #33288	@ 0x8208
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f001 f8b1 	bl	8002f3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001dda:	2307      	movs	r3, #7
 8001ddc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dde:	2501      	movs	r5, #1
 8001de0:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de6:	a908      	add	r1, sp, #32
 8001de8:	4638      	mov	r0, r7
 8001dea:	f000 ffab 	bl	8002d44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_9;
 8001dee:	f248 2308 	movw	r3, #33288	@ 0x8208
 8001df2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	9509      	str	r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfa:	a908      	add	r1, sp, #32
 8001dfc:	4630      	mov	r0, r6
 8001dfe:	f000 ffa1 	bl	8002d44 <HAL_GPIO_Init>
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e02:	487d      	ldr	r0, [pc, #500]	@ (8001ff8 <main+0x2ac>)
 8001e04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e08:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	7143      	strb	r3, [r0, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8001e0e:	71c5      	strb	r5, [r0, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e10:	7184      	strb	r4, [r0, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8001e12:	2302      	movs	r3, #2
 8001e14:	7243      	strb	r3, [r0, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001e16:	7284      	strb	r4, [r0, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001e18:	f001 f896 	bl	8002f48 <HAL_HCD_Init>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	f040 80bc 	bne.w	8001f9a <main+0x24e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	2300      	movs	r3, #0
 8001e24:	9308      	str	r3, [sp, #32]
 8001e26:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e2a:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	9306      	str	r3, [sp, #24]
 8001e2e:	9307      	str	r3, [sp, #28]
  htim1.Instance = TIM1;
 8001e30:	4872      	ldr	r0, [pc, #456]	@ (8001ffc <main+0x2b0>)
 8001e32:	4a73      	ldr	r2, [pc, #460]	@ (8002000 <main+0x2b4>)
 8001e34:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001e36:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8001e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e3e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e42:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e44:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e46:	f001 fc55 	bl	80036f4 <HAL_TIM_Base_Init>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	f040 80a8 	bne.w	8001fa0 <main+0x254>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e54:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e56:	a908      	add	r1, sp, #32
 8001e58:	4868      	ldr	r0, [pc, #416]	@ (8001ffc <main+0x2b0>)
 8001e5a:	f001 fc84 	bl	8003766 <HAL_TIM_ConfigClockSource>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f040 80a1 	bne.w	8001fa6 <main+0x25a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e68:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e6a:	a906      	add	r1, sp, #24
 8001e6c:	4863      	ldr	r0, [pc, #396]	@ (8001ffc <main+0x2b0>)
 8001e6e:	f001 fd2f 	bl	80038d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	2800      	cmp	r0, #0
 8001e74:	f040 809a 	bne.w	8001fac <main+0x260>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9308      	str	r3, [sp, #32]
 8001e7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001e80:	930b      	str	r3, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e82:	9306      	str	r3, [sp, #24]
 8001e84:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001e86:	485f      	ldr	r0, [pc, #380]	@ (8002004 <main+0x2b8>)
 8001e88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e8c:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 8001e8e:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e90:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295
 8001e96:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e98:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e9c:	f001 fc2a 	bl	80036f4 <HAL_TIM_Base_Init>
 8001ea0:	2800      	cmp	r0, #0
 8001ea2:	f040 8086 	bne.w	8001fb2 <main+0x266>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eaa:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eac:	a908      	add	r1, sp, #32
 8001eae:	4855      	ldr	r0, [pc, #340]	@ (8002004 <main+0x2b8>)
 8001eb0:	f001 fc59 	bl	8003766 <HAL_TIM_ConfigClockSource>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d17f      	bne.n	8001fb8 <main+0x26c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ebe:	a906      	add	r1, sp, #24
 8001ec0:	4850      	ldr	r0, [pc, #320]	@ (8002004 <main+0x2b8>)
 8001ec2:	f001 fd05 	bl	80038d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d179      	bne.n	8001fbe <main+0x272>
  hcan2.Instance = CAN2;
 8001eca:	484f      	ldr	r0, [pc, #316]	@ (8002008 <main+0x2bc>)
 8001ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800200c <main+0x2c0>)
 8001ece:	6003      	str	r3, [r0, #0]
  hcan2.Init.Prescaler = 2;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	6043      	str	r3, [r0, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 8001ed4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ed8:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001eda:	2300      	movs	r3, #0
 8001edc:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001ede:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001ee2:	6102      	str	r2, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ee4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ee8:	6142      	str	r2, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001eea:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001eec:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001eee:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	76c2      	strb	r2, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ef4:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ef6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ef8:	f000 fad0 	bl	800249c <HAL_CAN_Init>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	d161      	bne.n	8001fc4 <main+0x278>
  sFilterConfig.FilterBank = 0;  // Use the first bank for simplicity
 8001f00:	2300      	movs	r3, #0
 8001f02:	930d      	str	r3, [sp, #52]	@ 0x34
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f04:	930e      	str	r3, [sp, #56]	@ 0x38
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f06:	2201      	movs	r2, #1
 8001f08:	920f      	str	r2, [sp, #60]	@ 0x3c
  sFilterConfig.FilterIdHigh = 0x0000;
 8001f0a:	9308      	str	r3, [sp, #32]
  sFilterConfig.FilterIdLow = 0x0000;
 8001f0c:	9309      	str	r3, [sp, #36]	@ 0x24
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001f0e:	930a      	str	r3, [sp, #40]	@ 0x28
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001f10:	930b      	str	r3, [sp, #44]	@ 0x2c
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f12:	930c      	str	r3, [sp, #48]	@ 0x30
  sFilterConfig.FilterActivation = ENABLE;
 8001f14:	9210      	str	r2, [sp, #64]	@ 0x40
  sFilterConfig.SlaveStartFilterBank = 14;  // (if using CAN2 with a shared filter bank)
 8001f16:	230e      	movs	r3, #14
 8001f18:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001f1a:	a908      	add	r1, sp, #32
 8001f1c:	483a      	ldr	r0, [pc, #232]	@ (8002008 <main+0x2bc>)
 8001f1e:	f000 fb4d 	bl	80025bc <HAL_CAN_ConfigFilter>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d151      	bne.n	8001fca <main+0x27e>
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001f26:	2102      	movs	r1, #2
 8001f28:	4837      	ldr	r0, [pc, #220]	@ (8002008 <main+0x2bc>)
 8001f2a:	f000 fd47 	bl	80029bc <HAL_CAN_ActivateNotification>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d14e      	bne.n	8001fd0 <main+0x284>
  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8001f32:	4835      	ldr	r0, [pc, #212]	@ (8002008 <main+0x2bc>)
 8001f34:	f000 fbde 	bl	80026f4 <HAL_CAN_Start>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	d14f      	bne.n	8001fdc <main+0x290>
  LCD_2IN4_Init();
 8001f3c:	f7fe ff0a 	bl	8000d54 <LCD_2IN4_Init>
  LCD_2IN4_Clear(BLACK);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff fc7f 	bl	8001844 <LCD_2IN4_Clear>
    Paint_NewImage(LCD_2IN4_WIDTH,LCD_2IN4_HEIGHT, ROTATE_90, BLACK);
 8001f46:	2300      	movs	r3, #0
 8001f48:	225a      	movs	r2, #90	@ 0x5a
 8001f4a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8001f4e:	20f0      	movs	r0, #240	@ 0xf0
 8001f50:	f7fe fb06 	bl	8000560 <Paint_NewImage>
    Paint_SetClearFuntion(LCD_2IN4_Clear);
 8001f54:	482e      	ldr	r0, [pc, #184]	@ (8002010 <main+0x2c4>)
 8001f56:	f7fe fb27 	bl	80005a8 <Paint_SetClearFuntion>
    Paint_SetDisplayFuntion(LCD_2IN4_DrawPaint);
 8001f5a:	482e      	ldr	r0, [pc, #184]	@ (8002014 <main+0x2c8>)
 8001f5c:	f7fe fb2a 	bl	80005b4 <Paint_SetDisplayFuntion>
    Paint_SetRotate(ROTATE_90);
 8001f60:	205a      	movs	r0, #90	@ 0x5a
 8001f62:	f7fe fb2d 	bl	80005c0 <Paint_SetRotate>
    UGR_LOGO();
 8001f66:	f7fe fe5f 	bl	8000c28 <UGR_LOGO>
    Display_Corner_Words();
 8001f6a:	f7fe fda7 	bl	8000abc <Display_Corner_Words>
    srand(time(0));
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f002 f89a 	bl	80040a8 <time>
 8001f74:	f001 fe58 	bl	8003c28 <srand>
    Display_Corner_Speed(speed);
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <main+0x2cc>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f7fe fe40 	bl	8000c00 <Display_Corner_Speed>
    Display_Corner_Numbers(charge, cell_tmp, water_tmp);
 8001f80:	4b26      	ldr	r3, [pc, #152]	@ (800201c <main+0x2d0>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <main+0x2d4>)
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <main+0x2d8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f7fe fdf4 	bl	8000b78 <Display_Corner_Numbers>
	  HAL_CAN_GetState(&hcan2);
 8001f90:	4c1d      	ldr	r4, [pc, #116]	@ (8002008 <main+0x2bc>)
	              if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001f92:	4d25      	ldr	r5, [pc, #148]	@ (8002028 <main+0x2dc>)
 8001f94:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8002034 <main+0x2e8>
 8001f98:	e052      	b.n	8002040 <main+0x2f4>
    Error_Handler();
 8001f9a:	f7ff fe21 	bl	8001be0 <Error_Handler>
 8001f9e:	e740      	b.n	8001e22 <main+0xd6>
    Error_Handler();
 8001fa0:	f7ff fe1e 	bl	8001be0 <Error_Handler>
 8001fa4:	e754      	b.n	8001e50 <main+0x104>
    Error_Handler();
 8001fa6:	f7ff fe1b 	bl	8001be0 <Error_Handler>
 8001faa:	e75b      	b.n	8001e64 <main+0x118>
    Error_Handler();
 8001fac:	f7ff fe18 	bl	8001be0 <Error_Handler>
 8001fb0:	e762      	b.n	8001e78 <main+0x12c>
    Error_Handler();
 8001fb2:	f7ff fe15 	bl	8001be0 <Error_Handler>
 8001fb6:	e776      	b.n	8001ea6 <main+0x15a>
    Error_Handler();
 8001fb8:	f7ff fe12 	bl	8001be0 <Error_Handler>
 8001fbc:	e77c      	b.n	8001eb8 <main+0x16c>
    Error_Handler();
 8001fbe:	f7ff fe0f 	bl	8001be0 <Error_Handler>
 8001fc2:	e782      	b.n	8001eca <main+0x17e>
    Error_Handler();
 8001fc4:	f7ff fe0c 	bl	8001be0 <Error_Handler>
 8001fc8:	e79a      	b.n	8001f00 <main+0x1b4>
      Error_Handler();
 8001fca:	f7ff fe09 	bl	8001be0 <Error_Handler>
 8001fce:	e7aa      	b.n	8001f26 <main+0x1da>
      printf("CAN Notification Activation Failed\n");
 8001fd0:	4816      	ldr	r0, [pc, #88]	@ (800202c <main+0x2e0>)
 8001fd2:	f001 ff81 	bl	8003ed8 <puts>
      Error_Handler();
 8001fd6:	f7ff fe03 	bl	8001be0 <Error_Handler>
 8001fda:	e7aa      	b.n	8001f32 <main+0x1e6>
      printf("CAN Start Failed\n");
 8001fdc:	4814      	ldr	r0, [pc, #80]	@ (8002030 <main+0x2e4>)
 8001fde:	f001 ff7b 	bl	8003ed8 <puts>
      Error_Handler();
 8001fe2:	f7ff fdfd 	bl	8001be0 <Error_Handler>
 8001fe6:	e7a9      	b.n	8001f3c <main+0x1f0>
 8001fe8:	40023c00 	.word	0x40023c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020800 	.word	0x40020800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	2000015c 	.word	0x2000015c
 8001ffc:	20000584 	.word	0x20000584
 8002000:	40010000 	.word	0x40010000
 8002004:	2000053c 	.word	0x2000053c
 8002008:	200005cc 	.word	0x200005cc
 800200c:	40006800 	.word	0x40006800
 8002010:	08001845 	.word	0x08001845
 8002014:	08001a19 	.word	0x08001a19
 8002018:	20000068 	.word	0x20000068
 800201c:	2000006c 	.word	0x2000006c
 8002020:	20000070 	.word	0x20000070
 8002024:	20000074 	.word	0x20000074
 8002028:	20000138 	.word	0x20000138
 800202c:	0800c284 	.word	0x0800c284
 8002030:	0800c2a8 	.word	0x0800c2a8
 8002034:	20000140 	.word	0x20000140
	  DEV_Delay_ms(1500);
 8002038:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800203c:	f000 fa1a 	bl	8002474 <HAL_Delay>
	  HAL_CAN_GetState(&hcan2);
 8002040:	4620      	mov	r0, r4
 8002042:	f000 fdff 	bl	8002c44 <HAL_CAN_GetState>
	  Send_CAN_Message(&hcan2);
 8002046:	4620      	mov	r0, r4
 8002048:	f7ff fde6 	bl	8001c18 <Send_CAN_Message>
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan2, CAN_RX_FIFO0) > 0)
 800204c:	2100      	movs	r1, #0
 800204e:	4620      	mov	r0, r4
 8002050:	f000 fca1 	bl	8002996 <HAL_CAN_GetRxFifoFillLevel>
 8002054:	2800      	cmp	r0, #0
 8002056:	d0ef      	beq.n	8002038 <main+0x2ec>
	              if (HAL_CAN_GetRxMessage(&hcan2, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8002058:	462b      	mov	r3, r5
 800205a:	464a      	mov	r2, r9
 800205c:	2100      	movs	r1, #0
 800205e:	4620      	mov	r0, r4
 8002060:	f000 fbed 	bl	800283e <HAL_CAN_GetRxMessage>
 8002064:	2800      	cmp	r0, #0
 8002066:	d1e7      	bne.n	8002038 <main+0x2ec>
	                  printf("CAN Message Received: %d %d %d %d\n", RxData[0], RxData[1], RxData[2], RxData[3]);
 8002068:	78eb      	ldrb	r3, [r5, #3]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	78ab      	ldrb	r3, [r5, #2]
 800206e:	786a      	ldrb	r2, [r5, #1]
 8002070:	7829      	ldrb	r1, [r5, #0]
 8002072:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <main+0x35c>)
 8002074:	f001 fec8 	bl	8003e08 <iprintf>
	                  speed = RxData[0];
 8002078:	7828      	ldrb	r0, [r5, #0]
 800207a:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <main+0x360>)
 800207c:	6018      	str	r0, [r3, #0]
	                  charge = RxData[1];
 800207e:	4e0c      	ldr	r6, [pc, #48]	@ (80020b0 <main+0x364>)
 8002080:	786b      	ldrb	r3, [r5, #1]
 8002082:	6033      	str	r3, [r6, #0]
	                  water_tmp = RxData[2];
 8002084:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 80020b8 <main+0x36c>
 8002088:	78ab      	ldrb	r3, [r5, #2]
 800208a:	f8c8 3000 	str.w	r3, [r8]
	                  cell_tmp = RxData[3];
 800208e:	4f09      	ldr	r7, [pc, #36]	@ (80020b4 <main+0x368>)
 8002090:	78eb      	ldrb	r3, [r5, #3]
 8002092:	603b      	str	r3, [r7, #0]
	                  Display_Corner_Speed(speed);
 8002094:	f7fe fdb4 	bl	8000c00 <Display_Corner_Speed>
	                  Display_Corner_Numbers(charge, cell_tmp, water_tmp);
 8002098:	f8d8 2000 	ldr.w	r2, [r8]
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	6830      	ldr	r0, [r6, #0]
 80020a0:	f7fe fd6a 	bl	8000b78 <Display_Corner_Numbers>
 80020a4:	e7c8      	b.n	8002038 <main+0x2ec>
 80020a6:	bf00      	nop
 80020a8:	0800c2bc 	.word	0x0800c2bc
 80020ac:	20000068 	.word	0x20000068
 80020b0:	20000074 	.word	0x20000074
 80020b4:	20000070 	.word	0x20000070
 80020b8:	2000006c 	.word	0x2000006c

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2100      	movs	r1, #0
 80020c0:	9100      	str	r1, [sp, #0]
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_MspInit+0x34>)
 80020c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80020cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80020ce:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80020d2:	9200      	str	r2, [sp, #0]
 80020d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	9101      	str	r1, [sp, #4]
 80020d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020da:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	b002      	add	sp, #8
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800

080020f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020f4:	b510      	push	{r4, lr}
 80020f6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	9304      	str	r3, [sp, #16]
 80020fe:	9305      	str	r3, [sp, #20]
 8002100:	9306      	str	r3, [sp, #24]
 8002102:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN2)
 8002104:	6802      	ldr	r2, [r0, #0]
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <HAL_CAN_MspInit+0xac>)
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_CAN_MspInit+0x1c>

  /* USER CODE END CAN2_MspInit 1 */

  }

}
 800210c:	b008      	add	sp, #32
 800210e:	bd10      	pop	{r4, pc}
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002110:	2400      	movs	r4, #0
 8002112:	9400      	str	r4, [sp, #0]
 8002114:	f503 33e8 	add.w	r3, r3, #118784	@ 0x1d000
 8002118:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800211a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800211e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002120:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002122:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8002126:	9200      	str	r2, [sp, #0]
 8002128:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800212a:	9401      	str	r4, [sp, #4]
 800212c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800212e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8002132:	641a      	str	r2, [r3, #64]	@ 0x40
 8002134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002136:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800213a:	9201      	str	r2, [sp, #4]
 800213c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800213e:	9402      	str	r4, [sp, #8]
 8002140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002142:	f042 0202 	orr.w	r2, r2, #2
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	9302      	str	r3, [sp, #8]
 8002150:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002152:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002156:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002160:	2309      	movs	r3, #9
 8002162:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	a903      	add	r1, sp, #12
 8002166:	480f      	ldr	r0, [pc, #60]	@ (80021a4 <HAL_CAN_MspInit+0xb0>)
 8002168:	f000 fdec 	bl	8002d44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 800216c:	4622      	mov	r2, r4
 800216e:	4621      	mov	r1, r4
 8002170:	203f      	movs	r0, #63	@ 0x3f
 8002172:	f000 fd8f 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8002176:	203f      	movs	r0, #63	@ 0x3f
 8002178:	f000 fdc2 	bl	8002d00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800217c:	4622      	mov	r2, r4
 800217e:	4621      	mov	r1, r4
 8002180:	2040      	movs	r0, #64	@ 0x40
 8002182:	f000 fd87 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002186:	2040      	movs	r0, #64	@ 0x40
 8002188:	f000 fdba 	bl	8002d00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800218c:	4622      	mov	r2, r4
 800218e:	4621      	mov	r1, r4
 8002190:	2041      	movs	r0, #65	@ 0x41
 8002192:	f000 fd7f 	bl	8002c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8002196:	2041      	movs	r0, #65	@ 0x41
 8002198:	f000 fdb2 	bl	8002d00 <HAL_NVIC_EnableIRQ>
}
 800219c:	e7b6      	b.n	800210c <HAL_CAN_MspInit+0x18>
 800219e:	bf00      	nop
 80021a0:	40006800 	.word	0x40006800
 80021a4:	40020400 	.word	0x40020400

080021a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <HAL_TIM_Base_MspInit+0x48>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b6:	d00e      	beq.n	80021d6 <HAL_TIM_Base_MspInit+0x2e>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b8:	b002      	add	sp, #8
 80021ba:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <HAL_TIM_Base_MspInit+0x4c>)
 80021c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80021ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	9b00      	ldr	r3, [sp, #0]
 80021d4:	e7f0      	b.n	80021b8 <HAL_TIM_Base_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_TIM_Base_MspInit+0x4c>)
 80021dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9b01      	ldr	r3, [sp, #4]
}
 80021ee:	e7e3      	b.n	80021b8 <HAL_TIM_Base_MspInit+0x10>
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40023800 	.word	0x40023800

080021f8 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80021f8:	b530      	push	{r4, r5, lr}
 80021fa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	2300      	movs	r3, #0
 80021fe:	9303      	str	r3, [sp, #12]
 8002200:	9304      	str	r3, [sp, #16]
 8002202:	9305      	str	r3, [sp, #20]
 8002204:	9306      	str	r3, [sp, #24]
 8002206:	9307      	str	r3, [sp, #28]
  if(hhcd->Instance==USB_OTG_FS)
 8002208:	6803      	ldr	r3, [r0, #0]
 800220a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800220e:	d001      	beq.n	8002214 <HAL_HCD_MspInit+0x1c>

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002210:	b009      	add	sp, #36	@ 0x24
 8002212:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	2500      	movs	r5, #0
 8002216:	9501      	str	r5, [sp, #4]
 8002218:	4c12      	ldr	r4, [pc, #72]	@ (8002264 <HAL_HCD_MspInit+0x6c>)
 800221a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6323      	str	r3, [r4, #48]	@ 0x30
 8002222:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800222c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002230:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800223a:	230a      	movs	r3, #10
 800223c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223e:	a903      	add	r1, sp, #12
 8002240:	4809      	ldr	r0, [pc, #36]	@ (8002268 <HAL_HCD_MspInit+0x70>)
 8002242:	f000 fd7f 	bl	8002d44 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002246:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800224c:	6363      	str	r3, [r4, #52]	@ 0x34
 800224e:	9502      	str	r5, [sp, #8]
 8002250:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6463      	str	r3, [r4, #68]	@ 0x44
 8002258:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	9b02      	ldr	r3, [sp, #8]
}
 8002262:	e7d5      	b.n	8002210 <HAL_HCD_MspInit+0x18>
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800226c:	e7fe      	b.n	800226c <NMI_Handler>

0800226e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler>

08002270 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler>

08002272 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002272:	e7fe      	b.n	8002272 <BusFault_Handler>

08002274 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <UsageFault_Handler>

08002276 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	4770      	bx	lr

08002278 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002278:	4770      	bx	lr

0800227a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227a:	4770      	bx	lr

0800227c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800227c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227e:	f000 f8e7 	bl	8002450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002282:	bd08      	pop	{r3, pc}

08002284 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002286:	4802      	ldr	r0, [pc, #8]	@ (8002290 <CAN2_TX_IRQHandler+0xc>)
 8002288:	f000 fbb6 	bl	80029f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800228c:	bd08      	pop	{r3, pc}
 800228e:	bf00      	nop
 8002290:	200005cc 	.word	0x200005cc

08002294 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002294:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002296:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <CAN2_RX0_IRQHandler+0xc>)
 8002298:	f000 fbae 	bl	80029f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800229c:	bd08      	pop	{r3, pc}
 800229e:	bf00      	nop
 80022a0:	200005cc 	.word	0x200005cc

080022a4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80022a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80022a6:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <CAN2_RX1_IRQHandler+0xc>)
 80022a8:	f000 fba6 	bl	80029f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80022ac:	bd08      	pop	{r3, pc}
 80022ae:	bf00      	nop
 80022b0:	200005cc 	.word	0x200005cc

080022b4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80022b4:	2001      	movs	r0, #1
 80022b6:	4770      	bx	lr

080022b8 <_kill>:

int _kill(int pid, int sig)
{
 80022b8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ba:	f001 ff69 	bl	8004190 <__errno>
 80022be:	2316      	movs	r3, #22
 80022c0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80022c2:	f04f 30ff 	mov.w	r0, #4294967295
 80022c6:	bd08      	pop	{r3, pc}

080022c8 <_exit>:

void _exit (int status)
{
 80022c8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80022ca:	f001 ff61 	bl	8004190 <__errno>
 80022ce:	2316      	movs	r3, #22
 80022d0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80022d2:	e7fe      	b.n	80022d2 <_exit+0xa>

080022d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d6:	1e16      	subs	r6, r2, #0
 80022d8:	dd07      	ble.n	80022ea <_read+0x16>
 80022da:	460c      	mov	r4, r1
 80022dc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80022de:	f3af 8000 	nop.w
 80022e2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	42a5      	cmp	r5, r4
 80022e8:	d1f9      	bne.n	80022de <_read+0xa>
  }

  return len;
}
 80022ea:	4630      	mov	r0, r6
 80022ec:	bd70      	pop	{r4, r5, r6, pc}

080022ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ee:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	1e16      	subs	r6, r2, #0
 80022f2:	dd07      	ble.n	8002304 <_write+0x16>
 80022f4:	460c      	mov	r4, r1
 80022f6:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80022f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80022fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	42a5      	cmp	r5, r4
 8002302:	d1f9      	bne.n	80022f8 <_write+0xa>
  }
  return len;
}
 8002304:	4630      	mov	r0, r6
 8002306:	bd70      	pop	{r4, r5, r6, pc}

08002308 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800230e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002312:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002314:	2000      	movs	r0, #0
 8002316:	4770      	bx	lr

08002318 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002318:	2001      	movs	r0, #1
 800231a:	4770      	bx	lr

0800231c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800231c:	2000      	movs	r0, #0
 800231e:	4770      	bx	lr

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b508      	push	{r3, lr}
 8002322:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <_sbrk+0x38>)
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	b152      	cbz	r2, 8002340 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <_sbrk+0x38>)
 800232c:	6810      	ldr	r0, [r2, #0]
 800232e:	4403      	add	r3, r0
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <_sbrk+0x3c>)
 8002332:	490b      	ldr	r1, [pc, #44]	@ (8002360 <_sbrk+0x40>)
 8002334:	1a52      	subs	r2, r2, r1
 8002336:	4293      	cmp	r3, r2
 8002338:	d806      	bhi.n	8002348 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800233a:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <_sbrk+0x38>)
 800233c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800233e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8002340:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <_sbrk+0x38>)
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <_sbrk+0x44>)
 8002344:	6011      	str	r1, [r2, #0]
 8002346:	e7f0      	b.n	800232a <_sbrk+0xa>
    errno = ENOMEM;
 8002348:	f001 ff22 	bl	8004190 <__errno>
 800234c:	230c      	movs	r3, #12
 800234e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	e7f3      	b.n	800233e <_sbrk+0x1e>
 8002356:	bf00      	nop
 8002358:	200005f4 	.word	0x200005f4
 800235c:	20020000 	.word	0x20020000
 8002360:	00000400 	.word	0x00000400
 8002364:	20000748 	.word	0x20000748

08002368 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4a03      	ldr	r2, [pc, #12]	@ (8002378 <SystemInit+0x10>)
 800236a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800236e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002372:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002380:	f7ff fff2 	bl	8002368 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80023aa:	f001 fef7 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ae:	f7ff fccd 	bl	8001d4c <main>
  bx  lr    
 80023b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80023c0:	0800c3e0 	.word	0x0800c3e0
  ldr r2, =_sbss
 80023c4:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80023c8:	20000748 	.word	0x20000748

080023cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC_IRQHandler>
	...

080023d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b510      	push	{r4, lr}
 80023d2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002410 <HAL_InitTick+0x40>)
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80023e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002414 <HAL_InitTick+0x44>)
 80023e2:	6810      	ldr	r0, [r2, #0]
 80023e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80023e8:	f000 fc98 	bl	8002d1c <HAL_SYSTICK_Config>
 80023ec:	b968      	cbnz	r0, 800240a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ee:	2c0f      	cmp	r4, #15
 80023f0:	d901      	bls.n	80023f6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80023f2:	2001      	movs	r0, #1
 80023f4:	e00a      	b.n	800240c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023f6:	2200      	movs	r2, #0
 80023f8:	4621      	mov	r1, r4
 80023fa:	f04f 30ff 	mov.w	r0, #4294967295
 80023fe:	f000 fc49 	bl	8002c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_InitTick+0x48>)
 8002404:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002406:	2000      	movs	r0, #0
 8002408:	e000      	b.n	800240c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800240a:	2001      	movs	r0, #1
}
 800240c:	bd10      	pop	{r4, pc}
 800240e:	bf00      	nop
 8002410:	2000007c 	.word	0x2000007c
 8002414:	20000078 	.word	0x20000078
 8002418:	20000080 	.word	0x20000080

0800241c <HAL_Init>:
{
 800241c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800241e:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_Init+0x30>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002426:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800242e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002436:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002438:	2003      	movs	r0, #3
 800243a:	f000 fc19 	bl	8002c70 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800243e:	200f      	movs	r0, #15
 8002440:	f7ff ffc6 	bl	80023d0 <HAL_InitTick>
  HAL_MspInit();
 8002444:	f7ff fe3a 	bl	80020bc <HAL_MspInit>
}
 8002448:	2000      	movs	r0, #0
 800244a:	bd08      	pop	{r3, pc}
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002450:	4a03      	ldr	r2, [pc, #12]	@ (8002460 <HAL_IncTick+0x10>)
 8002452:	6811      	ldr	r1, [r2, #0]
 8002454:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <HAL_IncTick+0x14>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	440b      	add	r3, r1
 800245a:	6013      	str	r3, [r2, #0]
}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	200005f8 	.word	0x200005f8
 8002464:	2000007c 	.word	0x2000007c

08002468 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002468:	4b01      	ldr	r3, [pc, #4]	@ (8002470 <HAL_GetTick+0x8>)
 800246a:	6818      	ldr	r0, [r3, #0]
}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	200005f8 	.word	0x200005f8

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fff6 	bl	8002468 <HAL_GetTick>
 800247c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002482:	d002      	beq.n	800248a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <HAL_Delay+0x24>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800248a:	f7ff ffed 	bl	8002468 <HAL_GetTick>
 800248e:	1b40      	subs	r0, r0, r5
 8002490:	42a0      	cmp	r0, r4
 8002492:	d3fa      	bcc.n	800248a <HAL_Delay+0x16>
  {
  }
}
 8002494:	bd38      	pop	{r3, r4, r5, pc}
 8002496:	bf00      	nop
 8002498:	2000007c 	.word	0x2000007c

0800249c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800249c:	2800      	cmp	r0, #0
 800249e:	f000 808a 	beq.w	80025b6 <HAL_CAN_Init+0x11a>
{
 80024a2:	b538      	push	{r3, r4, r5, lr}
 80024a4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80024aa:	b1d3      	cbz	r3, 80024e2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024ac:	6822      	ldr	r2, [r4, #0]
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b6:	f7ff ffd7 	bl	8002468 <HAL_GetTick>
 80024ba:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024bc:	6823      	ldr	r3, [r4, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	f012 0f01 	tst.w	r2, #1
 80024c4:	d110      	bne.n	80024e8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024c6:	f7ff ffcf 	bl	8002468 <HAL_GetTick>
 80024ca:	1b40      	subs	r0, r0, r5
 80024cc:	280a      	cmp	r0, #10
 80024ce:	d9f5      	bls.n	80024bc <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024d0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d6:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024d8:	2305      	movs	r3, #5
 80024da:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80024de:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80024e2:	f7ff fe07 	bl	80020f4 <HAL_CAN_MspInit>
 80024e6:	e7e1      	b.n	80024ac <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f022 0202 	bic.w	r2, r2, #2
 80024ee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80024f0:	f7ff ffba 	bl	8002468 <HAL_GetTick>
 80024f4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	f012 0f02 	tst.w	r2, #2
 80024fe:	d00d      	beq.n	800251c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002500:	f7ff ffb2 	bl	8002468 <HAL_GetTick>
 8002504:	1b40      	subs	r0, r0, r5
 8002506:	280a      	cmp	r0, #10
 8002508:	d9f5      	bls.n	80024f6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800250a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002512:	2305      	movs	r3, #5
 8002514:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e7e1      	b.n	80024e0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800251c:	7e22      	ldrb	r2, [r4, #24]
 800251e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	bf0c      	ite	eq
 8002524:	f042 0280 	orreq.w	r2, r2, #128	@ 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002528:	f022 0280 	bicne.w	r2, r2, #128	@ 0x80
 800252c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800252e:	7e63      	ldrb	r3, [r4, #25]
 8002530:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	bf0c      	ite	eq
 8002538:	f043 0340 	orreq.w	r3, r3, #64	@ 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800253c:	f023 0340 	bicne.w	r3, r3, #64	@ 0x40
 8002540:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002542:	7ea3      	ldrb	r3, [r4, #26]
 8002544:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002546:	6822      	ldr	r2, [r4, #0]
 8002548:	6813      	ldr	r3, [r2, #0]
 800254a:	bf0c      	ite	eq
 800254c:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002550:	f023 0320 	bicne.w	r3, r3, #32
 8002554:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002556:	7ee3      	ldrb	r3, [r4, #27]
 8002558:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800255a:	6822      	ldr	r2, [r4, #0]
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	bf0c      	ite	eq
 8002560:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002564:	f043 0310 	orrne.w	r3, r3, #16
 8002568:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800256a:	7f23      	ldrb	r3, [r4, #28]
 800256c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	6813      	ldr	r3, [r2, #0]
 8002572:	bf0c      	ite	eq
 8002574:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002578:	f023 0308 	bicne.w	r3, r3, #8
 800257c:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800257e:	7f63      	ldrb	r3, [r4, #29]
 8002580:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002582:	6822      	ldr	r2, [r4, #0]
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	bf0c      	ite	eq
 8002588:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800258c:	f023 0304 	bicne.w	r3, r3, #4
 8002590:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002592:	6821      	ldr	r1, [r4, #0]
 8002594:	68a3      	ldr	r3, [r4, #8]
 8002596:	68e2      	ldr	r2, [r4, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	6922      	ldr	r2, [r4, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	6962      	ldr	r2, [r4, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	3a01      	subs	r2, #1
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025aa:	2000      	movs	r0, #0
 80025ac:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80025b4:	e794      	b.n	80024e0 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 80025b6:	2001      	movs	r0, #1
}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025bc:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d905      	bls.n	80025d4 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80025ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ce:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80025d0:	2001      	movs	r0, #1
  }
}
 80025d2:	4770      	bx	lr
{
 80025d4:	b530      	push	{r4, r5, lr}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025d6:	4b46      	ldr	r3, [pc, #280]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 80025d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80025e8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 80025ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80025f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80025f4:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 80025f6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80025fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025fe:	694a      	ldr	r2, [r1, #20]
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800260a:	f8d3 021c 	ldr.w	r0, [r3, #540]	@ 0x21c
 800260e:	ea6f 0c02 	mvn.w	ip, r2
 8002612:	ea20 0002 	bic.w	r0, r0, r2
 8002616:	f8c3 021c 	str.w	r0, [r3, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800261a:	69cb      	ldr	r3, [r1, #28]
 800261c:	b9c3      	cbnz	r3, 8002650 <HAL_CAN_ConfigFilter+0x94>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800261e:	4b34      	ldr	r3, [pc, #208]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 8002620:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 8002624:	ea0c 0000 	and.w	r0, ip, r0
 8002628:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800262c:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800262e:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002630:	68cd      	ldr	r5, [r1, #12]
 8002632:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002636:	3048      	adds	r0, #72	@ 0x48
 8002638:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800263c:	688c      	ldr	r4, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800263e:	8808      	ldrh	r0, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002640:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002644:	694c      	ldr	r4, [r1, #20]
 8002646:	f104 0e48 	add.w	lr, r4, #72	@ 0x48
 800264a:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
 800264e:	6058      	str	r0, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002650:	69cb      	ldr	r3, [r1, #28]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d01e      	beq.n	8002694 <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002656:	698b      	ldr	r3, [r1, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d133      	bne.n	80026c4 <HAL_CAN_ConfigFilter+0x108>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800265c:	4824      	ldr	r0, [pc, #144]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 800265e:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 8002662:	ea0c 0303 	and.w	r3, ip, r3
 8002666:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800266a:	690b      	ldr	r3, [r1, #16]
 800266c:	bb8b      	cbnz	r3, 80026d2 <HAL_CAN_ConfigFilter+0x116>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800266e:	4820      	ldr	r0, [pc, #128]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 8002670:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8002674:	ea0c 0303 	and.w	r3, ip, r3
 8002678:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800267c:	6a0b      	ldr	r3, [r1, #32]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d02e      	beq.n	80026e0 <HAL_CAN_ConfigFilter+0x124>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 8002684:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 8002690:	2000      	movs	r0, #0
}
 8002692:	bd30      	pop	{r4, r5, pc}
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002694:	4b16      	ldr	r3, [pc, #88]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 8002696:	f8d3 020c 	ldr.w	r0, [r3, #524]	@ 0x20c
 800269a:	4310      	orrs	r0, r2
 800269c:	f8c3 020c 	str.w	r0, [r3, #524]	@ 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026a0:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a2:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026a4:	680d      	ldr	r5, [r1, #0]
 80026a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026aa:	3048      	adds	r0, #72	@ 0x48
 80026ac:	f843 4030 	str.w	r4, [r3, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026b0:	694c      	ldr	r4, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026b2:	8988      	ldrh	r0, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b4:	688d      	ldr	r5, [r1, #8]
 80026b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ba:	3448      	adds	r4, #72	@ 0x48
 80026bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80026c0:	6058      	str	r0, [r3, #4]
 80026c2:	e7c8      	b.n	8002656 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026c4:	480a      	ldr	r0, [pc, #40]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 80026c6:	f8d0 3204 	ldr.w	r3, [r0, #516]	@ 0x204
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c0 3204 	str.w	r3, [r0, #516]	@ 0x204
 80026d0:	e7cb      	b.n	800266a <HAL_CAN_ConfigFilter+0xae>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026d2:	4807      	ldr	r0, [pc, #28]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 80026d4:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
 80026de:	e7cd      	b.n	800267c <HAL_CAN_ConfigFilter+0xc0>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026e0:	4903      	ldr	r1, [pc, #12]	@ (80026f0 <HAL_CAN_ConfigFilter+0x134>)
 80026e2:	f8d1 321c 	ldr.w	r3, [r1, #540]	@ 0x21c
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
 80026ec:	e7c9      	b.n	8002682 <HAL_CAN_ConfigFilter+0xc6>
 80026ee:	bf00      	nop
 80026f0:	40006400 	.word	0x40006400

080026f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026f8:	f890 5020 	ldrb.w	r5, [r0, #32]
 80026fc:	b2ed      	uxtb	r5, r5
 80026fe:	2d01      	cmp	r5, #1
 8002700:	d006      	beq.n	8002710 <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002702:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002704:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002708:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800270a:	2501      	movs	r5, #1
  }
}
 800270c:	4628      	mov	r0, r5
 800270e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002710:	2302      	movs	r3, #2
 8002712:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002716:	6802      	ldr	r2, [r0, #0]
 8002718:	6813      	ldr	r3, [r2, #0]
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002720:	f7ff fea2 	bl	8002468 <HAL_GetTick>
 8002724:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f013 0f01 	tst.w	r3, #1
 800272e:	d00c      	beq.n	800274a <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002730:	f7ff fe9a 	bl	8002468 <HAL_GetTick>
 8002734:	1b83      	subs	r3, r0, r6
 8002736:	2b0a      	cmp	r3, #10
 8002738:	d9f5      	bls.n	8002726 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800273a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800273c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002740:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002742:	2305      	movs	r3, #5
 8002744:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8002748:	e7e0      	b.n	800270c <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800274a:	2500      	movs	r5, #0
 800274c:	6265      	str	r5, [r4, #36]	@ 0x24
    return HAL_OK;
 800274e:	e7dd      	b.n	800270c <HAL_CAN_Start+0x18>

08002750 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002752:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002756:	6804      	ldr	r4, [r0, #0]
 8002758:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800275a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800275e:	fa5f fc8c 	uxtb.w	ip, ip
 8002762:	f1bc 0f01 	cmp.w	ip, #1
 8002766:	d864      	bhi.n	8002832 <HAL_CAN_AddTxMessage+0xe2>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002768:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 800276c:	d05b      	beq.n	8002826 <HAL_CAN_AddTxMessage+0xd6>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800276e:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002772:	2401      	movs	r4, #1
 8002774:	fa04 f40c 	lsl.w	r4, r4, ip
 8002778:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800277a:	688b      	ldr	r3, [r1, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d13b      	bne.n	80027f8 <HAL_CAN_AddTxMessage+0xa8>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002780:	6804      	ldr	r4, [r0, #0]
 8002782:	680d      	ldr	r5, [r1, #0]
 8002784:	68cb      	ldr	r3, [r1, #12]
 8002786:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800278a:	f10c 0318 	add.w	r3, ip, #24
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	690c      	ldr	r4, [r1, #16]
 8002796:	f10c 0e18 	add.w	lr, ip, #24
 800279a:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800279e:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027a0:	7d0b      	ldrb	r3, [r1, #20]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d035      	beq.n	8002812 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027a6:	6801      	ldr	r1, [r0, #0]
 80027a8:	79d4      	ldrb	r4, [r2, #7]
 80027aa:	7993      	ldrb	r3, [r2, #6]
 80027ac:	041b      	lsls	r3, r3, #16
 80027ae:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80027b2:	7914      	ldrb	r4, [r2, #4]
 80027b4:	4323      	orrs	r3, r4
 80027b6:	7954      	ldrb	r4, [r2, #5]
 80027b8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80027bc:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80027c0:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027c4:	6801      	ldr	r1, [r0, #0]
 80027c6:	78d4      	ldrb	r4, [r2, #3]
 80027c8:	7893      	ldrb	r3, [r2, #2]
 80027ca:	041b      	lsls	r3, r3, #16
 80027cc:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80027d0:	7814      	ldrb	r4, [r2, #0]
 80027d2:	4323      	orrs	r3, r4
 80027d4:	7852      	ldrb	r2, [r2, #1]
 80027d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80027da:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80027de:	f8c1 3188 	str.w	r3, [r1, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027e2:	6803      	ldr	r3, [r0, #0]
 80027e4:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 80027e8:	f8d3 2180 	ldr.w	r2, [r3, #384]	@ 0x180
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

      /* Return function status */
      return HAL_OK;
 80027f4:	2000      	movs	r0, #0
 80027f6:	e021      	b.n	800283c <HAL_CAN_AddTxMessage+0xec>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027f8:	6804      	ldr	r4, [r0, #0]
 80027fa:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80027fc:	68ce      	ldr	r6, [r1, #12]
 80027fe:	4333      	orrs	r3, r6
 8002800:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002804:	f10c 0e18 	add.w	lr, ip, #24
 8002808:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 800280c:	f844 300e 	str.w	r3, [r4, lr]
 8002810:	e7bf      	b.n	8002792 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002812:	6803      	ldr	r3, [r0, #0]
 8002814:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8002818:	f8d3 1184 	ldr.w	r1, [r3, #388]	@ 0x184
 800281c:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8002820:	f8c3 1184 	str.w	r1, [r3, #388]	@ 0x184
 8002824:	e7bf      	b.n	80027a6 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002826:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002828:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800282c:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e004      	b.n	800283c <HAL_CAN_AddTxMessage+0xec>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002832:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002838:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800283a:	2001      	movs	r0, #1
  }
}
 800283c:	bd70      	pop	{r4, r5, r6, pc}

0800283e <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800283e:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002842:	f10c 3cff 	add.w	ip, ip, #4294967295
 8002846:	fa5f fc8c 	uxtb.w	ip, ip
 800284a:	f1bc 0f01 	cmp.w	ip, #1
 800284e:	f200 809c 	bhi.w	800298a <HAL_CAN_GetRxMessage+0x14c>
{
 8002852:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002854:	b959      	cbnz	r1, 800286e <HAL_CAN_GetRxMessage+0x30>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002856:	6804      	ldr	r4, [r0, #0]
 8002858:	68e4      	ldr	r4, [r4, #12]
 800285a:	f014 0f03 	tst.w	r4, #3
 800285e:	d111      	bne.n	8002884 <HAL_CAN_GetRxMessage+0x46>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002860:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002862:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002866:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 8002868:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800286a:	bc30      	pop	{r4, r5}
 800286c:	4770      	bx	lr
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800286e:	6804      	ldr	r4, [r0, #0]
 8002870:	6924      	ldr	r4, [r4, #16]
 8002872:	f014 0f03 	tst.w	r4, #3
 8002876:	d105      	bne.n	8002884 <HAL_CAN_GetRxMessage+0x46>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002878:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800287a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800287e:	6243      	str	r3, [r0, #36]	@ 0x24
        return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
 8002882:	e7f2      	b.n	800286a <HAL_CAN_GetRxMessage+0x2c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002884:	6805      	ldr	r5, [r0, #0]
 8002886:	f101 041b 	add.w	r4, r1, #27
 800288a:	0124      	lsls	r4, r4, #4
 800288c:	592c      	ldr	r4, [r5, r4]
 800288e:	f004 0404 	and.w	r4, r4, #4
 8002892:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002894:	2c00      	cmp	r4, #0
 8002896:	d169      	bne.n	800296c <HAL_CAN_GetRxMessage+0x12e>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002898:	6805      	ldr	r5, [r0, #0]
 800289a:	f101 041b 	add.w	r4, r1, #27
 800289e:	0124      	lsls	r4, r4, #4
 80028a0:	592c      	ldr	r4, [r5, r4]
 80028a2:	0d64      	lsrs	r4, r4, #21
 80028a4:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028a6:	6805      	ldr	r5, [r0, #0]
 80028a8:	f101 041b 	add.w	r4, r1, #27
 80028ac:	0124      	lsls	r4, r4, #4
 80028ae:	592c      	ldr	r4, [r5, r4]
 80028b0:	f004 0402 	and.w	r4, r4, #2
 80028b4:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80028b6:	6804      	ldr	r4, [r0, #0]
 80028b8:	eb04 1401 	add.w	r4, r4, r1, lsl #4
 80028bc:	f8d4 51b4 	ldr.w	r5, [r4, #436]	@ 0x1b4
 80028c0:	f015 0f08 	tst.w	r5, #8
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028c4:	bf06      	itte	eq
 80028c6:	f8d4 41b4 	ldreq.w	r4, [r4, #436]	@ 0x1b4
 80028ca:	f004 040f 	andeq.w	r4, r4, #15
      pHeader->DLC = 8U;
 80028ce:	2408      	movne	r4, #8
 80028d0:	6114      	str	r4, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028d2:	6804      	ldr	r4, [r0, #0]
 80028d4:	f101 0c1b 	add.w	ip, r1, #27
 80028d8:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 80028dc:	6864      	ldr	r4, [r4, #4]
 80028de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80028e2:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028e4:	6804      	ldr	r4, [r0, #0]
 80028e6:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 80028ea:	6864      	ldr	r4, [r4, #4]
 80028ec:	0c24      	lsrs	r4, r4, #16
 80028ee:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80028f6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 80028fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002902:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8002906:	0a12      	lsrs	r2, r2, #8
 8002908:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800290a:	6802      	ldr	r2, [r0, #0]
 800290c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002910:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8002914:	0c12      	lsrs	r2, r2, #16
 8002916:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002918:	6802      	ldr	r2, [r0, #0]
 800291a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800291e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 8002922:	0e12      	lsrs	r2, r2, #24
 8002924:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002926:	6802      	ldr	r2, [r0, #0]
 8002928:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800292c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8002930:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002932:	6802      	ldr	r2, [r0, #0]
 8002934:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002938:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800293c:	0a12      	lsrs	r2, r2, #8
 800293e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002946:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800294a:	0c12      	lsrs	r2, r2, #16
 800294c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002954:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8002958:	0e12      	lsrs	r2, r2, #24
 800295a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800295c:	b971      	cbnz	r1, 800297c <HAL_CAN_GetRxMessage+0x13e>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	68d3      	ldr	r3, [r2, #12]
 8002962:	f043 0320 	orr.w	r3, r3, #32
 8002966:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002968:	2000      	movs	r0, #0
 800296a:	e77e      	b.n	800286a <HAL_CAN_GetRxMessage+0x2c>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800296c:	6805      	ldr	r5, [r0, #0]
 800296e:	f101 041b 	add.w	r4, r1, #27
 8002972:	0124      	lsls	r4, r4, #4
 8002974:	592c      	ldr	r4, [r5, r4]
 8002976:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002978:	6054      	str	r4, [r2, #4]
 800297a:	e794      	b.n	80028a6 <HAL_CAN_GetRxMessage+0x68>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800297c:	6802      	ldr	r2, [r0, #0]
 800297e:	6913      	ldr	r3, [r2, #16]
 8002980:	f043 0320 	orr.w	r3, r3, #32
 8002984:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e76f      	b.n	800286a <HAL_CAN_GetRxMessage+0x2c>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800298a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800298c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002990:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
}
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002996:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800299a:	3b01      	subs	r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d901      	bls.n	80029a6 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80029a2:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80029a4:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 80029a6:	b921      	cbnz	r1, 80029b2 <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80029a8:	6803      	ldr	r3, [r0, #0]
 80029aa:	68d8      	ldr	r0, [r3, #12]
 80029ac:	f000 0003 	and.w	r0, r0, #3
 80029b0:	4770      	bx	lr
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	6918      	ldr	r0, [r3, #16]
 80029b6:	f000 0003 	and.w	r0, r0, #3
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80029bc:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d905      	bls.n	80029d4 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029c8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80029ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ce:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 80029d0:	2001      	movs	r0, #1
  }
}
 80029d2:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80029d4:	6802      	ldr	r2, [r0, #0]
 80029d6:	6953      	ldr	r3, [r2, #20]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80029dc:	2000      	movs	r0, #0
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029e6:	4770      	bx	lr

080029e8 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ea:	4770      	bx	lr

080029ec <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029ec:	4770      	bx	lr

080029ee <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029ee:	4770      	bx	lr

080029f0 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029f4:	4770      	bx	lr

080029f6 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029f6:	4770      	bx	lr

080029f8 <HAL_CAN_IRQHandler>:
{
 80029f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029fc:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029fe:	6803      	ldr	r3, [r0, #0]
 8002a00:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a02:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a06:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a08:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a0c:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a10:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a14:	f014 0601 	ands.w	r6, r4, #1
 8002a18:	d03b      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a1a:	f017 0601 	ands.w	r6, r7, #1
 8002a1e:	d016      	beq.n	8002a4e <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a20:	2201      	movs	r2, #1
 8002a22:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a24:	f017 0f02 	tst.w	r7, #2
 8002a28:	d108      	bne.n	8002a3c <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a2a:	f017 0f04 	tst.w	r7, #4
 8002a2e:	d10c      	bne.n	8002a4a <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a30:	f017 0608 	ands.w	r6, r7, #8
 8002a34:	d006      	beq.n	8002a44 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a36:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 8002a3a:	e008      	b.n	8002a4e <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a3c:	f7ff ffd0 	bl	80029e0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a40:	2600      	movs	r6, #0
 8002a42:	e004      	b.n	8002a4e <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a44:	f7ff ffcf 	bl	80029e6 <HAL_CAN_TxMailbox0AbortCallback>
 8002a48:	e001      	b.n	8002a4e <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a4a:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a4e:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8002a52:	d00d      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a5a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a5c:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8002a60:	f040 8087 	bne.w	8002b72 <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a64:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8002a68:	f000 8087 	beq.w	8002b7a <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a6c:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a70:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 8002a74:	d00d      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a7c:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a7e:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8002a82:	f040 8084 	bne.w	8002b8e <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a86:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 8002a8a:	f000 8084 	beq.w	8002b96 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a8e:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a92:	f014 0f08 	tst.w	r4, #8
 8002a96:	d007      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a98:	f01b 0f10 	tst.w	fp, #16
 8002a9c:	d004      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a9e:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002aa8:	f014 0f04 	tst.w	r4, #4
 8002aac:	d002      	beq.n	8002ab4 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002aae:	f01b 0f08 	tst.w	fp, #8
 8002ab2:	d17a      	bne.n	8002baa <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ab4:	f014 0f02 	tst.w	r4, #2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f013 0f03 	tst.w	r3, #3
 8002ac2:	d179      	bne.n	8002bb8 <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ac4:	f014 0f40 	tst.w	r4, #64	@ 0x40
 8002ac8:	d007      	beq.n	8002ada <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002aca:	f01a 0f10 	tst.w	sl, #16
 8002ace:	d004      	beq.n	8002ada <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ad0:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ada:	f014 0f20 	tst.w	r4, #32
 8002ade:	d002      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ae0:	f01a 0f08 	tst.w	sl, #8
 8002ae4:	d16c      	bne.n	8002bc0 <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ae6:	f014 0f10 	tst.w	r4, #16
 8002aea:	d004      	beq.n	8002af6 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aec:	682b      	ldr	r3, [r5, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f013 0f03 	tst.w	r3, #3
 8002af4:	d16b      	bne.n	8002bce <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002af6:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 8002afa:	d002      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002afc:	f018 0f10 	tst.w	r8, #16
 8002b00:	d169      	bne.n	8002bd6 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b02:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 8002b06:	d002      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b08:	f018 0f08 	tst.w	r8, #8
 8002b0c:	d16a      	bne.n	8002be4 <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b0e:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 8002b12:	f000 8084 	beq.w	8002c1e <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b16:	f018 0f04 	tst.w	r8, #4
 8002b1a:	d07d      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b1c:	f414 7f80 	tst.w	r4, #256	@ 0x100
 8002b20:	d004      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x134>
 8002b22:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b26:	bf18      	it	ne
 8002b28:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b2c:	f414 7f00 	tst.w	r4, #512	@ 0x200
 8002b30:	d004      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x144>
 8002b32:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b36:	bf18      	it	ne
 8002b38:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b3c:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 8002b40:	d004      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x154>
 8002b42:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b46:	bf18      	it	ne
 8002b48:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b4c:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 8002b50:	d062      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x220>
 8002b52:	f019 0970 	ands.w	r9, r9, #112	@ 0x70
 8002b56:	d05f      	beq.n	8002c18 <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 8002b58:	f1b9 0f40 	cmp.w	r9, #64	@ 0x40
 8002b5c:	d065      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x232>
 8002b5e:	d84e      	bhi.n	8002bfe <HAL_CAN_IRQHandler+0x206>
 8002b60:	f1b9 0f20 	cmp.w	r9, #32
 8002b64:	d05e      	beq.n	8002c24 <HAL_CAN_IRQHandler+0x22c>
 8002b66:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8002b6a:	d142      	bne.n	8002bf2 <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b6c:	f046 0620 	orr.w	r6, r6, #32
            break;
 8002b70:	e04d      	b.n	8002c0e <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b72:	4628      	mov	r0, r5
 8002b74:	f7ff ff35 	bl	80029e2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b78:	e77a      	b.n	8002a70 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b7a:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 8002b7e:	d002      	beq.n	8002b86 <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b80:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 8002b84:	e774      	b.n	8002a70 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b86:	4628      	mov	r0, r5
 8002b88:	f7ff ff2e 	bl	80029e8 <HAL_CAN_TxMailbox1AbortCallback>
 8002b8c:	e770      	b.n	8002a70 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b8e:	4628      	mov	r0, r5
 8002b90:	f7ff ff28 	bl	80029e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b94:	e77d      	b.n	8002a92 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b96:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 8002b9a:	d002      	beq.n	8002ba2 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b9c:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 8002ba0:	e777      	b.n	8002a92 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff ff21 	bl	80029ea <HAL_CAN_TxMailbox2AbortCallback>
 8002ba8:	e773      	b.n	8002a92 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f7ff ff1b 	bl	80029ec <HAL_CAN_RxFifo0FullCallback>
 8002bb6:	e77d      	b.n	8002ab4 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002bb8:	4628      	mov	r0, r5
 8002bba:	f7ff f847 	bl	8001c4c <HAL_CAN_RxFifo0MsgPendingCallback>
 8002bbe:	e781      	b.n	8002ac4 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7ff ff12 	bl	80029f0 <HAL_CAN_RxFifo1FullCallback>
 8002bcc:	e78b      	b.n	8002ae6 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bce:	4628      	mov	r0, r5
 8002bd0:	f7ff ff0d 	bl	80029ee <HAL_CAN_RxFifo1MsgPendingCallback>
 8002bd4:	e78f      	b.n	8002af6 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002bdc:	4628      	mov	r0, r5
 8002bde:	f7ff ff08 	bl	80029f2 <HAL_CAN_SleepCallback>
 8002be2:	e78e      	b.n	8002b02 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	2208      	movs	r2, #8
 8002be8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bea:	4628      	mov	r0, r5
 8002bec:	f7ff ff02 	bl	80029f4 <HAL_CAN_WakeUpFromRxMsgCallback>
 8002bf0:	e78d      	b.n	8002b0e <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 8002bf2:	f1b9 0f10 	cmp.w	r9, #16
 8002bf6:	d10a      	bne.n	8002c0e <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bf8:	f046 0608 	orr.w	r6, r6, #8
            break;
 8002bfc:	e007      	b.n	8002c0e <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 8002bfe:	f1b9 0f50 	cmp.w	r9, #80	@ 0x50
 8002c02:	d015      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x238>
 8002c04:	f1b9 0f60 	cmp.w	r9, #96	@ 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c08:	bf08      	it	eq
 8002c0a:	f446 7680 	orreq.w	r6, r6, #256	@ 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c0e:	682a      	ldr	r2, [r5, #0]
 8002c10:	6993      	ldr	r3, [r2, #24]
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c1e:	b956      	cbnz	r6, 8002c36 <HAL_CAN_IRQHandler+0x23e>
}
 8002c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c24:	f046 0610 	orr.w	r6, r6, #16
            break;
 8002c28:	e7f1      	b.n	8002c0e <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c2a:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 8002c2e:	e7ee      	b.n	8002c0e <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c30:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 8002c34:	e7eb      	b.n	8002c0e <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 8002c36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002c38:	4333      	orrs	r3, r6
 8002c3a:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7ff feda 	bl	80029f6 <HAL_CAN_ErrorCallback>
}
 8002c42:	e7ed      	b.n	8002c20 <HAL_CAN_IRQHandler+0x228>

08002c44 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 8002c44:	4602      	mov	r2, r0
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c46:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c4a:	b2d8      	uxtb	r0, r3

  if ((state == HAL_CAN_STATE_READY) ||
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d900      	bls.n	8002c56 <HAL_CAN_GetState+0x12>
    }
  }

  /* Return CAN state */
  return state;
}
 8002c54:	4770      	bx	lr
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c56:	6813      	ldr	r3, [r2, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	f012 0f02 	tst.w	r2, #2
 8002c5e:	d105      	bne.n	8002c6c <HAL_CAN_GetState+0x28>
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8002c60:	681b      	ldr	r3, [r3, #0]
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8002c62:	f013 0f02 	tst.w	r3, #2
 8002c66:	bf18      	it	ne
 8002c68:	2003      	movne	r0, #3
 8002c6a:	4770      	bx	lr
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8002c6c:	2004      	movs	r0, #4
 8002c6e:	e7f1      	b.n	8002c54 <HAL_CAN_GetState+0x10>

08002c70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c72:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	0203      	lsls	r3, r0, #8
 8002c76:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c7e:	0412      	lsls	r2, r2, #16
 8002c80:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002c8c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c94:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c96:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <HAL_NVIC_SetPriority+0x64>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9e:	f1c3 0c07 	rsb	ip, r3, #7
 8002ca2:	f1bc 0f04 	cmp.w	ip, #4
 8002ca6:	bf28      	it	cs
 8002ca8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cac:	f103 0e04 	add.w	lr, r3, #4
 8002cb0:	f1be 0f06 	cmp.w	lr, #6
 8002cb4:	bf8c      	ite	hi
 8002cb6:	3b03      	subhi	r3, #3
 8002cb8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cba:	f04f 3eff 	mov.w	lr, #4294967295
 8002cbe:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002cc2:	ea21 010c 	bic.w	r1, r1, ip
 8002cc6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc8:	fa0e fe03 	lsl.w	lr, lr, r3
 8002ccc:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	db09      	blt.n	8002cea <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	0109      	lsls	r1, r1, #4
 8002cd8:	b2c9      	uxtb	r1, r1
 8002cda:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002cde:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002ce2:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ce6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cea:	f000 000f 	and.w	r0, r0, #15
 8002cee:	0109      	lsls	r1, r1, #4
 8002cf0:	b2c9      	uxtb	r1, r1
 8002cf2:	4b02      	ldr	r3, [pc, #8]	@ (8002cfc <HAL_NVIC_SetPriority+0x68>)
 8002cf4:	5419      	strb	r1, [r3, r0]
 8002cf6:	e7f6      	b.n	8002ce6 <HAL_NVIC_SetPriority+0x52>
 8002cf8:	e000ed00 	.word	0xe000ed00
 8002cfc:	e000ed14 	.word	0xe000ed14

08002d00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d00:	2800      	cmp	r0, #0
 8002d02:	db07      	blt.n	8002d14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d04:	0941      	lsrs	r1, r0, #5
 8002d06:	f000 001f 	and.w	r0, r0, #31
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4083      	lsls	r3, r0
 8002d0e:	4a02      	ldr	r2, [pc, #8]	@ (8002d18 <HAL_NVIC_EnableIRQ+0x18>)
 8002d10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000e100 	.word	0xe000e100

08002d1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	3801      	subs	r0, #1
 8002d1e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002d22:	d20b      	bcs.n	8002d3c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d28:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	4a05      	ldr	r2, [pc, #20]	@ (8002d40 <HAL_SYSTICK_Config+0x24>)
 8002d2c:	21f0      	movs	r1, #240	@ 0xf0
 8002d2e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d32:	2000      	movs	r0, #0
 8002d34:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	2207      	movs	r2, #7
 8002d38:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d3c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4c:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d4e:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d52:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d54:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d58:	4c75      	ldr	r4, [pc, #468]	@ (8002f30 <HAL_GPIO_Init+0x1ec>)
 8002d5a:	e04b      	b.n	8002df4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8002d5c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5e:	fa05 fa02 	lsl.w	sl, r5, r2
 8002d62:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	68cf      	ldr	r7, [r1, #12]
 8002d68:	4097      	lsls	r7, r2
 8002d6a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002d6e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002d70:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d72:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d76:	684f      	ldr	r7, [r1, #4]
 8002d78:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8002d7c:	409f      	lsls	r7, r3
 8002d7e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8002d82:	6047      	str	r7, [r0, #4]
 8002d84:	e044      	b.n	8002e10 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	f04f 0c00 	mov.w	ip, #0
 8002d8a:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002d8e:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d92:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8002d96:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d9c:	684e      	ldr	r6, [r1, #4]
 8002d9e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002da2:	bf0c      	ite	eq
 8002da4:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002da8:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8002dac:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8002dae:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db0:	684e      	ldr	r6, [r1, #4]
 8002db2:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002db6:	bf0c      	ite	eq
 8002db8:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002dbc:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8002dc0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8002dc2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dc4:	684e      	ldr	r6, [r1, #4]
 8002dc6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002dca:	bf0c      	ite	eq
 8002dcc:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002dd0:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8002dd4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dd6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd8:	684e      	ldr	r6, [r1, #4]
 8002dda:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 8002dde:	bf0c      	ite	eq
 8002de0:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8002de4:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8002de8:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	3301      	adds	r3, #1
 8002dec:	3202      	adds	r2, #2
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	f000 809b 	beq.w	8002f2a <HAL_GPIO_Init+0x1e6>
    ioposition = 0x01U << position;
 8002df4:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df8:	680f      	ldr	r7, [r1, #0]
 8002dfa:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8002dfe:	ea3c 0707 	bics.w	r7, ip, r7
 8002e02:	d1f2      	bne.n	8002dea <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e04:	684f      	ldr	r7, [r1, #4]
 8002e06:	f007 0703 	and.w	r7, r7, #3
 8002e0a:	3f01      	subs	r7, #1
 8002e0c:	2f01      	cmp	r7, #1
 8002e0e:	d9a5      	bls.n	8002d5c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e10:	684f      	ldr	r7, [r1, #4]
 8002e12:	f007 0703 	and.w	r7, r7, #3
 8002e16:	2f03      	cmp	r7, #3
 8002e18:	d023      	beq.n	8002e62 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 8002e1a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1c:	fa05 fc02 	lsl.w	ip, r5, r2
 8002e20:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e24:	688f      	ldr	r7, [r1, #8]
 8002e26:	4097      	lsls	r7, r2
 8002e28:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8002e2c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	684f      	ldr	r7, [r1, #4]
 8002e30:	f007 0703 	and.w	r7, r7, #3
 8002e34:	2f02      	cmp	r7, #2
 8002e36:	d114      	bne.n	8002e62 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 8002e38:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002e3c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8002e40:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e44:	f003 0b07 	and.w	fp, r3, #7
 8002e48:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002e4c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8002e50:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e54:	690f      	ldr	r7, [r1, #16]
 8002e56:	fa07 f70b 	lsl.w	r7, r7, fp
 8002e5a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002e5e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8002e62:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e64:	fa05 fc02 	lsl.w	ip, r5, r2
 8002e68:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6c:	684f      	ldr	r7, [r1, #4]
 8002e6e:	f007 0703 	and.w	r7, r7, #3
 8002e72:	4097      	lsls	r7, r2
 8002e74:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8002e78:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7a:	684f      	ldr	r7, [r1, #4]
 8002e7c:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 8002e80:	d0b3      	beq.n	8002dea <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2700      	movs	r7, #0
 8002e84:	9701      	str	r7, [sp, #4]
 8002e86:	4e2b      	ldr	r6, [pc, #172]	@ (8002f34 <HAL_GPIO_Init+0x1f0>)
 8002e88:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8002e8a:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 8002e8e:	6477      	str	r7, [r6, #68]	@ 0x44
 8002e90:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 8002e92:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 8002e96:	9701      	str	r7, [sp, #4]
 8002e98:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9a:	f023 0703 	bic.w	r7, r3, #3
 8002e9e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8002ea2:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 8002ea6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eaa:	f003 0b03 	and.w	fp, r3, #3
 8002eae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002eb2:	fa08 fc0b 	lsl.w	ip, r8, fp
 8002eb6:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eba:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 8002ebe:	42b0      	cmp	r0, r6
 8002ec0:	f43f af61 	beq.w	8002d86 <HAL_GPIO_Init+0x42>
 8002ec4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ec8:	42b0      	cmp	r0, r6
 8002eca:	d01c      	beq.n	8002f06 <HAL_GPIO_Init+0x1c2>
 8002ecc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ed0:	42b0      	cmp	r0, r6
 8002ed2:	d01b      	beq.n	8002f0c <HAL_GPIO_Init+0x1c8>
 8002ed4:	f8df c060 	ldr.w	ip, [pc, #96]	@ 8002f38 <HAL_GPIO_Init+0x1f4>
 8002ed8:	4560      	cmp	r0, ip
 8002eda:	d01a      	beq.n	8002f12 <HAL_GPIO_Init+0x1ce>
 8002edc:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002ee0:	4560      	cmp	r0, ip
 8002ee2:	d019      	beq.n	8002f18 <HAL_GPIO_Init+0x1d4>
 8002ee4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002ee8:	4560      	cmp	r0, ip
 8002eea:	d018      	beq.n	8002f1e <HAL_GPIO_Init+0x1da>
 8002eec:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002ef0:	4560      	cmp	r0, ip
 8002ef2:	d017      	beq.n	8002f24 <HAL_GPIO_Init+0x1e0>
 8002ef4:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8002ef8:	4560      	cmp	r0, ip
 8002efa:	bf14      	ite	ne
 8002efc:	f04f 0c08 	movne.w	ip, #8
 8002f00:	f04f 0c07 	moveq.w	ip, #7
 8002f04:	e741      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f06:	f04f 0c01 	mov.w	ip, #1
 8002f0a:	e73e      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f0c:	f04f 0c02 	mov.w	ip, #2
 8002f10:	e73b      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f12:	f04f 0c03 	mov.w	ip, #3
 8002f16:	e738      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f18:	f04f 0c04 	mov.w	ip, #4
 8002f1c:	e735      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f1e:	f04f 0c05 	mov.w	ip, #5
 8002f22:	e732      	b.n	8002d8a <HAL_GPIO_Init+0x46>
 8002f24:	f04f 0c06 	mov.w	ip, #6
 8002f28:	e72f      	b.n	8002d8a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8002f2a:	b003      	add	sp, #12
 8002f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f30:	40013c00 	.word	0x40013c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020c00 	.word	0x40020c00

08002f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f3c:	b10a      	cbz	r2, 8002f42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	6181      	str	r1, [r0, #24]
 8002f40:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f42:	0409      	lsls	r1, r1, #16
 8002f44:	6181      	str	r1, [r0, #24]
  }
}
 8002f46:	4770      	bx	lr

08002f48 <HAL_HCD_Init>:
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d041      	beq.n	8002fd0 <HAL_HCD_Init+0x88>
{
 8002f4c:	b530      	push	{r4, r5, lr}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002f52:	6805      	ldr	r5, [r0, #0]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002f54:	f890 33d5 	ldrb.w	r3, [r0, #981]	@ 0x3d5
 8002f58:	b1cb      	cbz	r3, 8002f8e <HAL_HCD_Init+0x46>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f60:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
  {
    hhcd->Init.dma_enable = 0U;
 8002f64:	bf04      	itt	eq
 8002f66:	2300      	moveq	r3, #0
 8002f68:	71a3      	strbeq	r3, [r4, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	f000 fd62 	bl	8003a34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002f70:	7c23      	ldrb	r3, [r4, #16]
 8002f72:	f88d 3000 	strb.w	r3, [sp]
 8002f76:	1d23      	adds	r3, r4, #4
 8002f78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7a:	6820      	ldr	r0, [r4, #0]
 8002f7c:	f000 fd11 	bl	80039a2 <USB_CoreInit>
 8002f80:	b150      	cbz	r0, 8002f98 <HAL_HCD_Init+0x50>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
  }

  hhcd->State = HAL_HCD_STATE_READY;

  return HAL_OK;
}
 8002f8a:	b003      	add	sp, #12
 8002f8c:	bd30      	pop	{r4, r5, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002f8e:	f880 33d4 	strb.w	r3, [r0, #980]	@ 0x3d4
    HAL_HCD_MspInit(hhcd);
 8002f92:	f7ff f931 	bl	80021f8 <HAL_HCD_MspInit>
 8002f96:	e7e0      	b.n	8002f5a <HAL_HCD_Init+0x12>
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	6820      	ldr	r0, [r4, #0]
 8002f9c:	f000 fd50 	bl	8003a40 <USB_SetCurrentMode>
 8002fa0:	b120      	cbz	r0, 8002fac <HAL_HCD_Init+0x64>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
 8002faa:	e7ee      	b.n	8002f8a <HAL_HCD_Init+0x42>
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002fac:	7c23      	ldrb	r3, [r4, #16]
 8002fae:	f88d 3000 	strb.w	r3, [sp]
 8002fb2:	1d23      	adds	r3, r4, #4
 8002fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb6:	6820      	ldr	r0, [r4, #0]
 8002fb8:	f000 fdbc 	bl	8003b34 <USB_HostInit>
 8002fbc:	b918      	cbnz	r0, 8002fc6 <HAL_HCD_Init+0x7e>
  hhcd->State = HAL_HCD_STATE_READY;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
  return HAL_OK;
 8002fc4:	e7e1      	b.n	8002f8a <HAL_HCD_Init+0x42>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f884 33d5 	strb.w	r3, [r4, #981]	@ 0x3d5
    return HAL_ERROR;
 8002fcc:	2001      	movs	r0, #1
 8002fce:	e7dc      	b.n	8002f8a <HAL_HCD_Init+0x42>
    return HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	f000 81e1 	beq.w	800339c <HAL_RCC_OscConfig+0x3c8>
{
 8002fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe2:	6803      	ldr	r3, [r0, #0]
 8002fe4:	f013 0f01 	tst.w	r3, #1
 8002fe8:	d03b      	beq.n	8003062 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fea:	4b9f      	ldr	r3, [pc, #636]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d02c      	beq.n	8003050 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff6:	4b9c      	ldr	r3, [pc, #624]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d021      	beq.n	8003046 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003008:	d04f      	beq.n	80030aa <HAL_RCC_OscConfig+0xd6>
 800300a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300e:	d052      	beq.n	80030b6 <HAL_RCC_OscConfig+0xe2>
 8003010:	4b95      	ldr	r3, [pc, #596]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003020:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d050      	beq.n	80030ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7ff fa1e 	bl	8002468 <HAL_GetTick>
 800302c:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4e8e      	ldr	r6, [pc, #568]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003030:	6833      	ldr	r3, [r6, #0]
 8003032:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003036:	d114      	bne.n	8003062 <HAL_RCC_OscConfig+0x8e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003038:	f7ff fa16 	bl	8002468 <HAL_GetTick>
 800303c:	1b40      	subs	r0, r0, r5
 800303e:	2864      	cmp	r0, #100	@ 0x64
 8003040:	d9f6      	bls.n	8003030 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8003042:	2003      	movs	r0, #3
 8003044:	e1b1      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 800304e:	d0d8      	beq.n	8003002 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b85      	ldr	r3, [pc, #532]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003058:	d003      	beq.n	8003062 <HAL_RCC_OscConfig+0x8e>
 800305a:	6863      	ldr	r3, [r4, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 819f 	beq.w	80033a0 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	f013 0f02 	tst.w	r3, #2
 8003068:	d054      	beq.n	8003114 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800306a:	4b7f      	ldr	r3, [pc, #508]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f013 0f0c 	tst.w	r3, #12
 8003072:	d03e      	beq.n	80030f2 <HAL_RCC_OscConfig+0x11e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003074:	4b7c      	ldr	r3, [pc, #496]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800307c:	2b08      	cmp	r3, #8
 800307e:	d033      	beq.n	80030e8 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	68e3      	ldr	r3, [r4, #12]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d068      	beq.n	8003158 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003086:	4b79      	ldr	r3, [pc, #484]	@ (800326c <HAL_RCC_OscConfig+0x298>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7ff f9ec 	bl	8002468 <HAL_GetTick>
 8003090:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4e75      	ldr	r6, [pc, #468]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003094:	6833      	ldr	r3, [r6, #0]
 8003096:	f013 0f02 	tst.w	r3, #2
 800309a:	d154      	bne.n	8003146 <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7ff f9e4 	bl	8002468 <HAL_GetTick>
 80030a0:	1b40      	subs	r0, r0, r5
 80030a2:	2802      	cmp	r0, #2
 80030a4:	d9f6      	bls.n	8003094 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80030a6:	2003      	movs	r0, #3
 80030a8:	e17f      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80030ac:	6813      	ldr	r3, [r2, #0]
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e7b5      	b.n	8003022 <HAL_RCC_OscConfig+0x4e>
 80030b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	e7ab      	b.n	8003022 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80030ca:	f7ff f9cd 	bl	8002468 <HAL_GetTick>
 80030ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d0:	4e65      	ldr	r6, [pc, #404]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80030d2:	6833      	ldr	r3, [r6, #0]
 80030d4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80030d8:	d0c3      	beq.n	8003062 <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030da:	f7ff f9c5 	bl	8002468 <HAL_GetTick>
 80030de:	1b40      	subs	r0, r0, r5
 80030e0:	2864      	cmp	r0, #100	@ 0x64
 80030e2:	d9f6      	bls.n	80030d2 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80030e4:	2003      	movs	r0, #3
 80030e6:	e160      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80030f0:	d1c6      	bne.n	8003080 <HAL_RCC_OscConfig+0xac>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f013 0f02 	tst.w	r3, #2
 80030fa:	d003      	beq.n	8003104 <HAL_RCC_OscConfig+0x130>
 80030fc:	68e3      	ldr	r3, [r4, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	f040 8150 	bne.w	80033a4 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4a58      	ldr	r2, [pc, #352]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	6921      	ldr	r1, [r4, #16]
 800310a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800310e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003112:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	f013 0f08 	tst.w	r3, #8
 800311a:	d042      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800311c:	6963      	ldr	r3, [r4, #20]
 800311e:	b36b      	cbz	r3, 800317c <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003120:	4b52      	ldr	r3, [pc, #328]	@ (800326c <HAL_RCC_OscConfig+0x298>)
 8003122:	2201      	movs	r2, #1
 8003124:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7ff f99e 	bl	8002468 <HAL_GetTick>
 800312c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312e:	4e4e      	ldr	r6, [pc, #312]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003130:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003132:	f013 0f02 	tst.w	r3, #2
 8003136:	d134      	bne.n	80031a2 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7ff f996 	bl	8002468 <HAL_GetTick>
 800313c:	1b40      	subs	r0, r0, r5
 800313e:	2802      	cmp	r0, #2
 8003140:	d9f6      	bls.n	8003130 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8003142:	2003      	movs	r0, #3
 8003144:	e131      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4a48      	ldr	r2, [pc, #288]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003148:	6813      	ldr	r3, [r2, #0]
 800314a:	6921      	ldr	r1, [r4, #16]
 800314c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003150:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e7dd      	b.n	8003114 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003158:	4b44      	ldr	r3, [pc, #272]	@ (800326c <HAL_RCC_OscConfig+0x298>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800315e:	f7ff f983 	bl	8002468 <HAL_GetTick>
 8003162:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003164:	4e40      	ldr	r6, [pc, #256]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003166:	6833      	ldr	r3, [r6, #0]
 8003168:	f013 0f02 	tst.w	r3, #2
 800316c:	d0d2      	beq.n	8003114 <HAL_RCC_OscConfig+0x140>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316e:	f7ff f97b 	bl	8002468 <HAL_GetTick>
 8003172:	1b40      	subs	r0, r0, r5
 8003174:	2802      	cmp	r0, #2
 8003176:	d9f6      	bls.n	8003166 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8003178:	2003      	movs	r0, #3
 800317a:	e116      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317c:	4b3b      	ldr	r3, [pc, #236]	@ (800326c <HAL_RCC_OscConfig+0x298>)
 800317e:	2200      	movs	r2, #0
 8003180:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003184:	f7ff f970 	bl	8002468 <HAL_GetTick>
 8003188:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318a:	4e37      	ldr	r6, [pc, #220]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 800318c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800318e:	f013 0f02 	tst.w	r3, #2
 8003192:	d006      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003194:	f7ff f968 	bl	8002468 <HAL_GetTick>
 8003198:	1b40      	subs	r0, r0, r5
 800319a:	2802      	cmp	r0, #2
 800319c:	d9f6      	bls.n	800318c <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 800319e:	2003      	movs	r0, #3
 80031a0:	e103      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a2:	6823      	ldr	r3, [r4, #0]
 80031a4:	f013 0f04 	tst.w	r3, #4
 80031a8:	d076      	beq.n	8003298 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80031b2:	d133      	bne.n	800321c <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	2300      	movs	r3, #0
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80031ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031cc:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_RCC_OscConfig+0x29c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80031d6:	d023      	beq.n	8003220 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d034      	beq.n	8003248 <HAL_RCC_OscConfig+0x274>
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d038      	beq.n	8003254 <HAL_RCC_OscConfig+0x280>
 80031e2:	4b21      	ldr	r3, [pc, #132]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 80031e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	671a      	str	r2, [r3, #112]	@ 0x70
 80031ec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	68a3      	ldr	r3, [r4, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03c      	beq.n	8003274 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7ff f935 	bl	8002468 <HAL_GetTick>
 80031fe:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4f19      	ldr	r7, [pc, #100]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003208:	f013 0f02 	tst.w	r3, #2
 800320c:	d143      	bne.n	8003296 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7ff f92b 	bl	8002468 <HAL_GetTick>
 8003212:	1b80      	subs	r0, r0, r6
 8003214:	4540      	cmp	r0, r8
 8003216:	d9f6      	bls.n	8003206 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8003218:	2003      	movs	r0, #3
 800321a:	e0c6      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 800321c:	2500      	movs	r5, #0
 800321e:	e7d6      	b.n	80031ce <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003220:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_RCC_OscConfig+0x29c>)
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003228:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800322a:	f7ff f91d 	bl	8002468 <HAL_GetTick>
 800322e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4f0f      	ldr	r7, [pc, #60]	@ (8003270 <HAL_RCC_OscConfig+0x29c>)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003238:	d1ce      	bne.n	80031d8 <HAL_RCC_OscConfig+0x204>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7ff f915 	bl	8002468 <HAL_GetTick>
 800323e:	1b80      	subs	r0, r0, r6
 8003240:	2802      	cmp	r0, #2
 8003242:	d9f6      	bls.n	8003232 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8003244:	2003      	movs	r0, #3
 8003246:	e0b0      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003248:	4a07      	ldr	r2, [pc, #28]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 800324a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6713      	str	r3, [r2, #112]	@ 0x70
 8003252:	e7cf      	b.n	80031f4 <HAL_RCC_OscConfig+0x220>
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_RCC_OscConfig+0x294>)
 8003256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003258:	f042 0204 	orr.w	r2, r2, #4
 800325c:	671a      	str	r2, [r3, #112]	@ 0x70
 800325e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003260:	f042 0201 	orr.w	r2, r2, #1
 8003264:	671a      	str	r2, [r3, #112]	@ 0x70
 8003266:	e7c5      	b.n	80031f4 <HAL_RCC_OscConfig+0x220>
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7ff f8f8 	bl	8002468 <HAL_GetTick>
 8003278:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327a:	4f52      	ldr	r7, [pc, #328]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327c:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003282:	f013 0f02 	tst.w	r3, #2
 8003286:	d006      	beq.n	8003296 <HAL_RCC_OscConfig+0x2c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7ff f8ee 	bl	8002468 <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	4540      	cmp	r0, r8
 8003290:	d9f6      	bls.n	8003280 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8003292:	2003      	movs	r0, #3
 8003294:	e089      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003296:	b9ed      	cbnz	r5, 80032d4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003298:	69a3      	ldr	r3, [r4, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8084 	beq.w	80033a8 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a0:	4a48      	ldr	r2, [pc, #288]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 80032a2:	6892      	ldr	r2, [r2, #8]
 80032a4:	f002 020c 	and.w	r2, r2, #12
 80032a8:	2a08      	cmp	r2, #8
 80032aa:	d051      	beq.n	8003350 <HAL_RCC_OscConfig+0x37c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d017      	beq.n	80032e0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	4b45      	ldr	r3, [pc, #276]	@ (80033c8 <HAL_RCC_OscConfig+0x3f4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7ff f8d7 	bl	8002468 <HAL_GetTick>
 80032ba:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032bc:	4d41      	ldr	r5, [pc, #260]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 80032be:	682b      	ldr	r3, [r5, #0]
 80032c0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80032c4:	d042      	beq.n	800334c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7ff f8cf 	bl	8002468 <HAL_GetTick>
 80032ca:	1b00      	subs	r0, r0, r4
 80032cc:	2802      	cmp	r0, #2
 80032ce:	d9f6      	bls.n	80032be <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80032d0:	2003      	movs	r0, #3
 80032d2:	e06a      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4a3b      	ldr	r2, [pc, #236]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 80032d6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80032de:	e7db      	b.n	8003298 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80032e0:	4b39      	ldr	r3, [pc, #228]	@ (80033c8 <HAL_RCC_OscConfig+0x3f4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80032e6:	f7ff f8bf 	bl	8002468 <HAL_GetTick>
 80032ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ec:	4e35      	ldr	r6, [pc, #212]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 80032ee:	6833      	ldr	r3, [r6, #0]
 80032f0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80032f4:	d006      	beq.n	8003304 <HAL_RCC_OscConfig+0x330>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7ff f8b7 	bl	8002468 <HAL_GetTick>
 80032fa:	1b40      	subs	r0, r0, r5
 80032fc:	2802      	cmp	r0, #2
 80032fe:	d9f6      	bls.n	80032ee <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8003300:	2003      	movs	r0, #3
 8003302:	e052      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003304:	69e3      	ldr	r3, [r4, #28]
 8003306:	6a22      	ldr	r2, [r4, #32]
 8003308:	4313      	orrs	r3, r2
 800330a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800330c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003310:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003312:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003316:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003320:	4a28      	ldr	r2, [pc, #160]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 8003322:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b28      	ldr	r3, [pc, #160]	@ (80033c8 <HAL_RCC_OscConfig+0x3f4>)
 8003326:	2201      	movs	r2, #1
 8003328:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800332a:	f7ff f89d 	bl	8002468 <HAL_GetTick>
 800332e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	4d24      	ldr	r5, [pc, #144]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 8003332:	682b      	ldr	r3, [r5, #0]
 8003334:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x374>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333a:	f7ff f895 	bl	8002468 <HAL_GetTick>
 800333e:	1b00      	subs	r0, r0, r4
 8003340:	2802      	cmp	r0, #2
 8003342:	d9f6      	bls.n	8003332 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8003344:	2003      	movs	r0, #3
 8003346:	e030      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003348:	2000      	movs	r0, #0
 800334a:	e02e      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
 800334c:	2000      	movs	r0, #0
 800334e:	e02c      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	2b01      	cmp	r3, #1
 8003352:	d02d      	beq.n	80033b0 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8003354:	4b1b      	ldr	r3, [pc, #108]	@ (80033c4 <HAL_RCC_OscConfig+0x3f0>)
 8003356:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003358:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	69e2      	ldr	r2, [r4, #28]
 800335e:	4291      	cmp	r1, r2
 8003360:	d128      	bne.n	80033b4 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	6a21      	ldr	r1, [r4, #32]
 8003368:	428a      	cmp	r2, r1
 800336a:	d125      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336e:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003372:	401a      	ands	r2, r3
 8003374:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003378:	d120      	bne.n	80033bc <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800337e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003380:	0852      	lsrs	r2, r2, #1
 8003382:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003384:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800338a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800338c:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003394:	bf14      	ite	ne
 8003396:	2001      	movne	r0, #1
 8003398:	2000      	moveq	r0, #0
 800339a:	e006      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 800339c:	2001      	movs	r0, #1
}
 800339e:	4770      	bx	lr
        return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
 80033a2:	e002      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80033a4:	2001      	movs	r0, #1
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 80033a8:	2000      	movs	r0, #0
}
 80033aa:	b002      	add	sp, #8
 80033ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80033b0:	2001      	movs	r0, #1
 80033b2:	e7fa      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80033b4:	2001      	movs	r0, #1
 80033b6:	e7f8      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
 80033b8:	2001      	movs	r0, #1
 80033ba:	e7f6      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
 80033bc:	2001      	movs	r0, #1
 80033be:	e7f4      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
 80033c0:	2001      	movs	r0, #1
 80033c2:	e7f2      	b.n	80033aa <HAL_RCC_OscConfig+0x3d6>
 80033c4:	40023800 	.word	0x40023800
 80033c8:	42470000 	.word	0x42470000

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b508      	push	{r3, lr}
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ce:	4b26      	ldr	r3, [pc, #152]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 030c 	and.w	r3, r3, #12
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d041      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0x92>
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d141      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x96>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033de:	4b22      	ldr	r3, [pc, #136]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80033ec:	d012      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80033f6:	481d      	ldr	r0, [pc, #116]	@ (800346c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033f8:	2300      	movs	r3, #0
 80033fa:	fba1 0100 	umull	r0, r1, r1, r0
 80033fe:	f7fc ff37 	bl	8000270 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003402:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800340a:	3301      	adds	r3, #1
 800340c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800340e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003412:	e027      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x98>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003416:	6858      	ldr	r0, [r3, #4]
 8003418:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800341c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003420:	ebbc 0c00 	subs.w	ip, ip, r0
 8003424:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003428:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800342c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003430:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003434:	ebb1 010c 	subs.w	r1, r1, ip
 8003438:	eb63 030e 	sbc.w	r3, r3, lr
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003442:	00c9      	lsls	r1, r1, #3
 8003444:	eb11 0c00 	adds.w	ip, r1, r0
 8003448:	f143 0300 	adc.w	r3, r3, #0
 800344c:	0299      	lsls	r1, r3, #10
 800344e:	2300      	movs	r3, #0
 8003450:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003454:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003458:	f7fc ff0a 	bl	8000270 <__aeabi_uldivmod>
 800345c:	e7d1      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800345e:	4803      	ldr	r0, [pc, #12]	@ (800346c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003460:	e000      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSI_VALUE;
 8003462:	4803      	ldr	r0, [pc, #12]	@ (8003470 <HAL_RCC_GetSysClockFreq+0xa4>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003464:	bd08      	pop	{r3, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	017d7840 	.word	0x017d7840
 8003470:	00f42400 	.word	0x00f42400

08003474 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003474:	2800      	cmp	r0, #0
 8003476:	f000 809d 	beq.w	80035b4 <HAL_RCC_ClockConfig+0x140>
{
 800347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347e:	460d      	mov	r5, r1
 8003480:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003482:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <HAL_RCC_ClockConfig+0x150>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	428b      	cmp	r3, r1
 800348c:	d208      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	b2cb      	uxtb	r3, r1
 8003490:	4a4c      	ldr	r2, [pc, #304]	@ (80035c4 <HAL_RCC_ClockConfig+0x150>)
 8003492:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003494:	6813      	ldr	r3, [r2, #0]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	428b      	cmp	r3, r1
 800349c:	f040 808c 	bne.w	80035b8 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	f013 0f02 	tst.w	r3, #2
 80034a6:	d017      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	f013 0f04 	tst.w	r3, #4
 80034ac:	d004      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ae:	4a46      	ldr	r2, [pc, #280]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 80034b0:	6893      	ldr	r3, [r2, #8]
 80034b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034b6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	f013 0f08 	tst.w	r3, #8
 80034be:	d004      	beq.n	80034ca <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c0:	4a41      	ldr	r2, [pc, #260]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 80034c2:	6893      	ldr	r3, [r2, #8]
 80034c4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ca:	4a3f      	ldr	r2, [pc, #252]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 80034cc:	6893      	ldr	r3, [r2, #8]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034d2:	68a1      	ldr	r1, [r4, #8]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	f013 0f01 	tst.w	r3, #1
 80034de:	d032      	beq.n	8003546 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e0:	6862      	ldr	r2, [r4, #4]
 80034e2:	2a01      	cmp	r2, #1
 80034e4:	d021      	beq.n	800352a <HAL_RCC_ClockConfig+0xb6>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	1e93      	subs	r3, r2, #2
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d925      	bls.n	8003538 <HAL_RCC_ClockConfig+0xc4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ec:	4b36      	ldr	r3, [pc, #216]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f013 0f02 	tst.w	r3, #2
 80034f4:	d062      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4934      	ldr	r1, [pc, #208]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 80034f8:	688b      	ldr	r3, [r1, #8]
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003502:	f7fe ffb1 	bl	8002468 <HAL_GetTick>
 8003506:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003508:	4f2f      	ldr	r7, [pc, #188]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350a:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	f003 030c 	and.w	r3, r3, #12
 8003514:	6862      	ldr	r2, [r4, #4]
 8003516:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800351a:	d014      	beq.n	8003546 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe ffa4 	bl	8002468 <HAL_GetTick>
 8003520:	1b80      	subs	r0, r0, r6
 8003522:	4540      	cmp	r0, r8
 8003524:	d9f3      	bls.n	800350e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8003526:	2003      	movs	r0, #3
 8003528:	e042      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352a:	4b27      	ldr	r3, [pc, #156]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003532:	d1e0      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003534:	2001      	movs	r0, #1
 8003536:	e03b      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003538:	4b23      	ldr	r3, [pc, #140]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003540:	d1d9      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003542:	2001      	movs	r0, #1
 8003544:	e034      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003546:	4b1f      	ldr	r3, [pc, #124]	@ (80035c4 <HAL_RCC_ClockConfig+0x150>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	42ab      	cmp	r3, r5
 8003550:	d907      	bls.n	8003562 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	b2ea      	uxtb	r2, r5
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_ClockConfig+0x150>)
 8003556:	701a      	strb	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	42ab      	cmp	r3, r5
 8003560:	d12e      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	f013 0f04 	tst.w	r3, #4
 8003568:	d006      	beq.n	8003578 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356a:	4a17      	ldr	r2, [pc, #92]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 800356c:	6893      	ldr	r3, [r2, #8]
 800356e:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003572:	68e1      	ldr	r1, [r4, #12]
 8003574:	430b      	orrs	r3, r1
 8003576:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	f013 0f08 	tst.w	r3, #8
 800357e:	d007      	beq.n	8003590 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 8003582:	6893      	ldr	r3, [r2, #8]
 8003584:	6921      	ldr	r1, [r4, #16]
 8003586:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800358a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800358e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003590:	f7ff ff1c 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <HAL_RCC_ClockConfig+0x154>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800359c:	4a0b      	ldr	r2, [pc, #44]	@ (80035cc <HAL_RCC_ClockConfig+0x158>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	40d8      	lsrs	r0, r3
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_ClockConfig+0x15c>)
 80035a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <HAL_RCC_ClockConfig+0x160>)
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	f7fe ff11 	bl	80023d0 <HAL_InitTick>
  return HAL_OK;
 80035ae:	2000      	movs	r0, #0
}
 80035b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80035b4:	2001      	movs	r0, #1
}
 80035b6:	4770      	bx	lr
      return HAL_ERROR;
 80035b8:	2001      	movs	r0, #1
 80035ba:	e7f9      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80035bc:	2001      	movs	r0, #1
 80035be:	e7f7      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80035c0:	2001      	movs	r0, #1
 80035c2:	e7f5      	b.n	80035b0 <HAL_RCC_ClockConfig+0x13c>
 80035c4:	40023c00 	.word	0x40023c00
 80035c8:	40023800 	.word	0x40023800
 80035cc:	0800c2e0 	.word	0x0800c2e0
 80035d0:	20000078 	.word	0x20000078
 80035d4:	20000080 	.word	0x20000080

080035d8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035da:	4a45      	ldr	r2, [pc, #276]	@ (80036f0 <TIM_Base_SetConfig+0x118>)
 80035dc:	4290      	cmp	r0, r2
 80035de:	d067      	beq.n	80036b0 <TIM_Base_SetConfig+0xd8>
 80035e0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80035e4:	d031      	beq.n	800364a <TIM_Base_SetConfig+0x72>
 80035e6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80035ea:	4290      	cmp	r0, r2
 80035ec:	d056      	beq.n	800369c <TIM_Base_SetConfig+0xc4>
 80035ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035f2:	4290      	cmp	r0, r2
 80035f4:	d03b      	beq.n	800366e <TIM_Base_SetConfig+0x96>
 80035f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80035fa:	4290      	cmp	r0, r2
 80035fc:	d053      	beq.n	80036a6 <TIM_Base_SetConfig+0xce>
 80035fe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8003602:	4290      	cmp	r0, r2
 8003604:	d038      	beq.n	8003678 <TIM_Base_SetConfig+0xa0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003606:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800360a:	4290      	cmp	r0, r2
 800360c:	d021      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
 800360e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003612:	4290      	cmp	r0, r2
 8003614:	d01d      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
 8003616:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800361a:	4290      	cmp	r0, r2
 800361c:	d019      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
 800361e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8003622:	4290      	cmp	r0, r2
 8003624:	d015      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
 8003626:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800362a:	4290      	cmp	r0, r2
 800362c:	d011      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
 800362e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003632:	4290      	cmp	r0, r2
 8003634:	d00d      	beq.n	8003652 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363a:	694a      	ldr	r2, [r1, #20]
 800363c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800363e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	688b      	ldr	r3, [r1, #8]
 8003642:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	680b      	ldr	r3, [r1, #0]
 8003646:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003648:	e045      	b.n	80036d6 <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800364e:	684a      	ldr	r2, [r1, #4]
 8003650:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	68ca      	ldr	r2, [r1, #12]
 8003658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800365a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800365e:	694a      	ldr	r2, [r1, #20]
 8003660:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003662:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003664:	688b      	ldr	r3, [r1, #8]
 8003666:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003668:	680b      	ldr	r3, [r1, #0]
 800366a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800366c:	e033      	b.n	80036d6 <TIM_Base_SetConfig+0xfe>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003672:	684a      	ldr	r2, [r1, #4]
 8003674:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003676:	e7ec      	b.n	8003652 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003678:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800367c:	684a      	ldr	r2, [r1, #4]
 800367e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003684:	68ca      	ldr	r2, [r1, #12]
 8003686:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368c:	694a      	ldr	r2, [r1, #20]
 800368e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003690:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003692:	688b      	ldr	r3, [r1, #8]
 8003694:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003696:	680b      	ldr	r3, [r1, #0]
 8003698:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369a:	e01a      	b.n	80036d2 <TIM_Base_SetConfig+0xfa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036a0:	684a      	ldr	r2, [r1, #4]
 80036a2:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a4:	e7d5      	b.n	8003652 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036aa:	684a      	ldr	r2, [r1, #4]
 80036ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	e7d0      	b.n	8003652 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80036b4:	684a      	ldr	r2, [r1, #4]
 80036b6:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036bc:	68ca      	ldr	r2, [r1, #12]
 80036be:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036c4:	694a      	ldr	r2, [r1, #20]
 80036c6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80036c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ca:	688b      	ldr	r3, [r1, #8]
 80036cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ce:	680b      	ldr	r3, [r1, #0]
 80036d0:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d2:	690b      	ldr	r3, [r1, #16]
 80036d4:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036d6:	2301      	movs	r3, #1
 80036d8:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036da:	6903      	ldr	r3, [r0, #16]
 80036dc:	f013 0f01 	tst.w	r3, #1
 80036e0:	d004      	beq.n	80036ec <TIM_Base_SetConfig+0x114>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036e2:	6903      	ldr	r3, [r0, #16]
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6103      	str	r3, [r0, #16]
  }
}
 80036ea:	4770      	bx	lr
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000

080036f4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80036f4:	b340      	cbz	r0, 8003748 <HAL_TIM_Base_Init+0x54>
{
 80036f6:	b510      	push	{r4, lr}
 80036f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80036fe:	b1f3      	cbz	r3, 800373e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	2302      	movs	r3, #2
 8003702:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	4621      	mov	r1, r4
 8003708:	f851 0b04 	ldr.w	r0, [r1], #4
 800370c:	f7ff ff64 	bl	80035d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003710:	2301      	movs	r3, #1
 8003712:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800371a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800371e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003722:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800372a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800372e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003732:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003736:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800373a:	2000      	movs	r0, #0
}
 800373c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800373e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003742:	f7fe fd31 	bl	80021a8 <HAL_TIM_Base_MspInit>
 8003746:	e7db      	b.n	8003700 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003748:	2001      	movs	r0, #1
}
 800374a:	4770      	bx	lr

0800374c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800374c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003754:	430a      	orrs	r2, r1
 8003756:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800375a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375e:	6082      	str	r2, [r0, #8]
}
 8003760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_ConfigClockSource>:
{
 8003766:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003768:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	f000 80ad 	beq.w	80038cc <HAL_TIM_ConfigClockSource+0x166>
 8003772:	4604      	mov	r4, r0
 8003774:	2301      	movs	r3, #1
 8003776:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800377a:	2302      	movs	r3, #2
 800377c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003780:	6802      	ldr	r2, [r0, #0]
 8003782:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003788:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800378c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800378e:	680b      	ldr	r3, [r1, #0]
 8003790:	2b60      	cmp	r3, #96	@ 0x60
 8003792:	d060      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xf0>
 8003794:	d83d      	bhi.n	8003812 <HAL_TIM_ConfigClockSource+0xac>
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	d079      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x128>
 800379a:	d91c      	bls.n	80037d6 <HAL_TIM_ConfigClockSource+0x70>
 800379c:	2b50      	cmp	r3, #80	@ 0x50
 800379e:	d136      	bne.n	800380e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a0:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80037a4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80037a6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b0:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037b2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037b6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037ba:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80037be:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80037c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c2:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c4:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80037c6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037cc:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80037d0:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2000      	movs	r0, #0
}
 80037d4:	e012      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d002      	beq.n	80037e0 <HAL_TIM_ConfigClockSource+0x7a>
 80037da:	d90b      	bls.n	80037f4 <HAL_TIM_ConfigClockSource+0x8e>
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d114      	bne.n	800380a <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e0:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80037e2:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80037ee:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2000      	movs	r0, #0
}
 80037f2:	e003      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80037f4:	f033 0210 	bics.w	r2, r3, #16
 80037f8:	d0f2      	beq.n	80037e0 <HAL_TIM_ConfigClockSource+0x7a>
 80037fa:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003802:	2300      	movs	r3, #0
 8003804:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003808:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800380a:	2001      	movs	r0, #1
 800380c:	e7f6      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
 800380e:	2001      	movs	r0, #1
 8003810:	e7f4      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003816:	d055      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0x15e>
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d10c      	bne.n	8003838 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 800381e:	68cb      	ldr	r3, [r1, #12]
 8003820:	684a      	ldr	r2, [r1, #4]
 8003822:	6889      	ldr	r1, [r1, #8]
 8003824:	6800      	ldr	r0, [r0, #0]
 8003826:	f7ff ff91 	bl	800374c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800382a:	6822      	ldr	r2, [r4, #0]
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003832:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003834:	2000      	movs	r0, #0
      break;
 8003836:	e7e1      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003838:	2b70      	cmp	r3, #112	@ 0x70
 800383a:	d145      	bne.n	80038c8 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 800383c:	68cb      	ldr	r3, [r1, #12]
 800383e:	684a      	ldr	r2, [r1, #4]
 8003840:	6889      	ldr	r1, [r1, #8]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	f7ff ff82 	bl	800374c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800384c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003850:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003852:	2000      	movs	r0, #0
      break;
 8003854:	e7d2      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003856:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8003858:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800385c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385e:	6a19      	ldr	r1, [r3, #32]
 8003860:	f021 0110 	bic.w	r1, r1, #16
 8003864:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003868:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800386c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003870:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003874:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003878:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800387a:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800387e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003884:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003888:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2000      	movs	r0, #0
}
 800388c:	e7b6      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8003890:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003894:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80038ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80038b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ba:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80038be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	e79b      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 80038c4:	2000      	movs	r0, #0
 80038c6:	e799      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80038c8:	2001      	movs	r0, #1
 80038ca:	e797      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 80038cc:	2002      	movs	r0, #2
 80038ce:	e79b      	b.n	8003808 <HAL_TIM_ConfigClockSource+0xa2>

080038d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80038d4:	2a01      	cmp	r2, #1
 80038d6:	d03b      	beq.n	8003950 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 80038d8:	b430      	push	{r4, r5}
 80038da:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80038dc:	2201      	movs	r2, #1
 80038de:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e2:	2202      	movs	r2, #2
 80038e4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e8:	6804      	ldr	r4, [r0, #0]
 80038ea:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ec:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f2:	680d      	ldr	r5, [r1, #0]
 80038f4:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f6:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4c16      	ldr	r4, [pc, #88]	@ (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80038fc:	42a2      	cmp	r2, r4
 80038fe:	d01a      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003900:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003904:	d017      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003906:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 800390a:	42a2      	cmp	r2, r4
 800390c:	d013      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800390e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003912:	42a2      	cmp	r2, r4
 8003914:	d00f      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003916:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800391a:	42a2      	cmp	r2, r4
 800391c:	d00b      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800391e:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8003922:	42a2      	cmp	r2, r4
 8003924:	d007      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003926:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 800392a:	42a2      	cmp	r2, r4
 800392c:	d003      	beq.n	8003936 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800392e:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8003932:	42a2      	cmp	r2, r4
 8003934:	d104      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003936:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	6849      	ldr	r1, [r1, #4]
 800393c:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800393e:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003946:	2000      	movs	r0, #0
 8003948:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800394c:	bc30      	pop	{r4, r5}
 800394e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003950:	2002      	movs	r0, #2
}
 8003952:	4770      	bx	lr
 8003954:	40010000 	.word	0x40010000

08003958 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003958:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800396a:	d815      	bhi.n	8003998 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800396c:	6903      	ldr	r3, [r0, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	daf5      	bge.n	800395e <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003976:	6903      	ldr	r3, [r0, #16]
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 800397e:	9b01      	ldr	r3, [sp, #4]
 8003980:	3301      	adds	r3, #1
 8003982:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800398a:	d808      	bhi.n	800399e <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800398c:	6903      	ldr	r3, [r0, #16]
 800398e:	f013 0f01 	tst.w	r3, #1
 8003992:	d1f4      	bne.n	800397e <USB_CoreReset+0x26>

  return HAL_OK;
 8003994:	2000      	movs	r0, #0
 8003996:	e000      	b.n	800399a <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8003998:	2003      	movs	r0, #3
}
 800399a:	b002      	add	sp, #8
 800399c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800399e:	2003      	movs	r0, #3
 80039a0:	e7fb      	b.n	800399a <USB_CoreReset+0x42>

080039a2 <USB_CoreInit>:
{
 80039a2:	b084      	sub	sp, #16
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4604      	mov	r4, r0
 80039a8:	a803      	add	r0, sp, #12
 80039aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039ae:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d121      	bne.n	80039fa <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039b6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039bc:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039be:	68e3      	ldr	r3, [r4, #12]
 80039c0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80039c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039c8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80039d0:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80039d2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d00a      	beq.n	80039f0 <USB_CoreInit+0x4e>
    ret = USB_CoreReset(USBx);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7ff ffbc 	bl	8003958 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80039e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d01c      	beq.n	8003a22 <USB_CoreInit+0x80>
}
 80039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039ec:	b004      	add	sp, #16
 80039ee:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039f0:	68e3      	ldr	r3, [r4, #12]
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039f6:	60e3      	str	r3, [r4, #12]
 80039f8:	e7ef      	b.n	80039da <USB_CoreInit+0x38>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039fa:	68e3      	ldr	r3, [r4, #12]
 80039fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a00:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ffa8 	bl	8003958 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003a08:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003a0c:	b923      	cbnz	r3, 8003a18 <USB_CoreInit+0x76>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a16:	e7e3      	b.n	80039e0 <USB_CoreInit+0x3e>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003a20:	e7de      	b.n	80039e0 <USB_CoreInit+0x3e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a22:	68a3      	ldr	r3, [r4, #8]
 8003a24:	f043 0306 	orr.w	r3, r3, #6
 8003a28:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a2a:	68a3      	ldr	r3, [r4, #8]
 8003a2c:	f043 0320 	orr.w	r3, r3, #32
 8003a30:	60a3      	str	r3, [r4, #8]
 8003a32:	e7d9      	b.n	80039e8 <USB_CoreInit+0x46>

08003a34 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a34:	6883      	ldr	r3, [r0, #8]
 8003a36:	f023 0301 	bic.w	r3, r3, #1
 8003a3a:	6083      	str	r3, [r0, #8]
}
 8003a3c:	2000      	movs	r0, #0
 8003a3e:	4770      	bx	lr

08003a40 <USB_SetCurrentMode>:
{
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a44:	68c3      	ldr	r3, [r0, #12]
 8003a46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a4a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003a4c:	2901      	cmp	r1, #1
 8003a4e:	d015      	beq.n	8003a7c <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8003a50:	bb29      	cbnz	r1, 8003a9e <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a52:	68c3      	ldr	r3, [r0, #12]
 8003a54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a58:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a5a:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003a5c:	260a      	movs	r6, #10
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f7fe fd08 	bl	8002474 <HAL_Delay>
      ms += 10U;
 8003a64:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 8003a66:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a68:	f013 0f01 	tst.w	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <USB_SetCurrentMode+0x32>
 8003a6e:	2cc8      	cmp	r4, #200	@ 0xc8
 8003a70:	d1f5      	bne.n	8003a5e <USB_SetCurrentMode+0x1e>
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a72:	2cc8      	cmp	r4, #200	@ 0xc8
 8003a74:	bf14      	ite	ne
 8003a76:	2000      	movne	r0, #0
 8003a78:	2001      	moveq	r0, #1
}
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a7c:	68c3      	ldr	r3, [r0, #12]
 8003a7e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a82:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003a84:	2400      	movs	r4, #0
      HAL_Delay(10U);
 8003a86:	260a      	movs	r6, #10
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f7fe fcf3 	bl	8002474 <HAL_Delay>
      ms += 10U;
 8003a8e:	340a      	adds	r4, #10
  return ((USBx->GINTSTS) & 0x1U);
 8003a90:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a92:	f013 0f01 	tst.w	r3, #1
 8003a96:	d1ec      	bne.n	8003a72 <USB_SetCurrentMode+0x32>
 8003a98:	2cc8      	cmp	r4, #200	@ 0xc8
 8003a9a:	d1f5      	bne.n	8003a88 <USB_SetCurrentMode+0x48>
 8003a9c:	e7e9      	b.n	8003a72 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	e7eb      	b.n	8003a7a <USB_SetCurrentMode+0x3a>

08003aa2 <USB_FlushTxFifo>:
{
 8003aa2:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	9301      	str	r3, [sp, #4]
    count++;
 8003aa8:	9b01      	ldr	r3, [sp, #4]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ab4:	d815      	bhi.n	8003ae2 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ab6:	6903      	ldr	r3, [r0, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	daf5      	bge.n	8003aa8 <USB_FlushTxFifo+0x6>
  count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ac0:	0189      	lsls	r1, r1, #6
 8003ac2:	f041 0120 	orr.w	r1, r1, #32
 8003ac6:	6101      	str	r1, [r0, #16]
    count++;
 8003ac8:	9b01      	ldr	r3, [sp, #4]
 8003aca:	3301      	adds	r3, #1
 8003acc:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ad4:	d808      	bhi.n	8003ae8 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ad6:	6903      	ldr	r3, [r0, #16]
 8003ad8:	f013 0f20 	tst.w	r3, #32
 8003adc:	d1f4      	bne.n	8003ac8 <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e000      	b.n	8003ae4 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003ae2:	2003      	movs	r0, #3
}
 8003ae4:	b002      	add	sp, #8
 8003ae6:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003ae8:	2003      	movs	r0, #3
 8003aea:	e7fb      	b.n	8003ae4 <USB_FlushTxFifo+0x42>

08003aec <USB_FlushRxFifo>:
{
 8003aec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	9301      	str	r3, [sp, #4]
    count++;
 8003af2:	9b01      	ldr	r3, [sp, #4]
 8003af4:	3301      	adds	r3, #1
 8003af6:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003af8:	9b01      	ldr	r3, [sp, #4]
 8003afa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003afe:	d813      	bhi.n	8003b28 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b00:	6903      	ldr	r3, [r0, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	daf5      	bge.n	8003af2 <USB_FlushRxFifo+0x6>
  count = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	6103      	str	r3, [r0, #16]
    count++;
 8003b0e:	9b01      	ldr	r3, [sp, #4]
 8003b10:	3301      	adds	r3, #1
 8003b12:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8003b14:	9b01      	ldr	r3, [sp, #4]
 8003b16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b1a:	d808      	bhi.n	8003b2e <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b1c:	6903      	ldr	r3, [r0, #16]
 8003b1e:	f013 0f10 	tst.w	r3, #16
 8003b22:	d1f4      	bne.n	8003b0e <USB_FlushRxFifo+0x22>
  return HAL_OK;
 8003b24:	2000      	movs	r0, #0
 8003b26:	e000      	b.n	8003b2a <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8003b28:	2003      	movs	r0, #3
}
 8003b2a:	b002      	add	sp, #8
 8003b2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003b2e:	2003      	movs	r0, #3
 8003b30:	e7fb      	b.n	8003b2a <USB_FlushRxFifo+0x3e>
	...

08003b34 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	4604      	mov	r4, r0
 8003b3a:	a805      	add	r0, sp, #20
 8003b3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003b40:	f89d 5015 	ldrb.w	r5, [sp, #21]
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c4 3e00 	str.w	r3, [r4, #3584]	@ 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003b4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b50:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b52:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003b54:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003b58:	63a3      	str	r3, [r4, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b5a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003b5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b60:	63a3      	str	r3, [r4, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8003b62:	68e3      	ldr	r3, [r4, #12]
 8003b64:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003b68:	d145      	bne.n	8003bf6 <USB_HostInit+0xc2>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003b6a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003b6e:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003b70:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8003b74:	bf0c      	ite	eq
 8003b76:	f043 0304 	orreq.w	r3, r3, #4
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003b7a:	f023 0304 	bicne.w	r3, r3, #4
 8003b7e:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b82:	2110      	movs	r1, #16
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff ff8c 	bl	8003aa2 <USB_FlushTxFifo>
 8003b8a:	4606      	mov	r6, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7ff ffad 	bl	8003aec <USB_FlushRxFifo>
 8003b92:	4306      	orrs	r6, r0
 8003b94:	f016 0fff 	tst.w	r6, #255	@ 0xff
 8003b98:	bf14      	ite	ne
 8003b9a:	2001      	movne	r0, #1
 8003b9c:	2000      	moveq	r0, #0
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003b9e:	b15d      	cbz	r5, 8003bb8 <USB_HostInit+0x84>
 8003ba0:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8003ba4:	2200      	movs	r2, #0
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003ba6:	f04f 36ff 	mov.w	r6, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003baa:	4611      	mov	r1, r2
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8003bac:	609e      	str	r6, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003bae:	60d9      	str	r1, [r3, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003bb0:	3201      	adds	r2, #1
 8003bb2:	3320      	adds	r3, #32
 8003bb4:	42aa      	cmp	r2, r5
 8003bb6:	d1f9      	bne.n	8003bac <USB_HostInit+0x78>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8003bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc0:	6163      	str	r3, [r4, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8003bc2:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <USB_HostInit+0xe4>)
 8003bc4:	429c      	cmp	r4, r3
 8003bc6:	d01d      	beq.n	8003c04 <USB_HostInit+0xd0>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	6263      	str	r3, [r4, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003bcc:	f503 03c0 	add.w	r3, r3, #6291456	@ 0x600000
 8003bd0:	62a3      	str	r3, [r4, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <USB_HostInit+0xe8>)
 8003bd4:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bd8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003bdc:	b91b      	cbnz	r3, 8003be6 <USB_HostInit+0xb2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bde:	69a3      	ldr	r3, [r4, #24]
 8003be0:	f043 0310 	orr.w	r3, r3, #16
 8003be4:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003be6:	69a2      	ldr	r2, [r4, #24]
 8003be8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <USB_HostInit+0xec>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8003bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003bf2:	b004      	add	sp, #16
 8003bf4:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003bf6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	@ 0x400
 8003bfa:	f023 0304 	bic.w	r3, r3, #4
 8003bfe:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
 8003c02:	e7be      	b.n	8003b82 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x200U;
 8003c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003c0a:	f102 7280 	add.w	r2, r2, #16777216	@ 0x1000000
 8003c0e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003c10:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <USB_HostInit+0xf0>)
 8003c12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8003c16:	e7df      	b.n	8003bd8 <USB_HostInit+0xa4>
 8003c18:	40040000 	.word	0x40040000
 8003c1c:	004000e0 	.word	0x004000e0
 8003c20:	a3200008 	.word	0xa3200008
 8003c24:	00e00300 	.word	0x00e00300

08003c28 <srand>:
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <srand+0x44>)
 8003c2c:	681d      	ldr	r5, [r3, #0]
 8003c2e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c30:	4604      	mov	r4, r0
 8003c32:	b9b3      	cbnz	r3, 8003c62 <srand+0x3a>
 8003c34:	2018      	movs	r0, #24
 8003c36:	f000 fb41 	bl	80042bc <malloc>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	6328      	str	r0, [r5, #48]	@ 0x30
 8003c3e:	b920      	cbnz	r0, 8003c4a <srand+0x22>
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <srand+0x48>)
 8003c42:	480c      	ldr	r0, [pc, #48]	@ (8003c74 <srand+0x4c>)
 8003c44:	2146      	movs	r1, #70	@ 0x46
 8003c46:	f000 fad1 	bl	80041ec <__assert_func>
 8003c4a:	490b      	ldr	r1, [pc, #44]	@ (8003c78 <srand+0x50>)
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <srand+0x54>)
 8003c4e:	e9c0 1300 	strd	r1, r3, [r0]
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <srand+0x58>)
 8003c54:	6083      	str	r3, [r0, #8]
 8003c56:	230b      	movs	r3, #11
 8003c58:	8183      	strh	r3, [r0, #12]
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003c62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003c64:	2200      	movs	r2, #0
 8003c66:	611c      	str	r4, [r3, #16]
 8003c68:	615a      	str	r2, [r3, #20]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	20000090 	.word	0x20000090
 8003c70:	0800c2f0 	.word	0x0800c2f0
 8003c74:	0800c307 	.word	0x0800c307
 8003c78:	abcd330e 	.word	0xabcd330e
 8003c7c:	e66d1234 	.word	0xe66d1234
 8003c80:	0005deec 	.word	0x0005deec

08003c84 <std>:
 8003c84:	2300      	movs	r3, #0
 8003c86:	b510      	push	{r4, lr}
 8003c88:	4604      	mov	r4, r0
 8003c8a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c92:	6083      	str	r3, [r0, #8]
 8003c94:	8181      	strh	r1, [r0, #12]
 8003c96:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c98:	81c2      	strh	r2, [r0, #14]
 8003c9a:	6183      	str	r3, [r0, #24]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	2208      	movs	r2, #8
 8003ca0:	305c      	adds	r0, #92	@ 0x5c
 8003ca2:	f000 f9f9 	bl	8004098 <memset>
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <std+0x58>)
 8003ca8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <std+0x5c>)
 8003cac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <std+0x60>)
 8003cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <std+0x64>)
 8003cb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cec <std+0x68>)
 8003cb8:	6224      	str	r4, [r4, #32]
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	d006      	beq.n	8003ccc <std+0x48>
 8003cbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003cc2:	4294      	cmp	r4, r2
 8003cc4:	d002      	beq.n	8003ccc <std+0x48>
 8003cc6:	33d0      	adds	r3, #208	@ 0xd0
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	d105      	bne.n	8003cd8 <std+0x54>
 8003ccc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd4:	f000 ba86 	b.w	80041e4 <__retarget_lock_init_recursive>
 8003cd8:	bd10      	pop	{r4, pc}
 8003cda:	bf00      	nop
 8003cdc:	08003ee9 	.word	0x08003ee9
 8003ce0:	08003f0b 	.word	0x08003f0b
 8003ce4:	08003f43 	.word	0x08003f43
 8003ce8:	08003f67 	.word	0x08003f67
 8003cec:	200005fc 	.word	0x200005fc

08003cf0 <stdio_exit_handler>:
 8003cf0:	4a02      	ldr	r2, [pc, #8]	@ (8003cfc <stdio_exit_handler+0xc>)
 8003cf2:	4903      	ldr	r1, [pc, #12]	@ (8003d00 <stdio_exit_handler+0x10>)
 8003cf4:	4803      	ldr	r0, [pc, #12]	@ (8003d04 <stdio_exit_handler+0x14>)
 8003cf6:	f000 b869 	b.w	8003dcc <_fwalk_sglue>
 8003cfa:	bf00      	nop
 8003cfc:	20000084 	.word	0x20000084
 8003d00:	08004ad1 	.word	0x08004ad1
 8003d04:	20000094 	.word	0x20000094

08003d08 <cleanup_stdio>:
 8003d08:	6841      	ldr	r1, [r0, #4]
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d3c <cleanup_stdio+0x34>)
 8003d0c:	4299      	cmp	r1, r3
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	4604      	mov	r4, r0
 8003d12:	d001      	beq.n	8003d18 <cleanup_stdio+0x10>
 8003d14:	f000 fedc 	bl	8004ad0 <_fflush_r>
 8003d18:	68a1      	ldr	r1, [r4, #8]
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <cleanup_stdio+0x38>)
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	d002      	beq.n	8003d26 <cleanup_stdio+0x1e>
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 fed5 	bl	8004ad0 <_fflush_r>
 8003d26:	68e1      	ldr	r1, [r4, #12]
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <cleanup_stdio+0x3c>)
 8003d2a:	4299      	cmp	r1, r3
 8003d2c:	d004      	beq.n	8003d38 <cleanup_stdio+0x30>
 8003d2e:	4620      	mov	r0, r4
 8003d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d34:	f000 becc 	b.w	8004ad0 <_fflush_r>
 8003d38:	bd10      	pop	{r4, pc}
 8003d3a:	bf00      	nop
 8003d3c:	200005fc 	.word	0x200005fc
 8003d40:	20000664 	.word	0x20000664
 8003d44:	200006cc 	.word	0x200006cc

08003d48 <global_stdio_init.part.0>:
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <global_stdio_init.part.0+0x30>)
 8003d4c:	4c0b      	ldr	r4, [pc, #44]	@ (8003d7c <global_stdio_init.part.0+0x34>)
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d80 <global_stdio_init.part.0+0x38>)
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	4620      	mov	r0, r4
 8003d54:	2200      	movs	r2, #0
 8003d56:	2104      	movs	r1, #4
 8003d58:	f7ff ff94 	bl	8003c84 <std>
 8003d5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003d60:	2201      	movs	r2, #1
 8003d62:	2109      	movs	r1, #9
 8003d64:	f7ff ff8e 	bl	8003c84 <std>
 8003d68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d72:	2112      	movs	r1, #18
 8003d74:	f7ff bf86 	b.w	8003c84 <std>
 8003d78:	20000734 	.word	0x20000734
 8003d7c:	200005fc 	.word	0x200005fc
 8003d80:	08003cf1 	.word	0x08003cf1

08003d84 <__sfp_lock_acquire>:
 8003d84:	4801      	ldr	r0, [pc, #4]	@ (8003d8c <__sfp_lock_acquire+0x8>)
 8003d86:	f000 ba2e 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	2000073d 	.word	0x2000073d

08003d90 <__sfp_lock_release>:
 8003d90:	4801      	ldr	r0, [pc, #4]	@ (8003d98 <__sfp_lock_release+0x8>)
 8003d92:	f000 ba29 	b.w	80041e8 <__retarget_lock_release_recursive>
 8003d96:	bf00      	nop
 8003d98:	2000073d 	.word	0x2000073d

08003d9c <__sinit>:
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	4604      	mov	r4, r0
 8003da0:	f7ff fff0 	bl	8003d84 <__sfp_lock_acquire>
 8003da4:	6a23      	ldr	r3, [r4, #32]
 8003da6:	b11b      	cbz	r3, 8003db0 <__sinit+0x14>
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	f7ff bff0 	b.w	8003d90 <__sfp_lock_release>
 8003db0:	4b04      	ldr	r3, [pc, #16]	@ (8003dc4 <__sinit+0x28>)
 8003db2:	6223      	str	r3, [r4, #32]
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <__sinit+0x2c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f5      	bne.n	8003da8 <__sinit+0xc>
 8003dbc:	f7ff ffc4 	bl	8003d48 <global_stdio_init.part.0>
 8003dc0:	e7f2      	b.n	8003da8 <__sinit+0xc>
 8003dc2:	bf00      	nop
 8003dc4:	08003d09 	.word	0x08003d09
 8003dc8:	20000734 	.word	0x20000734

08003dcc <_fwalk_sglue>:
 8003dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	4688      	mov	r8, r1
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ddc:	f1b9 0901 	subs.w	r9, r9, #1
 8003de0:	d505      	bpl.n	8003dee <_fwalk_sglue+0x22>
 8003de2:	6824      	ldr	r4, [r4, #0]
 8003de4:	2c00      	cmp	r4, #0
 8003de6:	d1f7      	bne.n	8003dd8 <_fwalk_sglue+0xc>
 8003de8:	4630      	mov	r0, r6
 8003dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dee:	89ab      	ldrh	r3, [r5, #12]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d907      	bls.n	8003e04 <_fwalk_sglue+0x38>
 8003df4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	d003      	beq.n	8003e04 <_fwalk_sglue+0x38>
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	4638      	mov	r0, r7
 8003e00:	47c0      	blx	r8
 8003e02:	4306      	orrs	r6, r0
 8003e04:	3568      	adds	r5, #104	@ 0x68
 8003e06:	e7e9      	b.n	8003ddc <_fwalk_sglue+0x10>

08003e08 <iprintf>:
 8003e08:	b40f      	push	{r0, r1, r2, r3}
 8003e0a:	b507      	push	{r0, r1, r2, lr}
 8003e0c:	4906      	ldr	r1, [pc, #24]	@ (8003e28 <iprintf+0x20>)
 8003e0e:	ab04      	add	r3, sp, #16
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e16:	6881      	ldr	r1, [r0, #8]
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	f000 fb2f 	bl	800447c <_vfiprintf_r>
 8003e1e:	b003      	add	sp, #12
 8003e20:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e24:	b004      	add	sp, #16
 8003e26:	4770      	bx	lr
 8003e28:	20000090 	.word	0x20000090

08003e2c <_puts_r>:
 8003e2c:	6a03      	ldr	r3, [r0, #32]
 8003e2e:	b570      	push	{r4, r5, r6, lr}
 8003e30:	6884      	ldr	r4, [r0, #8]
 8003e32:	4605      	mov	r5, r0
 8003e34:	460e      	mov	r6, r1
 8003e36:	b90b      	cbnz	r3, 8003e3c <_puts_r+0x10>
 8003e38:	f7ff ffb0 	bl	8003d9c <__sinit>
 8003e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e3e:	07db      	lsls	r3, r3, #31
 8003e40:	d405      	bmi.n	8003e4e <_puts_r+0x22>
 8003e42:	89a3      	ldrh	r3, [r4, #12]
 8003e44:	0598      	lsls	r0, r3, #22
 8003e46:	d402      	bmi.n	8003e4e <_puts_r+0x22>
 8003e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e4a:	f000 f9cc 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	0719      	lsls	r1, r3, #28
 8003e52:	d502      	bpl.n	8003e5a <_puts_r+0x2e>
 8003e54:	6923      	ldr	r3, [r4, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d135      	bne.n	8003ec6 <_puts_r+0x9a>
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 f8c5 	bl	8003fec <__swsetup_r>
 8003e62:	b380      	cbz	r0, 8003ec6 <_puts_r+0x9a>
 8003e64:	f04f 35ff 	mov.w	r5, #4294967295
 8003e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e6a:	07da      	lsls	r2, r3, #31
 8003e6c:	d405      	bmi.n	8003e7a <_puts_r+0x4e>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	059b      	lsls	r3, r3, #22
 8003e72:	d402      	bmi.n	8003e7a <_puts_r+0x4e>
 8003e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e76:	f000 f9b7 	bl	80041e8 <__retarget_lock_release_recursive>
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	bd70      	pop	{r4, r5, r6, pc}
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da04      	bge.n	8003e8c <_puts_r+0x60>
 8003e82:	69a2      	ldr	r2, [r4, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	dc17      	bgt.n	8003eb8 <_puts_r+0x8c>
 8003e88:	290a      	cmp	r1, #10
 8003e8a:	d015      	beq.n	8003eb8 <_puts_r+0x8c>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	6022      	str	r2, [r4, #0]
 8003e92:	7019      	strb	r1, [r3, #0]
 8003e94:	68a3      	ldr	r3, [r4, #8]
 8003e96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	60a3      	str	r3, [r4, #8]
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d1ed      	bne.n	8003e7e <_puts_r+0x52>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	da11      	bge.n	8003eca <_puts_r+0x9e>
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	210a      	movs	r1, #10
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f000 f85f 	bl	8003f6e <__swbuf_r>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0d7      	beq.n	8003e64 <_puts_r+0x38>
 8003eb4:	250a      	movs	r5, #10
 8003eb6:	e7d7      	b.n	8003e68 <_puts_r+0x3c>
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 f857 	bl	8003f6e <__swbuf_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d1e7      	bne.n	8003e94 <_puts_r+0x68>
 8003ec4:	e7ce      	b.n	8003e64 <_puts_r+0x38>
 8003ec6:	3e01      	subs	r6, #1
 8003ec8:	e7e4      	b.n	8003e94 <_puts_r+0x68>
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	6022      	str	r2, [r4, #0]
 8003ed0:	220a      	movs	r2, #10
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	e7ee      	b.n	8003eb4 <_puts_r+0x88>
	...

08003ed8 <puts>:
 8003ed8:	4b02      	ldr	r3, [pc, #8]	@ (8003ee4 <puts+0xc>)
 8003eda:	4601      	mov	r1, r0
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	f7ff bfa5 	b.w	8003e2c <_puts_r>
 8003ee2:	bf00      	nop
 8003ee4:	20000090 	.word	0x20000090

08003ee8 <__sread>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	460c      	mov	r4, r1
 8003eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef0:	f000 f92a 	bl	8004148 <_read_r>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	bfab      	itete	ge
 8003ef8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003efa:	89a3      	ldrhlt	r3, [r4, #12]
 8003efc:	181b      	addge	r3, r3, r0
 8003efe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f02:	bfac      	ite	ge
 8003f04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f06:	81a3      	strhlt	r3, [r4, #12]
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <__swrite>:
 8003f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0e:	461f      	mov	r7, r3
 8003f10:	898b      	ldrh	r3, [r1, #12]
 8003f12:	05db      	lsls	r3, r3, #23
 8003f14:	4605      	mov	r5, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	4616      	mov	r6, r2
 8003f1a:	d505      	bpl.n	8003f28 <__swrite+0x1e>
 8003f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f20:	2302      	movs	r3, #2
 8003f22:	2200      	movs	r2, #0
 8003f24:	f000 f8fe 	bl	8004124 <_lseek_r>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	4632      	mov	r2, r6
 8003f36:	463b      	mov	r3, r7
 8003f38:	4628      	mov	r0, r5
 8003f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3e:	f000 b915 	b.w	800416c <_write_r>

08003f42 <__sseek>:
 8003f42:	b510      	push	{r4, lr}
 8003f44:	460c      	mov	r4, r1
 8003f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4a:	f000 f8eb 	bl	8004124 <_lseek_r>
 8003f4e:	1c43      	adds	r3, r0, #1
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	bf15      	itete	ne
 8003f54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f5e:	81a3      	strheq	r3, [r4, #12]
 8003f60:	bf18      	it	ne
 8003f62:	81a3      	strhne	r3, [r4, #12]
 8003f64:	bd10      	pop	{r4, pc}

08003f66 <__sclose>:
 8003f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6a:	f000 b8b9 	b.w	80040e0 <_close_r>

08003f6e <__swbuf_r>:
 8003f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f70:	460e      	mov	r6, r1
 8003f72:	4614      	mov	r4, r2
 8003f74:	4605      	mov	r5, r0
 8003f76:	b118      	cbz	r0, 8003f80 <__swbuf_r+0x12>
 8003f78:	6a03      	ldr	r3, [r0, #32]
 8003f7a:	b90b      	cbnz	r3, 8003f80 <__swbuf_r+0x12>
 8003f7c:	f7ff ff0e 	bl	8003d9c <__sinit>
 8003f80:	69a3      	ldr	r3, [r4, #24]
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	89a3      	ldrh	r3, [r4, #12]
 8003f86:	071a      	lsls	r2, r3, #28
 8003f88:	d501      	bpl.n	8003f8e <__swbuf_r+0x20>
 8003f8a:	6923      	ldr	r3, [r4, #16]
 8003f8c:	b943      	cbnz	r3, 8003fa0 <__swbuf_r+0x32>
 8003f8e:	4621      	mov	r1, r4
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 f82b 	bl	8003fec <__swsetup_r>
 8003f96:	b118      	cbz	r0, 8003fa0 <__swbuf_r+0x32>
 8003f98:	f04f 37ff 	mov.w	r7, #4294967295
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	6922      	ldr	r2, [r4, #16]
 8003fa4:	1a98      	subs	r0, r3, r2
 8003fa6:	6963      	ldr	r3, [r4, #20]
 8003fa8:	b2f6      	uxtb	r6, r6
 8003faa:	4283      	cmp	r3, r0
 8003fac:	4637      	mov	r7, r6
 8003fae:	dc05      	bgt.n	8003fbc <__swbuf_r+0x4e>
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	f000 fd8c 	bl	8004ad0 <_fflush_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	d1ed      	bne.n	8003f98 <__swbuf_r+0x2a>
 8003fbc:	68a3      	ldr	r3, [r4, #8]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	60a3      	str	r3, [r4, #8]
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	6022      	str	r2, [r4, #0]
 8003fc8:	701e      	strb	r6, [r3, #0]
 8003fca:	6962      	ldr	r2, [r4, #20]
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d004      	beq.n	8003fdc <__swbuf_r+0x6e>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d5e1      	bpl.n	8003f9c <__swbuf_r+0x2e>
 8003fd8:	2e0a      	cmp	r6, #10
 8003fda:	d1df      	bne.n	8003f9c <__swbuf_r+0x2e>
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f000 fd76 	bl	8004ad0 <_fflush_r>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d0d9      	beq.n	8003f9c <__swbuf_r+0x2e>
 8003fe8:	e7d6      	b.n	8003f98 <__swbuf_r+0x2a>
	...

08003fec <__swsetup_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4b29      	ldr	r3, [pc, #164]	@ (8004094 <__swsetup_r+0xa8>)
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	b118      	cbz	r0, 8004000 <__swsetup_r+0x14>
 8003ff8:	6a03      	ldr	r3, [r0, #32]
 8003ffa:	b90b      	cbnz	r3, 8004000 <__swsetup_r+0x14>
 8003ffc:	f7ff fece 	bl	8003d9c <__sinit>
 8004000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004004:	0719      	lsls	r1, r3, #28
 8004006:	d422      	bmi.n	800404e <__swsetup_r+0x62>
 8004008:	06da      	lsls	r2, r3, #27
 800400a:	d407      	bmi.n	800401c <__swsetup_r+0x30>
 800400c:	2209      	movs	r2, #9
 800400e:	602a      	str	r2, [r5, #0]
 8004010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	e033      	b.n	8004084 <__swsetup_r+0x98>
 800401c:	0758      	lsls	r0, r3, #29
 800401e:	d512      	bpl.n	8004046 <__swsetup_r+0x5a>
 8004020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004022:	b141      	cbz	r1, 8004036 <__swsetup_r+0x4a>
 8004024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <__swsetup_r+0x46>
 800402c:	4628      	mov	r0, r5
 800402e:	f000 f8fb 	bl	8004228 <_free_r>
 8004032:	2300      	movs	r3, #0
 8004034:	6363      	str	r3, [r4, #52]	@ 0x34
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	2300      	movs	r3, #0
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	b94b      	cbnz	r3, 8004066 <__swsetup_r+0x7a>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800405c:	d003      	beq.n	8004066 <__swsetup_r+0x7a>
 800405e:	4621      	mov	r1, r4
 8004060:	4628      	mov	r0, r5
 8004062:	f000 fd95 	bl	8004b90 <__smakebuf_r>
 8004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406a:	f013 0201 	ands.w	r2, r3, #1
 800406e:	d00a      	beq.n	8004086 <__swsetup_r+0x9a>
 8004070:	2200      	movs	r2, #0
 8004072:	60a2      	str	r2, [r4, #8]
 8004074:	6962      	ldr	r2, [r4, #20]
 8004076:	4252      	negs	r2, r2
 8004078:	61a2      	str	r2, [r4, #24]
 800407a:	6922      	ldr	r2, [r4, #16]
 800407c:	b942      	cbnz	r2, 8004090 <__swsetup_r+0xa4>
 800407e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004082:	d1c5      	bne.n	8004010 <__swsetup_r+0x24>
 8004084:	bd38      	pop	{r3, r4, r5, pc}
 8004086:	0799      	lsls	r1, r3, #30
 8004088:	bf58      	it	pl
 800408a:	6962      	ldrpl	r2, [r4, #20]
 800408c:	60a2      	str	r2, [r4, #8]
 800408e:	e7f4      	b.n	800407a <__swsetup_r+0x8e>
 8004090:	2000      	movs	r0, #0
 8004092:	e7f7      	b.n	8004084 <__swsetup_r+0x98>
 8004094:	20000090 	.word	0x20000090

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <time>:
 80040a8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <time+0x34>)
 80040ac:	f04f 36ff 	mov.w	r6, #4294967295
 80040b0:	f04f 37ff 	mov.w	r7, #4294967295
 80040b4:	4669      	mov	r1, sp
 80040b6:	4604      	mov	r4, r0
 80040b8:	2200      	movs	r2, #0
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	e9cd 6700 	strd	r6, r7, [sp]
 80040c0:	f000 f81e 	bl	8004100 <_gettimeofday_r>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	bfb8      	it	lt
 80040c8:	e9cd 6700 	strdlt	r6, r7, [sp]
 80040cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040d0:	b10c      	cbz	r4, 80040d6 <time+0x2e>
 80040d2:	e9c4 0100 	strd	r0, r1, [r4]
 80040d6:	b004      	add	sp, #16
 80040d8:	bdd0      	pop	{r4, r6, r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000090 	.word	0x20000090

080040e0 <_close_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d06      	ldr	r5, [pc, #24]	@ (80040fc <_close_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fe f90c 	bl	8002308 <_close>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_close_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_close_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000738 	.word	0x20000738

08004100 <_gettimeofday_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4d07      	ldr	r5, [pc, #28]	@ (8004120 <_gettimeofday_r+0x20>)
 8004104:	2300      	movs	r3, #0
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	f000 fdf9 	bl	8004d04 <_gettimeofday>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d102      	bne.n	800411c <_gettimeofday_r+0x1c>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	b103      	cbz	r3, 800411c <_gettimeofday_r+0x1c>
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	20000738 	.word	0x20000738

08004124 <_lseek_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	4d07      	ldr	r5, [pc, #28]	@ (8004144 <_lseek_r+0x20>)
 8004128:	4604      	mov	r4, r0
 800412a:	4608      	mov	r0, r1
 800412c:	4611      	mov	r1, r2
 800412e:	2200      	movs	r2, #0
 8004130:	602a      	str	r2, [r5, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	f7fe f8f2 	bl	800231c <_lseek>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_lseek_r+0x1e>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_lseek_r+0x1e>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000738 	.word	0x20000738

08004148 <_read_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	@ (8004168 <_read_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fe f8bc 	bl	80022d4 <_read>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_read_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_read_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000738 	.word	0x20000738

0800416c <_write_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	@ (800418c <_write_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fe f8b7 	bl	80022ee <_write>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_write_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_write_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20000738 	.word	0x20000738

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	@ (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000090 	.word	0x20000090

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	@ (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	@ (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	@ (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	@ (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 fdb0 	bl	8004d14 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	0800c3d8 	.word	0x0800c3d8
 80041d8:	0800c3d8 	.word	0x0800c3d8
 80041dc:	0800c3d8 	.word	0x0800c3d8
 80041e0:	0800c3dc 	.word	0x0800c3dc

080041e4 <__retarget_lock_init_recursive>:
 80041e4:	4770      	bx	lr

080041e6 <__retarget_lock_acquire_recursive>:
 80041e6:	4770      	bx	lr

080041e8 <__retarget_lock_release_recursive>:
 80041e8:	4770      	bx	lr
	...

080041ec <__assert_func>:
 80041ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041ee:	4614      	mov	r4, r2
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <__assert_func+0x2c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4605      	mov	r5, r0
 80041f8:	68d8      	ldr	r0, [r3, #12]
 80041fa:	b954      	cbnz	r4, 8004212 <__assert_func+0x26>
 80041fc:	4b07      	ldr	r3, [pc, #28]	@ (800421c <__assert_func+0x30>)
 80041fe:	461c      	mov	r4, r3
 8004200:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004204:	9100      	str	r1, [sp, #0]
 8004206:	462b      	mov	r3, r5
 8004208:	4905      	ldr	r1, [pc, #20]	@ (8004220 <__assert_func+0x34>)
 800420a:	f000 fc89 	bl	8004b20 <fiprintf>
 800420e:	f000 fd2d 	bl	8004c6c <abort>
 8004212:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <__assert_func+0x38>)
 8004214:	e7f4      	b.n	8004200 <__assert_func+0x14>
 8004216:	bf00      	nop
 8004218:	20000090 	.word	0x20000090
 800421c:	0800c39a 	.word	0x0800c39a
 8004220:	0800c36c 	.word	0x0800c36c
 8004224:	0800c35f 	.word	0x0800c35f

08004228 <_free_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4605      	mov	r5, r0
 800422c:	2900      	cmp	r1, #0
 800422e:	d041      	beq.n	80042b4 <_free_r+0x8c>
 8004230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004234:	1f0c      	subs	r4, r1, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	bfb8      	it	lt
 800423a:	18e4      	addlt	r4, r4, r3
 800423c:	f000 f8e8 	bl	8004410 <__malloc_lock>
 8004240:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <_free_r+0x90>)
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	b933      	cbnz	r3, 8004254 <_free_r+0x2c>
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	6014      	str	r4, [r2, #0]
 800424a:	4628      	mov	r0, r5
 800424c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004250:	f000 b8e4 	b.w	800441c <__malloc_unlock>
 8004254:	42a3      	cmp	r3, r4
 8004256:	d908      	bls.n	800426a <_free_r+0x42>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	1821      	adds	r1, r4, r0
 800425c:	428b      	cmp	r3, r1
 800425e:	bf01      	itttt	eq
 8004260:	6819      	ldreq	r1, [r3, #0]
 8004262:	685b      	ldreq	r3, [r3, #4]
 8004264:	1809      	addeq	r1, r1, r0
 8004266:	6021      	streq	r1, [r4, #0]
 8004268:	e7ed      	b.n	8004246 <_free_r+0x1e>
 800426a:	461a      	mov	r2, r3
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b10b      	cbz	r3, 8004274 <_free_r+0x4c>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d9fa      	bls.n	800426a <_free_r+0x42>
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	1850      	adds	r0, r2, r1
 8004278:	42a0      	cmp	r0, r4
 800427a:	d10b      	bne.n	8004294 <_free_r+0x6c>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	4401      	add	r1, r0
 8004280:	1850      	adds	r0, r2, r1
 8004282:	4283      	cmp	r3, r0
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	d1e0      	bne.n	800424a <_free_r+0x22>
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	6053      	str	r3, [r2, #4]
 800428e:	4408      	add	r0, r1
 8004290:	6010      	str	r0, [r2, #0]
 8004292:	e7da      	b.n	800424a <_free_r+0x22>
 8004294:	d902      	bls.n	800429c <_free_r+0x74>
 8004296:	230c      	movs	r3, #12
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	e7d6      	b.n	800424a <_free_r+0x22>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	1821      	adds	r1, r4, r0
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf04      	itt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	bf04      	itt	eq
 80042ac:	1809      	addeq	r1, r1, r0
 80042ae:	6021      	streq	r1, [r4, #0]
 80042b0:	6054      	str	r4, [r2, #4]
 80042b2:	e7ca      	b.n	800424a <_free_r+0x22>
 80042b4:	bd38      	pop	{r3, r4, r5, pc}
 80042b6:	bf00      	nop
 80042b8:	20000744 	.word	0x20000744

080042bc <malloc>:
 80042bc:	4b02      	ldr	r3, [pc, #8]	@ (80042c8 <malloc+0xc>)
 80042be:	4601      	mov	r1, r0
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f000 b825 	b.w	8004310 <_malloc_r>
 80042c6:	bf00      	nop
 80042c8:	20000090 	.word	0x20000090

080042cc <sbrk_aligned>:
 80042cc:	b570      	push	{r4, r5, r6, lr}
 80042ce:	4e0f      	ldr	r6, [pc, #60]	@ (800430c <sbrk_aligned+0x40>)
 80042d0:	460c      	mov	r4, r1
 80042d2:	6831      	ldr	r1, [r6, #0]
 80042d4:	4605      	mov	r5, r0
 80042d6:	b911      	cbnz	r1, 80042de <sbrk_aligned+0x12>
 80042d8:	f000 fcb8 	bl	8004c4c <_sbrk_r>
 80042dc:	6030      	str	r0, [r6, #0]
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f000 fcb3 	bl	8004c4c <_sbrk_r>
 80042e6:	1c43      	adds	r3, r0, #1
 80042e8:	d103      	bne.n	80042f2 <sbrk_aligned+0x26>
 80042ea:	f04f 34ff 	mov.w	r4, #4294967295
 80042ee:	4620      	mov	r0, r4
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
 80042f2:	1cc4      	adds	r4, r0, #3
 80042f4:	f024 0403 	bic.w	r4, r4, #3
 80042f8:	42a0      	cmp	r0, r4
 80042fa:	d0f8      	beq.n	80042ee <sbrk_aligned+0x22>
 80042fc:	1a21      	subs	r1, r4, r0
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 fca4 	bl	8004c4c <_sbrk_r>
 8004304:	3001      	adds	r0, #1
 8004306:	d1f2      	bne.n	80042ee <sbrk_aligned+0x22>
 8004308:	e7ef      	b.n	80042ea <sbrk_aligned+0x1e>
 800430a:	bf00      	nop
 800430c:	20000740 	.word	0x20000740

08004310 <_malloc_r>:
 8004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004314:	1ccd      	adds	r5, r1, #3
 8004316:	f025 0503 	bic.w	r5, r5, #3
 800431a:	3508      	adds	r5, #8
 800431c:	2d0c      	cmp	r5, #12
 800431e:	bf38      	it	cc
 8004320:	250c      	movcc	r5, #12
 8004322:	2d00      	cmp	r5, #0
 8004324:	4606      	mov	r6, r0
 8004326:	db01      	blt.n	800432c <_malloc_r+0x1c>
 8004328:	42a9      	cmp	r1, r5
 800432a:	d904      	bls.n	8004336 <_malloc_r+0x26>
 800432c:	230c      	movs	r3, #12
 800432e:	6033      	str	r3, [r6, #0]
 8004330:	2000      	movs	r0, #0
 8004332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004336:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800440c <_malloc_r+0xfc>
 800433a:	f000 f869 	bl	8004410 <__malloc_lock>
 800433e:	f8d8 3000 	ldr.w	r3, [r8]
 8004342:	461c      	mov	r4, r3
 8004344:	bb44      	cbnz	r4, 8004398 <_malloc_r+0x88>
 8004346:	4629      	mov	r1, r5
 8004348:	4630      	mov	r0, r6
 800434a:	f7ff ffbf 	bl	80042cc <sbrk_aligned>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	4604      	mov	r4, r0
 8004352:	d158      	bne.n	8004406 <_malloc_r+0xf6>
 8004354:	f8d8 4000 	ldr.w	r4, [r8]
 8004358:	4627      	mov	r7, r4
 800435a:	2f00      	cmp	r7, #0
 800435c:	d143      	bne.n	80043e6 <_malloc_r+0xd6>
 800435e:	2c00      	cmp	r4, #0
 8004360:	d04b      	beq.n	80043fa <_malloc_r+0xea>
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	4639      	mov	r1, r7
 8004366:	4630      	mov	r0, r6
 8004368:	eb04 0903 	add.w	r9, r4, r3
 800436c:	f000 fc6e 	bl	8004c4c <_sbrk_r>
 8004370:	4581      	cmp	r9, r0
 8004372:	d142      	bne.n	80043fa <_malloc_r+0xea>
 8004374:	6821      	ldr	r1, [r4, #0]
 8004376:	1a6d      	subs	r5, r5, r1
 8004378:	4629      	mov	r1, r5
 800437a:	4630      	mov	r0, r6
 800437c:	f7ff ffa6 	bl	80042cc <sbrk_aligned>
 8004380:	3001      	adds	r0, #1
 8004382:	d03a      	beq.n	80043fa <_malloc_r+0xea>
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	442b      	add	r3, r5
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	f8d8 3000 	ldr.w	r3, [r8]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	bb62      	cbnz	r2, 80043ec <_malloc_r+0xdc>
 8004392:	f8c8 7000 	str.w	r7, [r8]
 8004396:	e00f      	b.n	80043b8 <_malloc_r+0xa8>
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	1b52      	subs	r2, r2, r5
 800439c:	d420      	bmi.n	80043e0 <_malloc_r+0xd0>
 800439e:	2a0b      	cmp	r2, #11
 80043a0:	d917      	bls.n	80043d2 <_malloc_r+0xc2>
 80043a2:	1961      	adds	r1, r4, r5
 80043a4:	42a3      	cmp	r3, r4
 80043a6:	6025      	str	r5, [r4, #0]
 80043a8:	bf18      	it	ne
 80043aa:	6059      	strne	r1, [r3, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	bf08      	it	eq
 80043b0:	f8c8 1000 	streq.w	r1, [r8]
 80043b4:	5162      	str	r2, [r4, r5]
 80043b6:	604b      	str	r3, [r1, #4]
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 f82f 	bl	800441c <__malloc_unlock>
 80043be:	f104 000b 	add.w	r0, r4, #11
 80043c2:	1d23      	adds	r3, r4, #4
 80043c4:	f020 0007 	bic.w	r0, r0, #7
 80043c8:	1ac2      	subs	r2, r0, r3
 80043ca:	bf1c      	itt	ne
 80043cc:	1a1b      	subne	r3, r3, r0
 80043ce:	50a3      	strne	r3, [r4, r2]
 80043d0:	e7af      	b.n	8004332 <_malloc_r+0x22>
 80043d2:	6862      	ldr	r2, [r4, #4]
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	bf0c      	ite	eq
 80043d8:	f8c8 2000 	streq.w	r2, [r8]
 80043dc:	605a      	strne	r2, [r3, #4]
 80043de:	e7eb      	b.n	80043b8 <_malloc_r+0xa8>
 80043e0:	4623      	mov	r3, r4
 80043e2:	6864      	ldr	r4, [r4, #4]
 80043e4:	e7ae      	b.n	8004344 <_malloc_r+0x34>
 80043e6:	463c      	mov	r4, r7
 80043e8:	687f      	ldr	r7, [r7, #4]
 80043ea:	e7b6      	b.n	800435a <_malloc_r+0x4a>
 80043ec:	461a      	mov	r2, r3
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	42a3      	cmp	r3, r4
 80043f2:	d1fb      	bne.n	80043ec <_malloc_r+0xdc>
 80043f4:	2300      	movs	r3, #0
 80043f6:	6053      	str	r3, [r2, #4]
 80043f8:	e7de      	b.n	80043b8 <_malloc_r+0xa8>
 80043fa:	230c      	movs	r3, #12
 80043fc:	6033      	str	r3, [r6, #0]
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 f80c 	bl	800441c <__malloc_unlock>
 8004404:	e794      	b.n	8004330 <_malloc_r+0x20>
 8004406:	6005      	str	r5, [r0, #0]
 8004408:	e7d6      	b.n	80043b8 <_malloc_r+0xa8>
 800440a:	bf00      	nop
 800440c:	20000744 	.word	0x20000744

08004410 <__malloc_lock>:
 8004410:	4801      	ldr	r0, [pc, #4]	@ (8004418 <__malloc_lock+0x8>)
 8004412:	f7ff bee8 	b.w	80041e6 <__retarget_lock_acquire_recursive>
 8004416:	bf00      	nop
 8004418:	2000073c 	.word	0x2000073c

0800441c <__malloc_unlock>:
 800441c:	4801      	ldr	r0, [pc, #4]	@ (8004424 <__malloc_unlock+0x8>)
 800441e:	f7ff bee3 	b.w	80041e8 <__retarget_lock_release_recursive>
 8004422:	bf00      	nop
 8004424:	2000073c 	.word	0x2000073c

08004428 <__sfputc_r>:
 8004428:	6893      	ldr	r3, [r2, #8]
 800442a:	3b01      	subs	r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	b410      	push	{r4}
 8004430:	6093      	str	r3, [r2, #8]
 8004432:	da08      	bge.n	8004446 <__sfputc_r+0x1e>
 8004434:	6994      	ldr	r4, [r2, #24]
 8004436:	42a3      	cmp	r3, r4
 8004438:	db01      	blt.n	800443e <__sfputc_r+0x16>
 800443a:	290a      	cmp	r1, #10
 800443c:	d103      	bne.n	8004446 <__sfputc_r+0x1e>
 800443e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004442:	f7ff bd94 	b.w	8003f6e <__swbuf_r>
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	1c58      	adds	r0, r3, #1
 800444a:	6010      	str	r0, [r2, #0]
 800444c:	7019      	strb	r1, [r3, #0]
 800444e:	4608      	mov	r0, r1
 8004450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004454:	4770      	bx	lr

08004456 <__sfputs_r>:
 8004456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004458:	4606      	mov	r6, r0
 800445a:	460f      	mov	r7, r1
 800445c:	4614      	mov	r4, r2
 800445e:	18d5      	adds	r5, r2, r3
 8004460:	42ac      	cmp	r4, r5
 8004462:	d101      	bne.n	8004468 <__sfputs_r+0x12>
 8004464:	2000      	movs	r0, #0
 8004466:	e007      	b.n	8004478 <__sfputs_r+0x22>
 8004468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446c:	463a      	mov	r2, r7
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ffda 	bl	8004428 <__sfputc_r>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d1f3      	bne.n	8004460 <__sfputs_r+0xa>
 8004478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800447c <_vfiprintf_r>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	460d      	mov	r5, r1
 8004482:	b09d      	sub	sp, #116	@ 0x74
 8004484:	4614      	mov	r4, r2
 8004486:	4698      	mov	r8, r3
 8004488:	4606      	mov	r6, r0
 800448a:	b118      	cbz	r0, 8004494 <_vfiprintf_r+0x18>
 800448c:	6a03      	ldr	r3, [r0, #32]
 800448e:	b90b      	cbnz	r3, 8004494 <_vfiprintf_r+0x18>
 8004490:	f7ff fc84 	bl	8003d9c <__sinit>
 8004494:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004496:	07d9      	lsls	r1, r3, #31
 8004498:	d405      	bmi.n	80044a6 <_vfiprintf_r+0x2a>
 800449a:	89ab      	ldrh	r3, [r5, #12]
 800449c:	059a      	lsls	r2, r3, #22
 800449e:	d402      	bmi.n	80044a6 <_vfiprintf_r+0x2a>
 80044a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044a2:	f7ff fea0 	bl	80041e6 <__retarget_lock_acquire_recursive>
 80044a6:	89ab      	ldrh	r3, [r5, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	d501      	bpl.n	80044b0 <_vfiprintf_r+0x34>
 80044ac:	692b      	ldr	r3, [r5, #16]
 80044ae:	b99b      	cbnz	r3, 80044d8 <_vfiprintf_r+0x5c>
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff fd9a 	bl	8003fec <__swsetup_r>
 80044b8:	b170      	cbz	r0, 80044d8 <_vfiprintf_r+0x5c>
 80044ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80044bc:	07dc      	lsls	r4, r3, #31
 80044be:	d504      	bpl.n	80044ca <_vfiprintf_r+0x4e>
 80044c0:	f04f 30ff 	mov.w	r0, #4294967295
 80044c4:	b01d      	add	sp, #116	@ 0x74
 80044c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	0598      	lsls	r0, r3, #22
 80044ce:	d4f7      	bmi.n	80044c0 <_vfiprintf_r+0x44>
 80044d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044d2:	f7ff fe89 	bl	80041e8 <__retarget_lock_release_recursive>
 80044d6:	e7f3      	b.n	80044c0 <_vfiprintf_r+0x44>
 80044d8:	2300      	movs	r3, #0
 80044da:	9309      	str	r3, [sp, #36]	@ 0x24
 80044dc:	2320      	movs	r3, #32
 80044de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e6:	2330      	movs	r3, #48	@ 0x30
 80044e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004698 <_vfiprintf_r+0x21c>
 80044ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044f0:	f04f 0901 	mov.w	r9, #1
 80044f4:	4623      	mov	r3, r4
 80044f6:	469a      	mov	sl, r3
 80044f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fc:	b10a      	cbz	r2, 8004502 <_vfiprintf_r+0x86>
 80044fe:	2a25      	cmp	r2, #37	@ 0x25
 8004500:	d1f9      	bne.n	80044f6 <_vfiprintf_r+0x7a>
 8004502:	ebba 0b04 	subs.w	fp, sl, r4
 8004506:	d00b      	beq.n	8004520 <_vfiprintf_r+0xa4>
 8004508:	465b      	mov	r3, fp
 800450a:	4622      	mov	r2, r4
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff ffa1 	bl	8004456 <__sfputs_r>
 8004514:	3001      	adds	r0, #1
 8004516:	f000 80a7 	beq.w	8004668 <_vfiprintf_r+0x1ec>
 800451a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800451c:	445a      	add	r2, fp
 800451e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004520:	f89a 3000 	ldrb.w	r3, [sl]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 809f 	beq.w	8004668 <_vfiprintf_r+0x1ec>
 800452a:	2300      	movs	r3, #0
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004534:	f10a 0a01 	add.w	sl, sl, #1
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	9307      	str	r3, [sp, #28]
 800453c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004540:	931a      	str	r3, [sp, #104]	@ 0x68
 8004542:	4654      	mov	r4, sl
 8004544:	2205      	movs	r2, #5
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	4853      	ldr	r0, [pc, #332]	@ (8004698 <_vfiprintf_r+0x21c>)
 800454c:	f7fb fe40 	bl	80001d0 <memchr>
 8004550:	9a04      	ldr	r2, [sp, #16]
 8004552:	b9d8      	cbnz	r0, 800458c <_vfiprintf_r+0x110>
 8004554:	06d1      	lsls	r1, r2, #27
 8004556:	bf44      	itt	mi
 8004558:	2320      	movmi	r3, #32
 800455a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800455e:	0713      	lsls	r3, r2, #28
 8004560:	bf44      	itt	mi
 8004562:	232b      	movmi	r3, #43	@ 0x2b
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004568:	f89a 3000 	ldrb.w	r3, [sl]
 800456c:	2b2a      	cmp	r3, #42	@ 0x2a
 800456e:	d015      	beq.n	800459c <_vfiprintf_r+0x120>
 8004570:	9a07      	ldr	r2, [sp, #28]
 8004572:	4654      	mov	r4, sl
 8004574:	2000      	movs	r0, #0
 8004576:	f04f 0c0a 	mov.w	ip, #10
 800457a:	4621      	mov	r1, r4
 800457c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004580:	3b30      	subs	r3, #48	@ 0x30
 8004582:	2b09      	cmp	r3, #9
 8004584:	d94b      	bls.n	800461e <_vfiprintf_r+0x1a2>
 8004586:	b1b0      	cbz	r0, 80045b6 <_vfiprintf_r+0x13a>
 8004588:	9207      	str	r2, [sp, #28]
 800458a:	e014      	b.n	80045b6 <_vfiprintf_r+0x13a>
 800458c:	eba0 0308 	sub.w	r3, r0, r8
 8004590:	fa09 f303 	lsl.w	r3, r9, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	46a2      	mov	sl, r4
 800459a:	e7d2      	b.n	8004542 <_vfiprintf_r+0xc6>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	1d19      	adds	r1, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	9103      	str	r1, [sp, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bfbb      	ittet	lt
 80045a8:	425b      	neglt	r3, r3
 80045aa:	f042 0202 	orrlt.w	r2, r2, #2
 80045ae:	9307      	strge	r3, [sp, #28]
 80045b0:	9307      	strlt	r3, [sp, #28]
 80045b2:	bfb8      	it	lt
 80045b4:	9204      	strlt	r2, [sp, #16]
 80045b6:	7823      	ldrb	r3, [r4, #0]
 80045b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80045ba:	d10a      	bne.n	80045d2 <_vfiprintf_r+0x156>
 80045bc:	7863      	ldrb	r3, [r4, #1]
 80045be:	2b2a      	cmp	r3, #42	@ 0x2a
 80045c0:	d132      	bne.n	8004628 <_vfiprintf_r+0x1ac>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	1d1a      	adds	r2, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	9203      	str	r2, [sp, #12]
 80045ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045ce:	3402      	adds	r4, #2
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80046a8 <_vfiprintf_r+0x22c>
 80045d6:	7821      	ldrb	r1, [r4, #0]
 80045d8:	2203      	movs	r2, #3
 80045da:	4650      	mov	r0, sl
 80045dc:	f7fb fdf8 	bl	80001d0 <memchr>
 80045e0:	b138      	cbz	r0, 80045f2 <_vfiprintf_r+0x176>
 80045e2:	9b04      	ldr	r3, [sp, #16]
 80045e4:	eba0 000a 	sub.w	r0, r0, sl
 80045e8:	2240      	movs	r2, #64	@ 0x40
 80045ea:	4082      	lsls	r2, r0
 80045ec:	4313      	orrs	r3, r2
 80045ee:	3401      	adds	r4, #1
 80045f0:	9304      	str	r3, [sp, #16]
 80045f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f6:	4829      	ldr	r0, [pc, #164]	@ (800469c <_vfiprintf_r+0x220>)
 80045f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045fc:	2206      	movs	r2, #6
 80045fe:	f7fb fde7 	bl	80001d0 <memchr>
 8004602:	2800      	cmp	r0, #0
 8004604:	d03f      	beq.n	8004686 <_vfiprintf_r+0x20a>
 8004606:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <_vfiprintf_r+0x224>)
 8004608:	bb1b      	cbnz	r3, 8004652 <_vfiprintf_r+0x1d6>
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	3307      	adds	r3, #7
 800460e:	f023 0307 	bic.w	r3, r3, #7
 8004612:	3308      	adds	r3, #8
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004618:	443b      	add	r3, r7
 800461a:	9309      	str	r3, [sp, #36]	@ 0x24
 800461c:	e76a      	b.n	80044f4 <_vfiprintf_r+0x78>
 800461e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004622:	460c      	mov	r4, r1
 8004624:	2001      	movs	r0, #1
 8004626:	e7a8      	b.n	800457a <_vfiprintf_r+0xfe>
 8004628:	2300      	movs	r3, #0
 800462a:	3401      	adds	r4, #1
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	4619      	mov	r1, r3
 8004630:	f04f 0c0a 	mov.w	ip, #10
 8004634:	4620      	mov	r0, r4
 8004636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800463a:	3a30      	subs	r2, #48	@ 0x30
 800463c:	2a09      	cmp	r2, #9
 800463e:	d903      	bls.n	8004648 <_vfiprintf_r+0x1cc>
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0c6      	beq.n	80045d2 <_vfiprintf_r+0x156>
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	e7c4      	b.n	80045d2 <_vfiprintf_r+0x156>
 8004648:	fb0c 2101 	mla	r1, ip, r1, r2
 800464c:	4604      	mov	r4, r0
 800464e:	2301      	movs	r3, #1
 8004650:	e7f0      	b.n	8004634 <_vfiprintf_r+0x1b8>
 8004652:	ab03      	add	r3, sp, #12
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	462a      	mov	r2, r5
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <_vfiprintf_r+0x228>)
 800465a:	a904      	add	r1, sp, #16
 800465c:	4630      	mov	r0, r6
 800465e:	f3af 8000 	nop.w
 8004662:	4607      	mov	r7, r0
 8004664:	1c78      	adds	r0, r7, #1
 8004666:	d1d6      	bne.n	8004616 <_vfiprintf_r+0x19a>
 8004668:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800466a:	07d9      	lsls	r1, r3, #31
 800466c:	d405      	bmi.n	800467a <_vfiprintf_r+0x1fe>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	059a      	lsls	r2, r3, #22
 8004672:	d402      	bmi.n	800467a <_vfiprintf_r+0x1fe>
 8004674:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004676:	f7ff fdb7 	bl	80041e8 <__retarget_lock_release_recursive>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	065b      	lsls	r3, r3, #25
 800467e:	f53f af1f 	bmi.w	80044c0 <_vfiprintf_r+0x44>
 8004682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004684:	e71e      	b.n	80044c4 <_vfiprintf_r+0x48>
 8004686:	ab03      	add	r3, sp, #12
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	462a      	mov	r2, r5
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <_vfiprintf_r+0x228>)
 800468e:	a904      	add	r1, sp, #16
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f879 	bl	8004788 <_printf_i>
 8004696:	e7e4      	b.n	8004662 <_vfiprintf_r+0x1e6>
 8004698:	0800c39b 	.word	0x0800c39b
 800469c:	0800c3a5 	.word	0x0800c3a5
 80046a0:	00000000 	.word	0x00000000
 80046a4:	08004457 	.word	0x08004457
 80046a8:	0800c3a1 	.word	0x0800c3a1

080046ac <_printf_common>:
 80046ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b0:	4616      	mov	r6, r2
 80046b2:	4698      	mov	r8, r3
 80046b4:	688a      	ldr	r2, [r1, #8]
 80046b6:	690b      	ldr	r3, [r1, #16]
 80046b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80046bc:	4293      	cmp	r3, r2
 80046be:	bfb8      	it	lt
 80046c0:	4613      	movlt	r3, r2
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80046c8:	4607      	mov	r7, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	b10a      	cbz	r2, 80046d2 <_printf_common+0x26>
 80046ce:	3301      	adds	r3, #1
 80046d0:	6033      	str	r3, [r6, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	0699      	lsls	r1, r3, #26
 80046d6:	bf42      	ittt	mi
 80046d8:	6833      	ldrmi	r3, [r6, #0]
 80046da:	3302      	addmi	r3, #2
 80046dc:	6033      	strmi	r3, [r6, #0]
 80046de:	6825      	ldr	r5, [r4, #0]
 80046e0:	f015 0506 	ands.w	r5, r5, #6
 80046e4:	d106      	bne.n	80046f4 <_printf_common+0x48>
 80046e6:	f104 0a19 	add.w	sl, r4, #25
 80046ea:	68e3      	ldr	r3, [r4, #12]
 80046ec:	6832      	ldr	r2, [r6, #0]
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	42ab      	cmp	r3, r5
 80046f2:	dc26      	bgt.n	8004742 <_printf_common+0x96>
 80046f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046f8:	6822      	ldr	r2, [r4, #0]
 80046fa:	3b00      	subs	r3, #0
 80046fc:	bf18      	it	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	0692      	lsls	r2, r2, #26
 8004702:	d42b      	bmi.n	800475c <_printf_common+0xb0>
 8004704:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004708:	4641      	mov	r1, r8
 800470a:	4638      	mov	r0, r7
 800470c:	47c8      	blx	r9
 800470e:	3001      	adds	r0, #1
 8004710:	d01e      	beq.n	8004750 <_printf_common+0xa4>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6922      	ldr	r2, [r4, #16]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	2b04      	cmp	r3, #4
 800471c:	bf02      	ittt	eq
 800471e:	68e5      	ldreq	r5, [r4, #12]
 8004720:	6833      	ldreq	r3, [r6, #0]
 8004722:	1aed      	subeq	r5, r5, r3
 8004724:	68a3      	ldr	r3, [r4, #8]
 8004726:	bf0c      	ite	eq
 8004728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800472c:	2500      	movne	r5, #0
 800472e:	4293      	cmp	r3, r2
 8004730:	bfc4      	itt	gt
 8004732:	1a9b      	subgt	r3, r3, r2
 8004734:	18ed      	addgt	r5, r5, r3
 8004736:	2600      	movs	r6, #0
 8004738:	341a      	adds	r4, #26
 800473a:	42b5      	cmp	r5, r6
 800473c:	d11a      	bne.n	8004774 <_printf_common+0xc8>
 800473e:	2000      	movs	r0, #0
 8004740:	e008      	b.n	8004754 <_printf_common+0xa8>
 8004742:	2301      	movs	r3, #1
 8004744:	4652      	mov	r2, sl
 8004746:	4641      	mov	r1, r8
 8004748:	4638      	mov	r0, r7
 800474a:	47c8      	blx	r9
 800474c:	3001      	adds	r0, #1
 800474e:	d103      	bne.n	8004758 <_printf_common+0xac>
 8004750:	f04f 30ff 	mov.w	r0, #4294967295
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	3501      	adds	r5, #1
 800475a:	e7c6      	b.n	80046ea <_printf_common+0x3e>
 800475c:	18e1      	adds	r1, r4, r3
 800475e:	1c5a      	adds	r2, r3, #1
 8004760:	2030      	movs	r0, #48	@ 0x30
 8004762:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004766:	4422      	add	r2, r4
 8004768:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800476c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004770:	3302      	adds	r3, #2
 8004772:	e7c7      	b.n	8004704 <_printf_common+0x58>
 8004774:	2301      	movs	r3, #1
 8004776:	4622      	mov	r2, r4
 8004778:	4641      	mov	r1, r8
 800477a:	4638      	mov	r0, r7
 800477c:	47c8      	blx	r9
 800477e:	3001      	adds	r0, #1
 8004780:	d0e6      	beq.n	8004750 <_printf_common+0xa4>
 8004782:	3601      	adds	r6, #1
 8004784:	e7d9      	b.n	800473a <_printf_common+0x8e>
	...

08004788 <_printf_i>:
 8004788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	7e0f      	ldrb	r7, [r1, #24]
 800478e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004790:	2f78      	cmp	r7, #120	@ 0x78
 8004792:	4691      	mov	r9, r2
 8004794:	4680      	mov	r8, r0
 8004796:	460c      	mov	r4, r1
 8004798:	469a      	mov	sl, r3
 800479a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800479e:	d807      	bhi.n	80047b0 <_printf_i+0x28>
 80047a0:	2f62      	cmp	r7, #98	@ 0x62
 80047a2:	d80a      	bhi.n	80047ba <_printf_i+0x32>
 80047a4:	2f00      	cmp	r7, #0
 80047a6:	f000 80d2 	beq.w	800494e <_printf_i+0x1c6>
 80047aa:	2f58      	cmp	r7, #88	@ 0x58
 80047ac:	f000 80b9 	beq.w	8004922 <_printf_i+0x19a>
 80047b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80047b8:	e03a      	b.n	8004830 <_printf_i+0xa8>
 80047ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80047be:	2b15      	cmp	r3, #21
 80047c0:	d8f6      	bhi.n	80047b0 <_printf_i+0x28>
 80047c2:	a101      	add	r1, pc, #4	@ (adr r1, 80047c8 <_printf_i+0x40>)
 80047c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047c8:	08004821 	.word	0x08004821
 80047cc:	08004835 	.word	0x08004835
 80047d0:	080047b1 	.word	0x080047b1
 80047d4:	080047b1 	.word	0x080047b1
 80047d8:	080047b1 	.word	0x080047b1
 80047dc:	080047b1 	.word	0x080047b1
 80047e0:	08004835 	.word	0x08004835
 80047e4:	080047b1 	.word	0x080047b1
 80047e8:	080047b1 	.word	0x080047b1
 80047ec:	080047b1 	.word	0x080047b1
 80047f0:	080047b1 	.word	0x080047b1
 80047f4:	08004935 	.word	0x08004935
 80047f8:	0800485f 	.word	0x0800485f
 80047fc:	080048ef 	.word	0x080048ef
 8004800:	080047b1 	.word	0x080047b1
 8004804:	080047b1 	.word	0x080047b1
 8004808:	08004957 	.word	0x08004957
 800480c:	080047b1 	.word	0x080047b1
 8004810:	0800485f 	.word	0x0800485f
 8004814:	080047b1 	.word	0x080047b1
 8004818:	080047b1 	.word	0x080047b1
 800481c:	080048f7 	.word	0x080048f7
 8004820:	6833      	ldr	r3, [r6, #0]
 8004822:	1d1a      	adds	r2, r3, #4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6032      	str	r2, [r6, #0]
 8004828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800482c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004830:	2301      	movs	r3, #1
 8004832:	e09d      	b.n	8004970 <_printf_i+0x1e8>
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	6820      	ldr	r0, [r4, #0]
 8004838:	1d19      	adds	r1, r3, #4
 800483a:	6031      	str	r1, [r6, #0]
 800483c:	0606      	lsls	r6, r0, #24
 800483e:	d501      	bpl.n	8004844 <_printf_i+0xbc>
 8004840:	681d      	ldr	r5, [r3, #0]
 8004842:	e003      	b.n	800484c <_printf_i+0xc4>
 8004844:	0645      	lsls	r5, r0, #25
 8004846:	d5fb      	bpl.n	8004840 <_printf_i+0xb8>
 8004848:	f9b3 5000 	ldrsh.w	r5, [r3]
 800484c:	2d00      	cmp	r5, #0
 800484e:	da03      	bge.n	8004858 <_printf_i+0xd0>
 8004850:	232d      	movs	r3, #45	@ 0x2d
 8004852:	426d      	negs	r5, r5
 8004854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004858:	4859      	ldr	r0, [pc, #356]	@ (80049c0 <_printf_i+0x238>)
 800485a:	230a      	movs	r3, #10
 800485c:	e011      	b.n	8004882 <_printf_i+0xfa>
 800485e:	6821      	ldr	r1, [r4, #0]
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	0608      	lsls	r0, r1, #24
 8004864:	f853 5b04 	ldr.w	r5, [r3], #4
 8004868:	d402      	bmi.n	8004870 <_printf_i+0xe8>
 800486a:	0649      	lsls	r1, r1, #25
 800486c:	bf48      	it	mi
 800486e:	b2ad      	uxthmi	r5, r5
 8004870:	2f6f      	cmp	r7, #111	@ 0x6f
 8004872:	4853      	ldr	r0, [pc, #332]	@ (80049c0 <_printf_i+0x238>)
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	bf14      	ite	ne
 8004878:	230a      	movne	r3, #10
 800487a:	2308      	moveq	r3, #8
 800487c:	2100      	movs	r1, #0
 800487e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004882:	6866      	ldr	r6, [r4, #4]
 8004884:	60a6      	str	r6, [r4, #8]
 8004886:	2e00      	cmp	r6, #0
 8004888:	bfa2      	ittt	ge
 800488a:	6821      	ldrge	r1, [r4, #0]
 800488c:	f021 0104 	bicge.w	r1, r1, #4
 8004890:	6021      	strge	r1, [r4, #0]
 8004892:	b90d      	cbnz	r5, 8004898 <_printf_i+0x110>
 8004894:	2e00      	cmp	r6, #0
 8004896:	d04b      	beq.n	8004930 <_printf_i+0x1a8>
 8004898:	4616      	mov	r6, r2
 800489a:	fbb5 f1f3 	udiv	r1, r5, r3
 800489e:	fb03 5711 	mls	r7, r3, r1, r5
 80048a2:	5dc7      	ldrb	r7, [r0, r7]
 80048a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048a8:	462f      	mov	r7, r5
 80048aa:	42bb      	cmp	r3, r7
 80048ac:	460d      	mov	r5, r1
 80048ae:	d9f4      	bls.n	800489a <_printf_i+0x112>
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10b      	bne.n	80048cc <_printf_i+0x144>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	07df      	lsls	r7, r3, #31
 80048b8:	d508      	bpl.n	80048cc <_printf_i+0x144>
 80048ba:	6923      	ldr	r3, [r4, #16]
 80048bc:	6861      	ldr	r1, [r4, #4]
 80048be:	4299      	cmp	r1, r3
 80048c0:	bfde      	ittt	le
 80048c2:	2330      	movle	r3, #48	@ 0x30
 80048c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048cc:	1b92      	subs	r2, r2, r6
 80048ce:	6122      	str	r2, [r4, #16]
 80048d0:	f8cd a000 	str.w	sl, [sp]
 80048d4:	464b      	mov	r3, r9
 80048d6:	aa03      	add	r2, sp, #12
 80048d8:	4621      	mov	r1, r4
 80048da:	4640      	mov	r0, r8
 80048dc:	f7ff fee6 	bl	80046ac <_printf_common>
 80048e0:	3001      	adds	r0, #1
 80048e2:	d14a      	bne.n	800497a <_printf_i+0x1f2>
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	b004      	add	sp, #16
 80048ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	f043 0320 	orr.w	r3, r3, #32
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	4833      	ldr	r0, [pc, #204]	@ (80049c4 <_printf_i+0x23c>)
 80048f8:	2778      	movs	r7, #120	@ 0x78
 80048fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	6831      	ldr	r1, [r6, #0]
 8004902:	061f      	lsls	r7, r3, #24
 8004904:	f851 5b04 	ldr.w	r5, [r1], #4
 8004908:	d402      	bmi.n	8004910 <_printf_i+0x188>
 800490a:	065f      	lsls	r7, r3, #25
 800490c:	bf48      	it	mi
 800490e:	b2ad      	uxthmi	r5, r5
 8004910:	6031      	str	r1, [r6, #0]
 8004912:	07d9      	lsls	r1, r3, #31
 8004914:	bf44      	itt	mi
 8004916:	f043 0320 	orrmi.w	r3, r3, #32
 800491a:	6023      	strmi	r3, [r4, #0]
 800491c:	b11d      	cbz	r5, 8004926 <_printf_i+0x19e>
 800491e:	2310      	movs	r3, #16
 8004920:	e7ac      	b.n	800487c <_printf_i+0xf4>
 8004922:	4827      	ldr	r0, [pc, #156]	@ (80049c0 <_printf_i+0x238>)
 8004924:	e7e9      	b.n	80048fa <_printf_i+0x172>
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	f023 0320 	bic.w	r3, r3, #32
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	e7f6      	b.n	800491e <_printf_i+0x196>
 8004930:	4616      	mov	r6, r2
 8004932:	e7bd      	b.n	80048b0 <_printf_i+0x128>
 8004934:	6833      	ldr	r3, [r6, #0]
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	6961      	ldr	r1, [r4, #20]
 800493a:	1d18      	adds	r0, r3, #4
 800493c:	6030      	str	r0, [r6, #0]
 800493e:	062e      	lsls	r6, r5, #24
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	d501      	bpl.n	8004948 <_printf_i+0x1c0>
 8004944:	6019      	str	r1, [r3, #0]
 8004946:	e002      	b.n	800494e <_printf_i+0x1c6>
 8004948:	0668      	lsls	r0, r5, #25
 800494a:	d5fb      	bpl.n	8004944 <_printf_i+0x1bc>
 800494c:	8019      	strh	r1, [r3, #0]
 800494e:	2300      	movs	r3, #0
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	4616      	mov	r6, r2
 8004954:	e7bc      	b.n	80048d0 <_printf_i+0x148>
 8004956:	6833      	ldr	r3, [r6, #0]
 8004958:	1d1a      	adds	r2, r3, #4
 800495a:	6032      	str	r2, [r6, #0]
 800495c:	681e      	ldr	r6, [r3, #0]
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	2100      	movs	r1, #0
 8004962:	4630      	mov	r0, r6
 8004964:	f7fb fc34 	bl	80001d0 <memchr>
 8004968:	b108      	cbz	r0, 800496e <_printf_i+0x1e6>
 800496a:	1b80      	subs	r0, r0, r6
 800496c:	6060      	str	r0, [r4, #4]
 800496e:	6863      	ldr	r3, [r4, #4]
 8004970:	6123      	str	r3, [r4, #16]
 8004972:	2300      	movs	r3, #0
 8004974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004978:	e7aa      	b.n	80048d0 <_printf_i+0x148>
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	4632      	mov	r2, r6
 800497e:	4649      	mov	r1, r9
 8004980:	4640      	mov	r0, r8
 8004982:	47d0      	blx	sl
 8004984:	3001      	adds	r0, #1
 8004986:	d0ad      	beq.n	80048e4 <_printf_i+0x15c>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	079b      	lsls	r3, r3, #30
 800498c:	d413      	bmi.n	80049b6 <_printf_i+0x22e>
 800498e:	68e0      	ldr	r0, [r4, #12]
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	4298      	cmp	r0, r3
 8004994:	bfb8      	it	lt
 8004996:	4618      	movlt	r0, r3
 8004998:	e7a6      	b.n	80048e8 <_printf_i+0x160>
 800499a:	2301      	movs	r3, #1
 800499c:	4632      	mov	r2, r6
 800499e:	4649      	mov	r1, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	47d0      	blx	sl
 80049a4:	3001      	adds	r0, #1
 80049a6:	d09d      	beq.n	80048e4 <_printf_i+0x15c>
 80049a8:	3501      	adds	r5, #1
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	9903      	ldr	r1, [sp, #12]
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dcf2      	bgt.n	800499a <_printf_i+0x212>
 80049b4:	e7eb      	b.n	800498e <_printf_i+0x206>
 80049b6:	2500      	movs	r5, #0
 80049b8:	f104 0619 	add.w	r6, r4, #25
 80049bc:	e7f5      	b.n	80049aa <_printf_i+0x222>
 80049be:	bf00      	nop
 80049c0:	0800c3ac 	.word	0x0800c3ac
 80049c4:	0800c3bd 	.word	0x0800c3bd

080049c8 <__sflush_r>:
 80049c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d0:	0716      	lsls	r6, r2, #28
 80049d2:	4605      	mov	r5, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	d454      	bmi.n	8004a82 <__sflush_r+0xba>
 80049d8:	684b      	ldr	r3, [r1, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	dc02      	bgt.n	80049e4 <__sflush_r+0x1c>
 80049de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd48      	ble.n	8004a76 <__sflush_r+0xae>
 80049e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	d045      	beq.n	8004a76 <__sflush_r+0xae>
 80049ea:	2300      	movs	r3, #0
 80049ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80049f0:	682f      	ldr	r7, [r5, #0]
 80049f2:	6a21      	ldr	r1, [r4, #32]
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	d030      	beq.n	8004a5a <__sflush_r+0x92>
 80049f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	0759      	lsls	r1, r3, #29
 80049fe:	d505      	bpl.n	8004a0c <__sflush_r+0x44>
 8004a00:	6863      	ldr	r3, [r4, #4]
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a06:	b10b      	cbz	r3, 8004a0c <__sflush_r+0x44>
 8004a08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a0a:	1ad2      	subs	r2, r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a10:	6a21      	ldr	r1, [r4, #32]
 8004a12:	4628      	mov	r0, r5
 8004a14:	47b0      	blx	r6
 8004a16:	1c43      	adds	r3, r0, #1
 8004a18:	89a3      	ldrh	r3, [r4, #12]
 8004a1a:	d106      	bne.n	8004a2a <__sflush_r+0x62>
 8004a1c:	6829      	ldr	r1, [r5, #0]
 8004a1e:	291d      	cmp	r1, #29
 8004a20:	d82b      	bhi.n	8004a7a <__sflush_r+0xb2>
 8004a22:	4a2a      	ldr	r2, [pc, #168]	@ (8004acc <__sflush_r+0x104>)
 8004a24:	410a      	asrs	r2, r1
 8004a26:	07d6      	lsls	r6, r2, #31
 8004a28:	d427      	bmi.n	8004a7a <__sflush_r+0xb2>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	6062      	str	r2, [r4, #4]
 8004a2e:	04d9      	lsls	r1, r3, #19
 8004a30:	6922      	ldr	r2, [r4, #16]
 8004a32:	6022      	str	r2, [r4, #0]
 8004a34:	d504      	bpl.n	8004a40 <__sflush_r+0x78>
 8004a36:	1c42      	adds	r2, r0, #1
 8004a38:	d101      	bne.n	8004a3e <__sflush_r+0x76>
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	b903      	cbnz	r3, 8004a40 <__sflush_r+0x78>
 8004a3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a42:	602f      	str	r7, [r5, #0]
 8004a44:	b1b9      	cbz	r1, 8004a76 <__sflush_r+0xae>
 8004a46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	d002      	beq.n	8004a54 <__sflush_r+0x8c>
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7ff fbea 	bl	8004228 <_free_r>
 8004a54:	2300      	movs	r3, #0
 8004a56:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a58:	e00d      	b.n	8004a76 <__sflush_r+0xae>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b0      	blx	r6
 8004a60:	4602      	mov	r2, r0
 8004a62:	1c50      	adds	r0, r2, #1
 8004a64:	d1c9      	bne.n	80049fa <__sflush_r+0x32>
 8004a66:	682b      	ldr	r3, [r5, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d0c6      	beq.n	80049fa <__sflush_r+0x32>
 8004a6c:	2b1d      	cmp	r3, #29
 8004a6e:	d001      	beq.n	8004a74 <__sflush_r+0xac>
 8004a70:	2b16      	cmp	r3, #22
 8004a72:	d11e      	bne.n	8004ab2 <__sflush_r+0xea>
 8004a74:	602f      	str	r7, [r5, #0]
 8004a76:	2000      	movs	r0, #0
 8004a78:	e022      	b.n	8004ac0 <__sflush_r+0xf8>
 8004a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	e01b      	b.n	8004aba <__sflush_r+0xf2>
 8004a82:	690f      	ldr	r7, [r1, #16]
 8004a84:	2f00      	cmp	r7, #0
 8004a86:	d0f6      	beq.n	8004a76 <__sflush_r+0xae>
 8004a88:	0793      	lsls	r3, r2, #30
 8004a8a:	680e      	ldr	r6, [r1, #0]
 8004a8c:	bf08      	it	eq
 8004a8e:	694b      	ldreq	r3, [r1, #20]
 8004a90:	600f      	str	r7, [r1, #0]
 8004a92:	bf18      	it	ne
 8004a94:	2300      	movne	r3, #0
 8004a96:	eba6 0807 	sub.w	r8, r6, r7
 8004a9a:	608b      	str	r3, [r1, #8]
 8004a9c:	f1b8 0f00 	cmp.w	r8, #0
 8004aa0:	dde9      	ble.n	8004a76 <__sflush_r+0xae>
 8004aa2:	6a21      	ldr	r1, [r4, #32]
 8004aa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004aa6:	4643      	mov	r3, r8
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	4628      	mov	r0, r5
 8004aac:	47b0      	blx	r6
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	dc08      	bgt.n	8004ac4 <__sflush_r+0xfc>
 8004ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac4:	4407      	add	r7, r0
 8004ac6:	eba8 0800 	sub.w	r8, r8, r0
 8004aca:	e7e7      	b.n	8004a9c <__sflush_r+0xd4>
 8004acc:	dfbffffe 	.word	0xdfbffffe

08004ad0 <_fflush_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	690b      	ldr	r3, [r1, #16]
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	b913      	cbnz	r3, 8004ae0 <_fflush_r+0x10>
 8004ada:	2500      	movs	r5, #0
 8004adc:	4628      	mov	r0, r5
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	b118      	cbz	r0, 8004aea <_fflush_r+0x1a>
 8004ae2:	6a03      	ldr	r3, [r0, #32]
 8004ae4:	b90b      	cbnz	r3, 8004aea <_fflush_r+0x1a>
 8004ae6:	f7ff f959 	bl	8003d9c <__sinit>
 8004aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f3      	beq.n	8004ada <_fflush_r+0xa>
 8004af2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004af4:	07d0      	lsls	r0, r2, #31
 8004af6:	d404      	bmi.n	8004b02 <_fflush_r+0x32>
 8004af8:	0599      	lsls	r1, r3, #22
 8004afa:	d402      	bmi.n	8004b02 <_fflush_r+0x32>
 8004afc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004afe:	f7ff fb72 	bl	80041e6 <__retarget_lock_acquire_recursive>
 8004b02:	4628      	mov	r0, r5
 8004b04:	4621      	mov	r1, r4
 8004b06:	f7ff ff5f 	bl	80049c8 <__sflush_r>
 8004b0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b0c:	07da      	lsls	r2, r3, #31
 8004b0e:	4605      	mov	r5, r0
 8004b10:	d4e4      	bmi.n	8004adc <_fflush_r+0xc>
 8004b12:	89a3      	ldrh	r3, [r4, #12]
 8004b14:	059b      	lsls	r3, r3, #22
 8004b16:	d4e1      	bmi.n	8004adc <_fflush_r+0xc>
 8004b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b1a:	f7ff fb65 	bl	80041e8 <__retarget_lock_release_recursive>
 8004b1e:	e7dd      	b.n	8004adc <_fflush_r+0xc>

08004b20 <fiprintf>:
 8004b20:	b40e      	push	{r1, r2, r3}
 8004b22:	b503      	push	{r0, r1, lr}
 8004b24:	4601      	mov	r1, r0
 8004b26:	ab03      	add	r3, sp, #12
 8004b28:	4805      	ldr	r0, [pc, #20]	@ (8004b40 <fiprintf+0x20>)
 8004b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b2e:	6800      	ldr	r0, [r0, #0]
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	f7ff fca3 	bl	800447c <_vfiprintf_r>
 8004b36:	b002      	add	sp, #8
 8004b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b3c:	b003      	add	sp, #12
 8004b3e:	4770      	bx	lr
 8004b40:	20000090 	.word	0x20000090

08004b44 <__swhatbuf_r>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	460c      	mov	r4, r1
 8004b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	b096      	sub	sp, #88	@ 0x58
 8004b50:	4615      	mov	r5, r2
 8004b52:	461e      	mov	r6, r3
 8004b54:	da0d      	bge.n	8004b72 <__swhatbuf_r+0x2e>
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2340      	movne	r3, #64	@ 0x40
 8004b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004b68:	2000      	movs	r0, #0
 8004b6a:	6031      	str	r1, [r6, #0]
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	b016      	add	sp, #88	@ 0x58
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
 8004b72:	466a      	mov	r2, sp
 8004b74:	f000 f848 	bl	8004c08 <_fstat_r>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	dbec      	blt.n	8004b56 <__swhatbuf_r+0x12>
 8004b7c:	9901      	ldr	r1, [sp, #4]
 8004b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004b86:	4259      	negs	r1, r3
 8004b88:	4159      	adcs	r1, r3
 8004b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b8e:	e7eb      	b.n	8004b68 <__swhatbuf_r+0x24>

08004b90 <__smakebuf_r>:
 8004b90:	898b      	ldrh	r3, [r1, #12]
 8004b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b94:	079d      	lsls	r5, r3, #30
 8004b96:	4606      	mov	r6, r0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	d507      	bpl.n	8004bac <__smakebuf_r+0x1c>
 8004b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	6163      	str	r3, [r4, #20]
 8004ba8:	b003      	add	sp, #12
 8004baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bac:	ab01      	add	r3, sp, #4
 8004bae:	466a      	mov	r2, sp
 8004bb0:	f7ff ffc8 	bl	8004b44 <__swhatbuf_r>
 8004bb4:	9f00      	ldr	r7, [sp, #0]
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7ff fba8 	bl	8004310 <_malloc_r>
 8004bc0:	b948      	cbnz	r0, 8004bd6 <__smakebuf_r+0x46>
 8004bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc6:	059a      	lsls	r2, r3, #22
 8004bc8:	d4ee      	bmi.n	8004ba8 <__smakebuf_r+0x18>
 8004bca:	f023 0303 	bic.w	r3, r3, #3
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	e7e2      	b.n	8004b9c <__smakebuf_r+0xc>
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	6020      	str	r0, [r4, #0]
 8004bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bde:	81a3      	strh	r3, [r4, #12]
 8004be0:	9b01      	ldr	r3, [sp, #4]
 8004be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004be6:	b15b      	cbz	r3, 8004c00 <__smakebuf_r+0x70>
 8004be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bec:	4630      	mov	r0, r6
 8004bee:	f000 f81d 	bl	8004c2c <_isatty_r>
 8004bf2:	b128      	cbz	r0, 8004c00 <__smakebuf_r+0x70>
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	81a3      	strh	r3, [r4, #12]
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	431d      	orrs	r5, r3
 8004c04:	81a5      	strh	r5, [r4, #12]
 8004c06:	e7cf      	b.n	8004ba8 <__smakebuf_r+0x18>

08004c08 <_fstat_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4d07      	ldr	r5, [pc, #28]	@ (8004c28 <_fstat_r+0x20>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	f7fd fb7a 	bl	800230e <_fstat>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d102      	bne.n	8004c24 <_fstat_r+0x1c>
 8004c1e:	682b      	ldr	r3, [r5, #0]
 8004c20:	b103      	cbz	r3, 8004c24 <_fstat_r+0x1c>
 8004c22:	6023      	str	r3, [r4, #0]
 8004c24:	bd38      	pop	{r3, r4, r5, pc}
 8004c26:	bf00      	nop
 8004c28:	20000738 	.word	0x20000738

08004c2c <_isatty_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4d06      	ldr	r5, [pc, #24]	@ (8004c48 <_isatty_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fd fb6e 	bl	8002318 <_isatty>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_isatty_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_isatty_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	20000738 	.word	0x20000738

08004c4c <_sbrk_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4d06      	ldr	r5, [pc, #24]	@ (8004c68 <_sbrk_r+0x1c>)
 8004c50:	2300      	movs	r3, #0
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	f7fd fb62 	bl	8002320 <_sbrk>
 8004c5c:	1c43      	adds	r3, r0, #1
 8004c5e:	d102      	bne.n	8004c66 <_sbrk_r+0x1a>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b103      	cbz	r3, 8004c66 <_sbrk_r+0x1a>
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	bd38      	pop	{r3, r4, r5, pc}
 8004c68:	20000738 	.word	0x20000738

08004c6c <abort>:
 8004c6c:	b508      	push	{r3, lr}
 8004c6e:	2006      	movs	r0, #6
 8004c70:	f000 f82c 	bl	8004ccc <raise>
 8004c74:	2001      	movs	r0, #1
 8004c76:	f7fd fb27 	bl	80022c8 <_exit>

08004c7a <_raise_r>:
 8004c7a:	291f      	cmp	r1, #31
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4605      	mov	r5, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	d904      	bls.n	8004c8e <_raise_r+0x14>
 8004c84:	2316      	movs	r3, #22
 8004c86:	6003      	str	r3, [r0, #0]
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	bd38      	pop	{r3, r4, r5, pc}
 8004c8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004c90:	b112      	cbz	r2, 8004c98 <_raise_r+0x1e>
 8004c92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004c96:	b94b      	cbnz	r3, 8004cac <_raise_r+0x32>
 8004c98:	4628      	mov	r0, r5
 8004c9a:	f000 f831 	bl	8004d00 <_getpid_r>
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ca8:	f000 b818 	b.w	8004cdc <_kill_r>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d00a      	beq.n	8004cc6 <_raise_r+0x4c>
 8004cb0:	1c59      	adds	r1, r3, #1
 8004cb2:	d103      	bne.n	8004cbc <_raise_r+0x42>
 8004cb4:	2316      	movs	r3, #22
 8004cb6:	6003      	str	r3, [r0, #0]
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e7e7      	b.n	8004c8c <_raise_r+0x12>
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4798      	blx	r3
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e7e0      	b.n	8004c8c <_raise_r+0x12>
	...

08004ccc <raise>:
 8004ccc:	4b02      	ldr	r3, [pc, #8]	@ (8004cd8 <raise+0xc>)
 8004cce:	4601      	mov	r1, r0
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f7ff bfd2 	b.w	8004c7a <_raise_r>
 8004cd6:	bf00      	nop
 8004cd8:	20000090 	.word	0x20000090

08004cdc <_kill_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	4d07      	ldr	r5, [pc, #28]	@ (8004cfc <_kill_r+0x20>)
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	f7fd fae5 	bl	80022b8 <_kill>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d102      	bne.n	8004cf8 <_kill_r+0x1c>
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	b103      	cbz	r3, 8004cf8 <_kill_r+0x1c>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000738 	.word	0x20000738

08004d00 <_getpid_r>:
 8004d00:	f7fd bad8 	b.w	80022b4 <_getpid>

08004d04 <_gettimeofday>:
 8004d04:	4b02      	ldr	r3, [pc, #8]	@ (8004d10 <_gettimeofday+0xc>)
 8004d06:	2258      	movs	r2, #88	@ 0x58
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0e:	4770      	bx	lr
 8004d10:	20000738 	.word	0x20000738

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
